using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using UNSInfra.Core.Configuration;
using UNSInfra.Core.Repositories;
using UNSInfra.Services.AutoMapping;
using UNSInfra.Services.SocketIO.Configuration;
using UNSInfra.Services.V1.Configuration;
using Xunit;

namespace UNSInfra.Core.Tests.Repositories;

/// <summary>
/// Tests to verify that Auto Topic Mapping settings persist across application restarts.
/// This is critical for ensuring user preferences are maintained between sessions.
/// </summary>
public class AutoTopicMappingPersistenceTests
{
    private readonly IServiceProvider _serviceProvider;
    private readonly IDataIngestionConfigurationRepository _repository;

    public AutoTopicMappingPersistenceTests()
    {
        var services = new ServiceCollection();
        services.AddLogging(builder => builder.AddConsole());
        services.AddSingleton<IDataIngestionConfigurationRepository, InMemoryDataIngestionConfigurationRepository>();
        
        _serviceProvider = services.BuildServiceProvider();
        _repository = _serviceProvider.GetRequiredService<IDataIngestionConfigurationRepository>();
    }

    [Fact]
    public async Task AutoTopicMapping_EnabledSetting_PersistsAcrossRestarts_SocketIO()
    {
        // Arrange - Create a SocketIO configuration with Auto Topic Mapping enabled
        var originalConfig = new SocketIODataIngestionConfiguration
        {
            Id = "test-socketio-config",
            Name = "Test SocketIO Configuration",
            ServiceType = "SocketIO",
            Description = "Test configuration for persistence testing",
            ServerUrl = "https://localhost:3000",
            BaseTopicPath = "socketio/test",
            IsEnabled = true,
            AutoMapperConfiguration = new AutoTopicMapperConfiguration
            {
                Enabled = true, // This is the critical setting we're testing
                MinimumConfidence = 0.75,
                CaseSensitive = false,
                StripPrefixes = new List<string> { "socketio/", "test/" },
                MaxSearchDepth = 5,
                CreateMissingNodes = true
            }
        };

        // Act 1 - Save the configuration (simulating user enabling the setting)
        var savedConfig = await _repository.SaveConfigurationAsync(originalConfig);
        Assert.NotNull(savedConfig);
        Assert.Equal("test-socketio-config", savedConfig.Id);

        // Act 2 - Retrieve the configuration (simulating application restart)
        var retrievedConfig = await _repository.GetConfigurationAsync("test-socketio-config");
        
        // Assert - Verify that Auto Topic Mapping is still enabled after restart
        Assert.NotNull(retrievedConfig);
        Assert.IsType<SocketIODataIngestionConfiguration>(retrievedConfig);
        
        var socketIOConfig = (SocketIODataIngestionConfiguration)retrievedConfig;
        Assert.NotNull(socketIOConfig.AutoMapperConfiguration);
        Assert.True(socketIOConfig.AutoMapperConfiguration.Enabled, 
            "Auto Topic Mapping should remain enabled after application restart");
        
        // Verify other auto mapper settings are also persisted
        Assert.Equal(0.75, socketIOConfig.AutoMapperConfiguration.MinimumConfidence);
        Assert.False(socketIOConfig.AutoMapperConfiguration.CaseSensitive);
        Assert.Contains("socketio/", socketIOConfig.AutoMapperConfiguration.StripPrefixes);
        Assert.Contains("test/", socketIOConfig.AutoMapperConfiguration.StripPrefixes);
        Assert.Equal(5, socketIOConfig.AutoMapperConfiguration.MaxSearchDepth);
        Assert.True(socketIOConfig.AutoMapperConfiguration.CreateMissingNodes);
    }

    [Fact]
    public async Task AutoTopicMapping_DisabledSetting_PersistsAcrossRestarts_SocketIO()
    {
        // Arrange - Create a SocketIO configuration with Auto Topic Mapping disabled
        var originalConfig = new SocketIODataIngestionConfiguration
        {
            Id = "test-socketio-disabled",
            Name = "Test SocketIO Configuration - Disabled",
            ServiceType = "SocketIO",
            Description = "Test configuration for persistence testing with disabled auto mapping",
            ServerUrl = "https://localhost:3000",
            BaseTopicPath = "socketio/test",
            IsEnabled = true,
            AutoMapperConfiguration = new AutoTopicMapperConfiguration
            {
                Enabled = false, // This is the critical setting we're testing
                MinimumConfidence = 0.8,
                CaseSensitive = true,
                StripPrefixes = new List<string>(),
                MaxSearchDepth = 10,
                CreateMissingNodes = false
            }
        };

        // Act 1 - Save the configuration (simulating user disabling the setting)
        var savedConfig = await _repository.SaveConfigurationAsync(originalConfig);
        
        // Act 2 - Retrieve the configuration (simulating application restart)
        var retrievedConfig = await _repository.GetConfigurationAsync("test-socketio-disabled");
        
        // Assert - Verify that Auto Topic Mapping remains disabled after restart
        Assert.NotNull(retrievedConfig);
        var socketIOConfig = (SocketIODataIngestionConfiguration)retrievedConfig;
        Assert.NotNull(socketIOConfig.AutoMapperConfiguration);
        Assert.False(socketIOConfig.AutoMapperConfiguration.Enabled, 
            "Auto Topic Mapping should remain disabled after application restart");
    }

    [Fact]
    public async Task AutoTopicMapping_EnabledSetting_PersistsAcrossRestarts_MQTT()
    {
        // Arrange - Create an MQTT configuration with Auto Topic Mapping enabled
        var originalConfig = new MqttDataIngestionConfiguration
        {
            Id = "test-mqtt-config",
            Name = "Test MQTT Configuration",
            ServiceType = "MQTT",
            Description = "Test MQTT configuration for persistence testing",
            BrokerHost = "localhost",
            BrokerPort = 1883,
            TopicPattern = "test/+/data",
            IsEnabled = true,
            AutoMapperConfiguration = new AutoTopicMapperConfiguration
            {
                Enabled = true, // This is the critical setting we're testing
                MinimumConfidence = 0.9,
                CaseSensitive = true,
                StripPrefixes = new List<string> { "mqtt/", "broker/" },
                MaxSearchDepth = 8,
                CreateMissingNodes = false
            }
        };

        // Act 1 - Save the configuration
        var savedConfig = await _repository.SaveConfigurationAsync(originalConfig);
        
        // Act 2 - Retrieve the configuration (simulating application restart)
        var retrievedConfig = await _repository.GetConfigurationAsync("test-mqtt-config");
        
        // Assert - Verify persistence for MQTT configurations
        Assert.NotNull(retrievedConfig);
        Assert.IsType<MqttDataIngestionConfiguration>(retrievedConfig);
        
        var mqttConfig = (MqttDataIngestionConfiguration)retrievedConfig;
        Assert.NotNull(mqttConfig.AutoMapperConfiguration);
        Assert.True(mqttConfig.AutoMapperConfiguration.Enabled, 
            "Auto Topic Mapping should remain enabled after application restart for MQTT");
        
        // Verify MQTT-specific settings are also persisted
        Assert.Equal(0.9, mqttConfig.AutoMapperConfiguration.MinimumConfidence);
        Assert.True(mqttConfig.AutoMapperConfiguration.CaseSensitive);
        Assert.Contains("mqtt/", mqttConfig.AutoMapperConfiguration.StripPrefixes);
        Assert.Contains("broker/", mqttConfig.AutoMapperConfiguration.StripPrefixes);
    }

    [Fact]
    public async Task AutoTopicMapping_NullConfiguration_DoesNotCrashOnRestart()
    {
        // Arrange - Create a configuration without AutoMapperConfiguration
        var originalConfig = new SocketIODataIngestionConfiguration
        {
            Id = "test-null-automapper",
            Name = "Test Configuration - No Auto Mapper",
            ServiceType = "SocketIO",
            Description = "Test configuration without auto mapper configuration",
            ServerUrl = "https://localhost:3000",
            BaseTopicPath = "socketio/test",
            IsEnabled = true,
            AutoMapperConfiguration = null // Explicitly null
        };

        // Act 1 - Save the configuration
        var savedConfig = await _repository.SaveConfigurationAsync(originalConfig);
        
        // Act 2 - Retrieve the configuration (simulating application restart)
        var retrievedConfig = await _repository.GetConfigurationAsync("test-null-automapper");
        
        // Assert - Verify the application handles null AutoMapperConfiguration gracefully
        Assert.NotNull(retrievedConfig);
        var socketIOConfig = (SocketIODataIngestionConfiguration)retrievedConfig;
        
        // Should either be null or have default values - both are acceptable
        if (socketIOConfig.AutoMapperConfiguration != null)
        {
            // If it exists, it should have sensible defaults
            Assert.False(socketIOConfig.AutoMapperConfiguration.Enabled, 
                "Default auto mapper configuration should have Enabled = false");
        }
        // If it's null, that's also fine - the application should handle this gracefully
    }

    [Fact]
    public async Task AutoTopicMapping_MultipleConfigurations_EachMaintainsIndependentSettings()
    {
        // Arrange - Create multiple configurations with different auto mapping settings
        var config1 = new SocketIODataIngestionConfiguration
        {
            Id = "socketio-enabled",
            Name = "SocketIO - Auto Mapping Enabled",
            ServiceType = "SocketIO",
            ServerUrl = "https://localhost:3000",
            AutoMapperConfiguration = new AutoTopicMapperConfiguration { Enabled = true }
        };

        var config2 = new SocketIODataIngestionConfiguration
        {
            Id = "socketio-disabled",
            Name = "SocketIO - Auto Mapping Disabled",
            ServiceType = "SocketIO",
            ServerUrl = "https://localhost:3001",
            AutoMapperConfiguration = new AutoTopicMapperConfiguration { Enabled = false }
        };

        var config3 = new MqttDataIngestionConfiguration
        {
            Id = "mqtt-enabled",
            Name = "MQTT - Auto Mapping Enabled",
            ServiceType = "MQTT",
            BrokerHost = "localhost",
            AutoMapperConfiguration = new AutoTopicMapperConfiguration { Enabled = true }
        };

        // Act - Save all configurations
        await _repository.SaveConfigurationAsync(config1);
        await _repository.SaveConfigurationAsync(config2);
        await _repository.SaveConfigurationAsync(config3);

        // Retrieve all configurations (simulating application restart)
        var retrieved1 = await _repository.GetConfigurationAsync("socketio-enabled");
        var retrieved2 = await _repository.GetConfigurationAsync("socketio-disabled");
        var retrieved3 = await _repository.GetConfigurationAsync("mqtt-enabled");

        // Assert - Each configuration maintains its independent auto mapping setting
        var socketIO1 = (SocketIODataIngestionConfiguration)retrieved1!;
        var socketIO2 = (SocketIODataIngestionConfiguration)retrieved2!;
        var mqtt1 = (MqttDataIngestionConfiguration)retrieved3!;

        Assert.True(socketIO1.AutoMapperConfiguration!.Enabled, "First SocketIO config should have auto mapping enabled");
        Assert.False(socketIO2.AutoMapperConfiguration!.Enabled, "Second SocketIO config should have auto mapping disabled");
        Assert.True(mqtt1.AutoMapperConfiguration!.Enabled, "MQTT config should have auto mapping enabled");
    }

    [Fact]
    public async Task AutoTopicMapping_UpdateExistingConfiguration_PersistsChanges()
    {
        // Arrange - Create initial configuration with auto mapping disabled
        var initialConfig = new SocketIODataIngestionConfiguration
        {
            Id = "test-update-config",
            Name = "Test Update Configuration",
            ServiceType = "SocketIO",
            ServerUrl = "https://localhost:3000",
            AutoMapperConfiguration = new AutoTopicMapperConfiguration { Enabled = false }
        };

        // Act 1 - Save initial configuration
        await _repository.SaveConfigurationAsync(initialConfig);

        // Act 2 - Update configuration to enable auto mapping (simulating user changing setting)
        initialConfig.AutoMapperConfiguration.Enabled = true;
        initialConfig.AutoMapperConfiguration.MinimumConfidence = 0.85;
        await _repository.SaveConfigurationAsync(initialConfig);

        // Act 3 - Retrieve updated configuration (simulating application restart)
        var retrievedConfig = await _repository.GetConfigurationAsync("test-update-config");

        // Assert - Verify the updated setting persists
        Assert.NotNull(retrievedConfig);
        var socketIOConfig = (SocketIODataIngestionConfiguration)retrievedConfig;
        Assert.NotNull(socketIOConfig.AutoMapperConfiguration);
        Assert.True(socketIOConfig.AutoMapperConfiguration.Enabled, 
            "Updated auto mapping setting should persist after restart");
        Assert.Equal(0.85, socketIOConfig.AutoMapperConfiguration.MinimumConfidence);
    }

    [Fact]
    public async Task AutoTopicMapping_GetAllConfigurations_PreservesAllAutoMappingSettings()
    {
        // Arrange - Create multiple configurations with different settings
        var configs = new List<IDataIngestionConfiguration>
        {
            new SocketIODataIngestionConfiguration
            {
                Id = "socketio-1",
                Name = "SocketIO 1",
                ServiceType = "SocketIO",
                ServerUrl = "https://localhost:3000",
                AutoMapperConfiguration = new AutoTopicMapperConfiguration { Enabled = true, MinimumConfidence = 0.7 }
            },
            new SocketIODataIngestionConfiguration
            {
                Id = "socketio-2",
                Name = "SocketIO 2",
                ServiceType = "SocketIO",
                ServerUrl = "https://localhost:3001",
                AutoMapperConfiguration = new AutoTopicMapperConfiguration { Enabled = false, MinimumConfidence = 0.9 }
            }
        };

        // Act 1 - Save all configurations
        foreach (var config in configs)
        {
            await _repository.SaveConfigurationAsync(config);
        }

        // Act 2 - Retrieve all configurations (simulating application restart)
        var allConfigurations = await _repository.GetAllConfigurationsAsync();

        // Assert - Verify all auto mapping settings are preserved
        Assert.Equal(2, allConfigurations.Count);
        
        var socketIO1 = allConfigurations.OfType<SocketIODataIngestionConfiguration>()
            .FirstOrDefault(c => c.Id == "socketio-1");
        var socketIO2 = allConfigurations.OfType<SocketIODataIngestionConfiguration>()
            .FirstOrDefault(c => c.Id == "socketio-2");

        Assert.NotNull(socketIO1);
        Assert.NotNull(socketIO2);
        
        Assert.True(socketIO1.AutoMapperConfiguration!.Enabled);
        Assert.Equal(0.7, socketIO1.AutoMapperConfiguration.MinimumConfidence);
        
        Assert.False(socketIO2.AutoMapperConfiguration!.Enabled);
        Assert.Equal(0.9, socketIO2.AutoMapperConfiguration.MinimumConfidence);
    }

    public void Dispose()
    {
        _serviceProvider?.Dispose();
    }
}
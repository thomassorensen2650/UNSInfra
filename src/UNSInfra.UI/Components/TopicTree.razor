@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Hierarchy
@inject ILogger<TopicTree> Logger

<style>
.topic-tree {
    list-style-type: none;
    padding-left: 1em;
}

/* Full height TopicTree component */
.topic-tree-wrapper {
    height: 100%;
    display: flex;
    flex-direction: column;
}

.topic-tree-content {
    height: 100%;
    display: flex;
    flex-direction: column;
    min-height: 0;
}

.topic-tree-content .tab-pane.show.active {
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 0;
}

.topic-tree-content .tab-pane:not(.show) {
    display: none;
}

.uns-container,
.data-browser-container {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
}

.nav-tabs .nav-link {
    font-size: 0.9rem;
    padding: 0.5rem 1rem;
    border: none;
    color: #6c757d;
    transition: all 0.15s ease-in-out;
}

.nav-tabs .nav-link:hover {
    color: #495057;
    background-color: #f8f9fa;
}

.nav-tabs .nav-link.active {
    color: #495057;
    background-color: #fff;
    border-color: #dee2e6 #dee2e6 #fff;
    font-weight: 500;
}

.nav-tabs {
    border-bottom: 1px solid #dee2e6;
    margin-bottom: 0;
}
</style>

<div class="topic-tree-wrapper">
    <!-- Tab Navigation -->
    <ul class="nav nav-tabs" id="topicTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "ns" ? "active" : "")" id="ns-tab" type="button" role="tab" 
                    @onclick="@(() => SetActiveTab("ns"))">
                <i class="bi bi-diagram-3 me-1"></i> UNS
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "dataBrowser" ? "active" : "")" id="dataBrowser-tab" type="button" role="tab"
                    @onclick="@(() => SetActiveTab("dataBrowser"))">
                <i class="bi bi-database me-1"></i> Data Browser
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content topic-tree-content">
        <!-- UNS Tab -->
        <div class="tab-pane @(activeTab == "ns" ? "show active" : "")" id="ns-pane" role="tabpanel">
            <div class="uns-container">
                <NSTreeEditor OnAddDataToNamespace="HandleAddDataToNamespace" OnTopicSelected="HandleTopicSelected" />
            </div>
        </div>
        
        <!-- Data Browser Tab -->
        <div class="tab-pane @(activeTab == "dataBrowser" ? "show active" : "")" id="dataBrowser-pane" role="tabpanel">
            <div class="data-browser-container">
                <DataBrowserContent DataBrowserNodes="DataBrowserNodes" 
                                  HighlightedPaths="HighlightedPaths" 
                                  SelectedNodePath="@SelectedNodePath" 
                                  OnTopicSelected="HandleTopicSelected" 
                                  OnToggleExpanded="ToggleExpansion"
                                  OnAddDataToNamespace="HandleAddDataToNamespace" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<TopicInfo> Topics { get; set; } = new();
    [Parameter] public HashSet<string> HighlightedPaths { get; set; } = new();
    [Parameter] public EventCallback<TopicInfo> OnTopicSelected { get; set; }
    [Parameter] public EventCallback<(string namespacePath, List<TopicInfo> topics)> OnAddDataToNamespace { get; set; }
    [Parameter] public int MaxVisibleTopics { get; set; } = 1000; // Limit visible topics for performance
    [Parameter] public int MaxUnverifiedTopicsPerPage { get; set; } = 100; // Paginate unverified topics
    
    private string? SelectedNodePath { get; set; }
    private string activeTab = "ns"; // Default to NS Structure tab

    private List<TopicTreeNodeModel> RootNodes = new();
    private List<TopicTreeNodeModel> DataBrowserNodes = new();
    private Dictionary<string, TopicTreeNodeModel> NodeLookup = new();
    private Dictionary<string, List<TopicInfo>> TopicsByPath = new();
    private Dictionary<string, List<string>> ChildrenLookup = new(); // Parent path -> immediate child names (ordered)
    private int _lastTopicsHash = 0;
    private readonly Dictionary<string, DateTime> _expansionCooldowns = new(); // Prevent rapid successive clicks
    private int _lastTopicsCount = 0; // Track if we're just adding new topics
    private readonly object _topicsLock = new object(); // Synchronize access to Topics collection
    private List<TopicInfo> _cachedTopicsSnapshot = new(); // Cache to avoid repeated snapshots
    
    // Track expansion state per tab to avoid conflicts
    private readonly Dictionary<string, HashSet<string>> _tabExpansionStates = new();
    private string? _lastSelectedPath; // Track selected path across refreshes

    protected override async Task OnParametersSetAsync()
    {
        // Create a thread-safe snapshot for processing
        List<TopicInfo> currentTopics;
        int currentCount;
        
        lock (_topicsLock)
        {
            if (Topics == null || Topics.Count == 0)
            {
                if (_cachedTopicsSnapshot.Count > 0)
                {
                    // Topics were cleared, update accordingly
                    _cachedTopicsSnapshot.Clear();
                    BuildTreeStructure(_cachedTopicsSnapshot);
                    _lastTopicsHash = 0;
                    _lastTopicsCount = 0;
                }
                return;
            }
            
            // Only create new snapshot if Topics reference changed or count is significantly different
            currentCount = Topics.Count;
            bool needsNewSnapshot = _cachedTopicsSnapshot.Count == 0 || 
                                   Math.Abs(currentCount - _cachedTopicsSnapshot.Count) > 10;
            
            if (needsNewSnapshot)
            {
                try
                {
                    _cachedTopicsSnapshot = Topics.ToList();
                }
                catch (InvalidOperationException)
                {
                    // Collection modified during copy, use previous snapshot
                    currentTopics = _cachedTopicsSnapshot;
                    currentCount = _cachedTopicsSnapshot.Count;
                }
            }
            
            currentTopics = _cachedTopicsSnapshot;
        }
        
        // Check if we need to update the tree structure
        var currentHash = GetTopicsHashCode(currentTopics);
        
        if (currentHash != _lastTopicsHash)
        {
            bool isJustAddingTopics = currentCount > _lastTopicsCount && 
                                      _lastTopicsCount > 0 && // Not initial load
                                      currentCount - _lastTopicsCount <= 5; // Only a few new topics
            
            if (isJustAddingTopics)
            {
                // Incremental update - preserve Data Browser expansion state
                var dataBrowserExpansionState = new HashSet<string>();
                if (DataBrowserNodes.Any())
                {
                    CollectExpandedPaths(DataBrowserNodes, dataBrowserExpansionState);
                }
                
                AddNewTopicsIncrementally(currentTopics);
                
                // Rebuild Data Browser with preserved expansion state
                BuildDataBrowserTreeStructure(currentTopics);
            }
            else
            {
                // Full rebuild needed - preserve expansion state
                var expansionState = SaveExpansionState();
                var selectedPath = SelectedNodePath;
                
                BuildTreeStructure(currentTopics);
                
                RestoreExpansionState(expansionState);
                SelectedNodePath = selectedPath;
            }
            
            _lastTopicsHash = currentHash;
            _lastTopicsCount = currentCount;
        }
    }
    
    private int GetTopicsHashCode(List<TopicInfo> topics)
    {
        if (topics == null || topics.Count == 0) 
            return 0;
            
        var hash = topics.Count;
        foreach (var topic in topics)
        {
            hash = hash * 31 + topic.Topic.GetHashCode();
            hash = hash * 31 + topic.Path.GetFullPath().GetHashCode();
            hash = hash * 31 + topic.SourceType.GetHashCode();
        }
        return hash;
    }
    
    private void AddNewTopicsIncrementally(List<TopicInfo> topics)
    {
        // Get the new topics (assuming they're at the end of the list)
        if (topics == null || topics.Count <= _lastTopicsCount)
            return;
            
        var newTopics = topics.Skip(_lastTopicsCount).ToList();
        
        // Add new topics using folder structure grouped by source type
        if (newTopics.Count > 0)
        {
            const string dataBrowserSectionName = "📊 Data Browser";
            
            // Ensure data browser section exists
            if (!ChildrenLookup.ContainsKey(""))
                ChildrenLookup[""] = new List<string>();
            if (!ChildrenLookup[""].Contains(dataBrowserSectionName))
                ChildrenLookup[""].Add(dataBrowserSectionName);
            
            if (!ChildrenLookup.ContainsKey(dataBrowserSectionName))
                ChildrenLookup[dataBrowserSectionName] = new List<string>();
            if (!TopicsByPath.ContainsKey(dataBrowserSectionName))
                TopicsByPath[dataBrowserSectionName] = new List<TopicInfo>();
            
            // Group topics by source type, then build folder structure
            var topicsBySourceType = newTopics.GroupBy(t => t.SourceType).ToList();
            
            foreach (var sourceGroup in topicsBySourceType)
            {
                var sourceType = sourceGroup.Key;
                var sourcePath = $"{dataBrowserSectionName}/{sourceType}";
                
                // Ensure source type folder exists
                if (!ChildrenLookup[dataBrowserSectionName].Contains(sourceType))
                {
                    ChildrenLookup[dataBrowserSectionName].Add(sourceType);
                }
                if (!ChildrenLookup.ContainsKey(sourcePath))
                    ChildrenLookup[sourcePath] = new List<string>();
                if (!TopicsByPath.ContainsKey(sourcePath))
                    TopicsByPath[sourcePath] = new List<TopicInfo>();
                
                // Build folder structure for each topic within this source type
                foreach (var topic in sourceGroup)
                {
                    var topicParts = topic.Topic.Split('/', StringSplitOptions.RemoveEmptyEntries);
                    
                    // If topic has no separators (flat topic name), treat it as a single item
                    if (topicParts.Length == 1)
                    {
                        var topicKey = $"{sourcePath}/{topic.Topic}";
                        if (!ChildrenLookup[sourcePath].Contains(topic.Topic))
                        {
                            ChildrenLookup[sourcePath].Add(topic.Topic);
                            TopicsByPath[topicKey] = new List<TopicInfo> { topic };
                        }
                    }
                    else
                    {
                        // Build nested folder structure based on topic path segments
                        string currentPath = sourcePath;
                        
                        for (int i = 0; i < topicParts.Length; i++)
                        {
                            var part = topicParts[i];
                            var parentPath = currentPath;
                            currentPath = $"{currentPath}/{part}";
                            
                            // Initialize path structures if they don't exist
                            if (!TopicsByPath.ContainsKey(currentPath))
                                TopicsByPath[currentPath] = new List<TopicInfo>();
                            
                            if (!ChildrenLookup.ContainsKey(parentPath))
                                ChildrenLookup[parentPath] = new List<string>();
                            
                            // Add this part as a child of the parent path
                            if (!ChildrenLookup[parentPath].Contains(part))
                                ChildrenLookup[parentPath].Add(part);
                            
                            // If this is the final segment, store the actual topic data
                            if (i == topicParts.Length - 1)
                            {
                                TopicsByPath[currentPath].Add(topic);
                            }
                        }
                    }
                }
            }
        }
        
        // Update existing nodes that might now have new children
        UpdateNodesWithNewChildren();
    }
    
    private void UpdateNodesWithNewChildren()
    {
        // Update existing nodes that might now have children
        foreach (var node in NodeLookup.Values)
        {
            if (!node.HasChildren && ChildrenLookup.ContainsKey(node.FullPath) && ChildrenLookup[node.FullPath].Count > 0)
            {
                node.HasChildren = true;
            }
        }
        
        // Add any new root nodes
        var rootChildNames = ChildrenLookup.GetValueOrDefault("", new List<string>());
        var existingRootNames = RootNodes.Select(n => n.Name).ToHashSet();
        
        foreach (var childName in rootChildNames)
        {
            if (!existingRootNames.Contains(childName))
            {
                var node = CreateNode(childName, childName);
                RootNodes.Add(node); // Add new nodes at the bottom
                NodeLookup[childName] = node;
            }
        }
    }

    private void SetActiveTab(string tabName)
    {
        // Save current tab's expansion state before switching
        if (!string.IsNullOrEmpty(activeTab))
        {
            _tabExpansionStates[activeTab] = SaveExpansionState();
        }
        
        // Save current selection
        _lastSelectedPath = SelectedNodePath;
        
        activeTab = tabName;
        
        // Restore expansion state for the new tab
        if (_tabExpansionStates.TryGetValue(tabName, out var expansionState))
        {
            RestoreExpansionState(expansionState);
        }
        
        StateHasChanged();
    }

    private async Task HandleAddDataToNamespace(string namespacePath)
    {
        // Get topics that are not yet assigned to namespaces for selection - use cached snapshot
        List<TopicInfo> availableTopics;
        lock (_topicsLock)
        {
            availableTopics = _cachedTopicsSnapshot.Where(t => string.IsNullOrEmpty(t.NSPath)).ToList();
        }
        
        await OnAddDataToNamespace.InvokeAsync((namespacePath, availableTopics));
    }

    private void BuildTreeStructure(List<TopicInfo> topics)
    {
        NodeLookup.Clear();
        TopicsByPath.Clear();
        ChildrenLookup.Clear();
        
        // Clear all node collections
        DataBrowserNodes.Clear();

        // Show all topics from data sources in Data Browser
        var allTopics = topics.OrderBy(t => t.CreatedAt).ToList();
        


        // Add NS (Namespace Structure) section - but don't populate it here
        // The NS section will be handled by the NSTreeEditor component
        const string nsSectionName = "📁 NS";
        if (!ChildrenLookup.ContainsKey(""))
            ChildrenLookup[""] = new List<string>();
        if (!ChildrenLookup[""].Contains(nsSectionName))
            ChildrenLookup[""].Insert(0, nsSectionName); // Insert at beginning

        // Initialize NS section as placeholder - actual editing happens in NSTreeEditor
        if (!ChildrenLookup.ContainsKey(nsSectionName))
            ChildrenLookup[nsSectionName] = new List<string>();
        if (!TopicsByPath.ContainsKey(nsSectionName))
            TopicsByPath[nsSectionName] = new List<TopicInfo>();

        // Always create data browser section, even if empty initially
        const string dataBrowserSectionName = "📊 Data Browser";
        
        // Add data browser section to root
        if (!ChildrenLookup.ContainsKey(""))
            ChildrenLookup[""] = new List<string>();
        if (!ChildrenLookup[""].Contains(dataBrowserSectionName))
            ChildrenLookup[""].Add(dataBrowserSectionName);
        
        // Initialize data browser section
        if (!ChildrenLookup.ContainsKey(dataBrowserSectionName))
            ChildrenLookup[dataBrowserSectionName] = new List<string>();
        if (!TopicsByPath.ContainsKey(dataBrowserSectionName))
            TopicsByPath[dataBrowserSectionName] = new List<TopicInfo>();

        // Process all topics using folder structure grouped by source type
        if (allTopics.Count > 0)
        {
            
            // Group all topics by source type, then build folder structure
            var topicsBySourceType = allTopics.GroupBy(t => t.SourceType).ToList();
            
            foreach (var sourceGroup in topicsBySourceType)
            {
                var sourceType = sourceGroup.Key;
                var sourcePath = $"{dataBrowserSectionName}/{sourceType}";
                
                // Ensure source type folder exists
                if (!ChildrenLookup[dataBrowserSectionName].Contains(sourceType))
                {
                    ChildrenLookup[dataBrowserSectionName].Add(sourceType);
                }
                if (!ChildrenLookup.ContainsKey(sourcePath))
                    ChildrenLookup[sourcePath] = new List<string>();
                if (!TopicsByPath.ContainsKey(sourcePath))
                    TopicsByPath[sourcePath] = new List<TopicInfo>();
                
                // Build folder structure for each topic within this source type
                foreach (var topic in sourceGroup)
                {
                    var topicParts = topic.Topic.Split('/', StringSplitOptions.RemoveEmptyEntries);
                    
                    // If topic has no separators (flat topic name), treat it as a single item
                    if (topicParts.Length == 1)
                    {
                        var topicKey = $"{sourcePath}/{topic.Topic}";
                        if (!ChildrenLookup[sourcePath].Contains(topic.Topic))
                        {
                            ChildrenLookup[sourcePath].Add(topic.Topic);
                            TopicsByPath[topicKey] = new List<TopicInfo> { topic };
                        }
                    }
                    else
                    {
                        // Build nested folder structure based on topic path segments
                        string currentPath = sourcePath;
                        
                        for (int i = 0; i < topicParts.Length; i++)
                        {
                            var part = topicParts[i];
                            var parentPath = currentPath;
                            currentPath = $"{currentPath}/{part}";
                            
                            // Initialize path structures if they don't exist
                            if (!TopicsByPath.ContainsKey(currentPath))
                                TopicsByPath[currentPath] = new List<TopicInfo>();
                            
                            if (!ChildrenLookup.ContainsKey(parentPath))
                                ChildrenLookup[parentPath] = new List<string>();
                            
                            // Add this part as a child of the parent path
                            if (!ChildrenLookup[parentPath].Contains(part))
                                ChildrenLookup[parentPath].Add(part);
                            
                            // If this is the final segment, store the actual topic data
                            if (i == topicParts.Length - 1)
                            {
                                TopicsByPath[currentPath].Add(topic);
                            }
                        }
                    }
                }
            }
        }

        // Build separate node collections for tabs
        BuildDataBrowserTreeStructure(allTopics);

        // Keep the original root nodes for compatibility
        var rootChildNames = ChildrenLookup.GetValueOrDefault("", new List<string>());
        var root = new List<TopicTreeNodeModel>();
        foreach (var childName in rootChildNames)
        {
            var node = CreateNode(childName, childName);
            root.Add(node);
            NodeLookup[childName] = node;
        }
        RootNodes = root;
    }

    private TopicTreeNodeModel CreateNode(string name, string fullPath)
    {
        var hasData = TopicsByPath.ContainsKey(fullPath) && TopicsByPath[fullPath].Any();
        var hasChildren = ChildrenLookup.ContainsKey(fullPath) && ChildrenLookup[fullPath].Count > 0;
        
        // Special case: NS folder should always be expandable to show the NSTreeEditor
        if (name == "📁 NS")
        {
            hasChildren = true;
        }
        
        // Special case: Data Browser folder should always be expandable 
        if (name == "📊 Data Browser")
        {
            hasChildren = true;
        }
        
        return new TopicTreeNodeModel
        {
            Name = name,
            FullPath = fullPath,
            Children = new List<TopicTreeNodeModel>(),
            Topic = hasData ? TopicsByPath[fullPath].FirstOrDefault() : null,
            HasChildren = hasChildren,
            ChildrenLoaded = false,
            IsExpanded = false
        };
    }




    public async Task ToggleExpansion(TopicTreeNodeModel node)
    {
        if (!node.HasChildren) return;
        
        // Debounce rapid clicks
        var now = DateTime.UtcNow;
        if (_expansionCooldowns.TryGetValue(node.FullPath, out var lastExpansion) && 
            (now - lastExpansion).TotalMilliseconds < 200)
        {
            return; // Ignore rapid successive clicks
        }
        _expansionCooldowns[node.FullPath] = now;
        
        // Handle collapse immediately
        if (node.IsExpanded)
        {
            node.IsExpanded = false;
            StateHasChanged();
            return;
        }
        
        // Handle expansion with loading state
        if (!node.ChildrenLoaded)
        {
            // Show loading indicator IMMEDIATELY before any async operations
            node.IsLoadingChildren = true;
            node.IsExpanded = true;
            StateHasChanged(); // Force immediate UI update
            
            // Force the UI to render immediately
            await Task.Yield();
            
            try
            {
                // Load children on the current thread (it's already fast)
                LoadChildren(node);
                
                // Update state after loading
                node.IsLoadingChildren = false;
                StateHasChanged();
            }
            catch (Exception)
            {
                node.IsLoadingChildren = false;
                node.IsExpanded = false; // Revert on error
                StateHasChanged();
            }
        }
        else
        {
            // Just expand if already loaded
            node.IsExpanded = true;
            StateHasChanged();
        }
    }

    private void LoadChildren(TopicTreeNodeModel node)
    {
        // Use fast lookup instead of iterating through all paths
        var childNames = ChildrenLookup.GetValueOrDefault(node.FullPath, new List<string>());
        node.Children.Clear();
        
        // Pre-allocate collection for better performance
        var newChildren = new List<TopicTreeNodeModel>(childNames.Count);
        
        foreach (var childName in childNames)
        {
            var childFullPath = string.IsNullOrEmpty(node.FullPath) ? childName : $"{node.FullPath}/{childName}";
            var childNode = CreateNode(childName, childFullPath);
            newChildren.Add(childNode);
            NodeLookup[childFullPath] = childNode;
        }
        
        node.Children = newChildren;
        node.ChildrenLoaded = true;
    }

    public void BlinkNode(string path)
    {
        // Start blinking all nodes in the path hierarchy from root to leaf
        BlinkNodeHierarchy(path);
    }
    
    private void BlinkNodeHierarchy(string fullPath)
    {
        // Blinking functionality disabled for performance reasons
        return;
    }
    


    private void BuildDataBrowserTreeStructure(List<TopicInfo> topics)
    {
        // Save current expansion state before rebuilding
        var currentExpansionState = new HashSet<string>();
        if (DataBrowserNodes.Any())
        {
            CollectExpandedPaths(DataBrowserNodes, currentExpansionState);
        }
        
        // Clear and rebuild the DataBrowserNodes
        DataBrowserNodes.Clear();
        
        if (!topics.Any()) return;

        const string dataBrowserSectionName = "📊 Data Browser";
        
        // Create temporary structures for building the hierarchy
        var tempChildrenLookup = new Dictionary<string, List<string>>();
        var tempTopicsByPath = new Dictionary<string, List<TopicInfo>>();
        
        // Group topics by source type and build hierarchical structure
        var topicsBySourceType = topics.GroupBy(t => t.SourceType).Where(g => !string.IsNullOrEmpty(g.Key)).ToList();

        foreach (var sourceGroup in topicsBySourceType)
        {
            var sourceType = sourceGroup.Key;
            var sourcePath = $"{dataBrowserSectionName}/{sourceType}";
            
            // Initialize source type folder
            if (!tempChildrenLookup.ContainsKey(sourcePath))
                tempChildrenLookup[sourcePath] = new List<string>();
            if (!tempTopicsByPath.ContainsKey(sourcePath))
                tempTopicsByPath[sourcePath] = new List<TopicInfo>();

            // Build hierarchical folder structure for each topic within this source type
            foreach (var topic in sourceGroup.Where(t => !string.IsNullOrEmpty(t.Topic)))
            {
                var topicParts = topic.Topic.Split('/', StringSplitOptions.RemoveEmptyEntries);
                
                // If topic has no separators (flat topic name), treat it as a single item
                if (topicParts.Length == 1)
                {
                    var topicKey = $"{sourcePath}/{topic.Topic}";
                    if (!tempChildrenLookup[sourcePath].Contains(topic.Topic))
                    {
                        tempChildrenLookup[sourcePath].Add(topic.Topic);
                        tempTopicsByPath[topicKey] = new List<TopicInfo> { topic };
                    }
                }
                else
                {
                    // Build nested folder structure based on topic path segments
                    string currentPath = sourcePath;
                    
                    for (int i = 0; i < topicParts.Length; i++)
                    {
                        var part = topicParts[i];
                        var parentPath = currentPath;
                        currentPath = $"{currentPath}/{part}";
                        
                        // Initialize path structures if they don't exist
                        if (!tempTopicsByPath.ContainsKey(currentPath))
                            tempTopicsByPath[currentPath] = new List<TopicInfo>();
                        
                        if (!tempChildrenLookup.ContainsKey(parentPath))
                            tempChildrenLookup[parentPath] = new List<string>();
                        
                        // Add this part as a child of the parent path
                        if (!tempChildrenLookup[parentPath].Contains(part))
                            tempChildrenLookup[parentPath].Add(part);
                        
                        // If this is the final segment, store the actual topic data
                        if (i == topicParts.Length - 1)
                        {
                            tempTopicsByPath[currentPath].Add(topic);
                        }
                    }
                }
            }
        }

        // Now build the actual node structure from the temporary hierarchical data
        foreach (var sourceGroup in topicsBySourceType)
        {
            var sourceType = sourceGroup.Key;
            var sourcePath = $"{dataBrowserSectionName}/{sourceType}";
            
            var sourceNode = BuildDataBrowserNode(sourceType ?? "Unknown", sourcePath, tempChildrenLookup, tempTopicsByPath, currentExpansionState);
            if (sourceNode != null && (sourceNode.Children.Any() || sourceNode.Topic != null))
            {
                DataBrowserNodes.Add(sourceNode);
            }
        }
    }
    
    private TopicTreeNodeModel? BuildDataBrowserNode(string name, string fullPath, 
        Dictionary<string, List<string>> childrenLookup, 
        Dictionary<string, List<TopicInfo>> topicsByPath,
        HashSet<string> expansionState)
    {
        var hasData = topicsByPath.ContainsKey(fullPath) && topicsByPath[fullPath].Any();
        var hasChildren = childrenLookup.ContainsKey(fullPath) && childrenLookup[fullPath].Count > 0;
        
        var node = new TopicTreeNodeModel
        {
            Name = name,
            FullPath = fullPath,
            Children = new List<TopicTreeNodeModel>(),
            Topic = hasData ? topicsByPath[fullPath].FirstOrDefault() : null,
            HasChildren = hasChildren,
            ChildrenLoaded = hasChildren, // Load children immediately for Data Browser
            IsExpanded = expansionState.Contains(fullPath) // Restore expansion state
        };

        // Build children recursively
        if (hasChildren)
        {
            var childNames = childrenLookup[fullPath];
            foreach (var childName in childNames)
            {
                var childFullPath = $"{fullPath}/{childName}";
                var childNode = BuildDataBrowserNode(childName, childFullPath, childrenLookup, topicsByPath, expansionState);
                if (childNode != null)
                {
                    node.Children.Add(childNode);
                }
            }
        }

        return node;
    }




    private string GetParentPath(string path)
    {
        var lastSlash = path.LastIndexOf('/');
        return lastSlash > 0 ? path.Substring(0, lastSlash) : "";
    }

    private async Task HandleTopicSelected(TopicInfo topic)
    {
        try
        {
            // Use the topic path under the source type folder in Data Browser
            const string dataBrowserSectionName = "📊 Data Browser";
            SelectedNodePath = $"{dataBrowserSectionName}/{topic.SourceType}/{topic.Topic}";
            
            // First invoke the callback to update the parent component
            await OnTopicSelected.InvokeAsync(topic);
            
            // Then force immediate re-render to update selection highlighting
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log error but don't crash the UI
            Logger.LogError(ex, "Error in HandleTopicSelected");
        }
    }
    
    private HashSet<string> SaveExpansionState()
    {
        var expandedPaths = new HashSet<string>();
        if (RootNodes != null && RootNodes.Count > 0)
        {
            CollectExpandedPaths(RootNodes, expandedPaths);
        }
        
        // Also save expansion state for Data Browser nodes
        if (DataBrowserNodes != null && DataBrowserNodes.Count > 0)
        {
            CollectExpandedPaths(DataBrowserNodes, expandedPaths);
        }
        
        return expandedPaths;
    }
    
    private void CollectExpandedPaths(List<TopicTreeNodeModel> nodes, HashSet<string> expandedPaths)
    {
        foreach (var node in nodes)
        {
            if (node.IsExpanded)
            {
                expandedPaths.Add(node.FullPath);
                CollectExpandedPaths(node.Children, expandedPaths);
            }
        }
    }
    
    private void RestoreExpansionState(HashSet<string> expandedPaths)
    {
        // Restore expansion state for regular nodes
        foreach (var path in expandedPaths)
        {
            if (NodeLookup.TryGetValue(path, out var node))
            {
                node.IsExpanded = true;
                if (node.HasChildren && !node.ChildrenLoaded)
                {
                    LoadChildren(node);
                }
            }
        }
        
        // Restore expansion state for Data Browser nodes
        RestoreDataBrowserExpansionState(DataBrowserNodes, expandedPaths);
    }
    
    private void RestoreDataBrowserExpansionState(List<TopicTreeNodeModel> nodes, HashSet<string> expandedPaths)
    {
        foreach (var node in nodes)
        {
            if (expandedPaths.Contains(node.FullPath))
            {
                node.IsExpanded = true;
                node.ChildrenLoaded = node.Children.Any();
            }
            
            if (node.Children.Any())
            {
                RestoreDataBrowserExpansionState(node.Children, expandedPaths);
            }
        }
    }

    public class TopicTreeNodeModel
    {
        public string Name { get; set; } = string.Empty;
        public string FullPath { get; set; } = string.Empty;
        public List<TopicTreeNodeModel> Children { get; set; } = new();
        public TopicInfo? Topic { get; set; } // Only set for leaf nodes
        public bool IsExpanded { get; set; } = false; // Collapsed by default
        public bool HasChildren { get; set; } = false;
        public bool ChildrenLoaded { get; set; } = false;
        public bool HasData => Topic != null;
        public bool IsBlinking { get; set; } = false;
        public bool IsLoadingChildren { get; set; } = false;
    }
} 
@using UNSInfra.Core.Configuration
@using UNSInfra.Core.Services
@using UNSInfra.Core.Repositories
@using UNSInfra.Services.SocketIO.Configuration
@using UNSInfra.Services.V1.Configuration
@inject IDataIngestionServiceManager ServiceManager
@inject IDataIngestionConfigurationRepository ConfigurationRepository
@implements IDisposable
@rendermode InteractiveServer

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-activity"></i> Connection Status Monitor
        </h5>
        <div class="d-flex align-items-center gap-2">
            <small class="text-muted">
                Last updated: @lastUpdateTime.ToString("HH:mm:ss")
            </small>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" @bind="autoRefresh" @bind:event="onchange" />
                <label class="form-check-label">Auto-refresh</label>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (serviceStatuses == null || !serviceStatuses.Any())
        {
            <div class="text-center p-4">
                <i class="bi bi-broadcast text-muted" style="font-size: 2rem;"></i>
                <p class="text-muted mt-2 mb-0">No active connections</p>
                <small class="text-muted">Start a data ingestion service to see real-time status</small>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var kvp in serviceStatuses.OrderBy(s => s.Value.ConfigurationId))
                {
                    var status = kvp.Value;
                    var config = configurations?.FirstOrDefault(c => c.Id == status.ConfigurationId);
                    
                    <div class="col-lg-6 col-xl-4 mb-3">
                        <div class="card border @GetStatusCardBorderClass(status.Status)">
                            <div class="card-body p-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="card-title mb-1">@(config?.Name ?? "Unknown Service")</h6>
                                        <span class="badge @GetStatusBadgeClass(status.Status)">
                                            @GetStatusText(status.Status)
                                        </span>
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted">@(config?.ServiceType ?? "Unknown")</small>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(status.Message))
                                {
                                    <p class="text-muted small mb-2">@status.Message</p>
                                }

                                <!-- Connection Statistics -->
                                <div class="row g-2 mb-2">
                                    <div class="col-6">
                                        <div class="d-flex justify-content-between">
                                            <small class="text-muted">Data Points:</small>
                                            <small class="fw-bold">@status.DataPointsReceived.ToString("N0")</small>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="d-flex justify-content-between">
                                            <small class="text-muted">Message Rate:</small>
                                            <small class="fw-bold">@status.MessageRate.ToString("F1") msg/s</small>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="d-flex justify-content-between">
                                            <small class="text-muted">Throughput:</small>
                                            <small class="fw-bold">@FormatBytes(status.ThroughputBytesPerSecond)/s</small>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="d-flex justify-content-between">
                                            <small class="text-muted">Attempts:</small>
                                            <small class="fw-bold">@status.ConnectionAttempts</small>
                                        </div>
                                    </div>
                                </div>

                                <!-- Auto Mapper Status -->
                                <div class="border-top pt-2 mt-2">
                                    <div class="d-flex justify-content-between align-items-center mb-1">
                                        <small class="text-muted d-flex align-items-center">
                                            <i class="bi bi-diagram-3 me-1"></i>
                                            Auto Mapping:
                                        </small>
                                        <span class="badge bg-success small">
                                            Auto
                                        </span>
                                    </div>
                                    <small class="text-muted">Handled automatically by system</small>
                                </div>

                                <!-- Connection Progress Bar for Connecting Status -->
                                @if (status.Status == UNSInfra.Core.Configuration.ConnectionStatus.Connecting)
                                {
                                    <div class="progress mb-2" style="height: 4px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                                             role="progressbar" style="width: 100%"></div>
                                    </div>
                                }

                                <!-- Last Updated -->
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        Updated: @GetTimeAgo(status.LastUpdated)
                                    </small>
                                    
                                    <!-- Quick Actions -->
                                    <div class="btn-group btn-group-sm">
                                        @if (status.Status == UNSInfra.Core.Configuration.ConnectionStatus.Connected)
                                        {
                                            <button class="btn btn-outline-warning btn-sm" 
                                                    @onclick="@(() => RestartConnection(status.ConfigurationId))"
                                                    title="Restart connection">
                                                <i class="bi bi-arrow-clockwise"></i>
                                            </button>
                                        }
                                        else if (status.Status is UNSInfra.Core.Configuration.ConnectionStatus.Disconnected or UNSInfra.Core.Configuration.ConnectionStatus.Error)
                                        {
                                            <button class="btn btn-outline-success btn-sm" 
                                                    @onclick="@(() => StartConnection(status.ConfigurationId))"
                                                    title="Start connection">
                                                <i class="bi bi-play"></i>
                                            </button>
                                        }
                                        
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="@(() => StopConnection(status.ConfigurationId))"
                                                title="Stop connection"
                                                disabled="@(status.Status == UNSInfra.Core.Configuration.ConnectionStatus.Disabled)">
                                            <i class="bi bi-stop"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Summary Statistics -->
            <div class="row mt-3 pt-3 border-top">
                <div class="col-md-3 col-6">
                    <div class="text-center">
                        <div class="fs-4 fw-bold text-success">@connectedCount</div>
                        <small class="text-muted">Connected</small>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="text-center">
                        <div class="fs-4 fw-bold text-warning">@connectingCount</div>
                        <small class="text-muted">Connecting</small>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="text-center">
                        <div class="fs-4 fw-bold text-danger">@errorCount</div>
                        <small class="text-muted">Errors</small>
                    </div>
                </div>
                <div class="col-md-3 col-6">
                    <div class="text-center">
                        <div class="fs-4 fw-bold text-primary">@totalDataPoints.ToString("N0")</div>
                        <small class="text-muted">Total Data Points</small>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowSummary { get; set; } = true;
    [Parameter] public int RefreshInterval { get; set; } = 2000; // milliseconds
    
    private Dictionary<string, ServiceStatus>? serviceStatuses;
    private List<IDataIngestionConfiguration>? configurations;
    private Timer? refreshTimer;
    private DateTime lastUpdateTime = DateTime.Now;
    private bool autoRefresh = true;
    
    // Summary statistics
    private int connectedCount;
    private int connectingCount;
    private int errorCount;
    private long totalDataPoints;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetupAutoRefresh();
    }

    private void SetupAutoRefresh()
    {
        if (autoRefresh)
        {
            refreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), 
                                   null, TimeSpan.Zero, TimeSpan.FromMilliseconds(RefreshInterval));
        }
    }

    private async Task LoadData()
    {
        serviceStatuses = ServiceManager.GetServicesStatus();
        configurations = await ConfigurationRepository.GetAllConfigurationsAsync();
        UpdateSummaryStatistics();
        lastUpdateTime = DateTime.Now;
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        if (autoRefresh)
        {
            serviceStatuses = ServiceManager.GetServicesStatus();
            UpdateSummaryStatistics();
            lastUpdateTime = DateTime.Now;
            StateHasChanged();
        }
    }

    private void UpdateSummaryStatistics()
    {
        if (serviceStatuses != null)
        {
            connectedCount = serviceStatuses.Count(s => s.Value.Status == UNSInfra.Core.Configuration.ConnectionStatus.Connected);
            connectingCount = serviceStatuses.Count(s => s.Value.Status == UNSInfra.Core.Configuration.ConnectionStatus.Connecting);
            errorCount = serviceStatuses.Count(s => s.Value.Status == UNSInfra.Core.Configuration.ConnectionStatus.Error);
            totalDataPoints = serviceStatuses.Sum(s => s.Value.DataPointsReceived);
        }
        else
        {
            connectedCount = connectingCount = errorCount = 0;
            totalDataPoints = 0;
        }
    }

    private string GetStatusBadgeClass(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "bg-success",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "bg-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Disconnected => "bg-secondary",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "bg-danger",
            UNSInfra.Core.Configuration.ConnectionStatus.Stopping => "bg-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Disabled => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusCardBorderClass(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "border-success",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "border-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "border-danger",
            _ => ""
        };
    }

    private string GetStatusText(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "Connected",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "Connecting",
            UNSInfra.Core.Configuration.ConnectionStatus.Disconnected => "Disconnected",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "Error",
            UNSInfra.Core.Configuration.ConnectionStatus.Stopping => "Stopping",
            UNSInfra.Core.Configuration.ConnectionStatus.Disabled => "Disabled",
            _ => "Unknown"
        };
    }

    private string FormatBytes(double bytes)
    {
        if (bytes < 1024) return $"{bytes:F0} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024 * 1024):F1} MB";
        return $"{bytes / (1024 * 1024 * 1024):F1} GB";
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        
        if (timeSpan.TotalSeconds < 60)
            return $"{(int)timeSpan.TotalSeconds}s ago";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        
        return dateTime.ToString("MM/dd HH:mm");
    }

    private async Task StartConnection(string configurationId)
    {
        var config = configurations?.FirstOrDefault(c => c.Id == configurationId);
        if (config != null)
        {
            await ServiceManager.StartServiceAsync(config);
        }
    }

    private async Task StopConnection(string configurationId)
    {
        await ServiceManager.StopServiceAsync(configurationId);
    }

    private async Task RestartConnection(string configurationId)
    {
        await ServiceManager.RestartServiceAsync(configurationId);
    }

    private async Task OnAutoRefreshChanged(ChangeEventArgs e)
    {
        autoRefresh = (bool)(e.Value ?? false);
        
        refreshTimer?.Dispose();
        
        if (autoRefresh)
        {
            SetupAutoRefresh();
        }
    }


    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
@using UNSInfra.ConnectionSDK.Abstractions
@using UNSInfra.ConnectionSDK.Models
@using UNSInfra.Abstractions
@using UNSInfra.Models
@inject IConnectionManager ConnectionManager
@inject IConnectionRegistry ConnectionRegistry
@implements IDisposable
@rendermode InteractiveServer

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-activity"></i> Connection Status Monitor
        </h5>
        <div class="d-flex align-items-center gap-2">
            <small class="text-muted">
                Last updated: @lastUpdateTime.ToString("HH:mm:ss")
            </small>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" @bind="autoRefresh" @bind:event="onchange" />
                <label class="form-check-label">Auto-refresh</label>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (connectionConfigurations == null || !connectionConfigurations.Any())
        {
            <div class="text-center p-4">
                <i class="bi bi-broadcast text-muted" style="font-size: 2rem;"></i>
                <p class="text-muted mt-2 mb-0">No active connections</p>
                <small class="text-muted">Configure connections in Settings to see real-time status</small>
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var config in connectionConfigurations.OrderBy(c => c.Name))
                {
                    var status = connectionStatuses?.GetValueOrDefault(config.Id) ?? ConnectionStatus.Unknown;
                    
                    <div class="col-lg-6 col-xl-4 mb-3">
                        <div class="card border @GetStatusCardBorderClass(status)">
                            <div class="card-body p-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <h6 class="card-title mb-1">@config.Name</h6>
                                        <span class="badge @GetStatusBadgeClass(status)">
                                            @GetStatusText(status)
                                        </span>
                                    </div>
                                    <div class="text-end">
                                        <small class="text-muted">@config.ConnectionType</small>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(config.Description))
                                {
                                    <p class="text-muted small mb-2">@config.Description</p>
                                }

                                <!-- Connection Actions -->
                                <div class="d-flex justify-content-end gap-1 mt-2">
                                    @if (status == ConnectionStatus.Disconnected || status == ConnectionStatus.Error || status == ConnectionStatus.Disabled)
                                    {
                                        <button class="btn btn-outline-success btn-sm" 
                                                @onclick="@(() => StartConnection(config.Id))"
                                                title="Start connection">
                                            <i class="bi bi-play"></i>
                                        </button>
                                    }
                                    
                                    @if (status == ConnectionStatus.Connected || status == ConnectionStatus.Connecting)
                                    {
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="@(() => StopConnection(config.Id))"
                                                title="Stop connection">
                                            <i class="bi bi-stop"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (ShowSummary && connectionConfigurations != null && connectionConfigurations.Any())
    {
        <div class="card-footer">
            <div class="row text-center">
                <div class="col">
                    <div class="text-success fw-bold">@connectedCount</div>
                    <small class="text-muted">Connected</small>
                </div>
                <div class="col">
                    <div class="text-warning fw-bold">@connectingCount</div>
                    <small class="text-muted">Connecting</small>
                </div>
                <div class="col">
                    <div class="text-danger fw-bold">@errorCount</div>
                    <small class="text-muted">Errors</small>
                </div>
                <div class="col">
                    <div class="text-info fw-bold">@connectionConfigurations.Count</div>
                    <small class="text-muted">Total</small>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowSummary { get; set; } = true;
    [Parameter] public int RefreshInterval { get; set; } = 2000; // milliseconds
    
    private Dictionary<string, ConnectionStatus>? connectionStatuses;
    private List<ConnectionConfiguration>? connectionConfigurations;
    private Timer? refreshTimer;
    private DateTime lastUpdateTime = DateTime.Now;
    private bool autoRefresh = true;
    
    // Summary statistics
    private int connectedCount;
    private int connectingCount;
    private int errorCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetupAutoRefresh();
    }

    private void SetupAutoRefresh()
    {
        if (autoRefresh)
        {
            refreshTimer = new Timer(async _ => await InvokeAsync(RefreshData), 
                                   null, TimeSpan.Zero, TimeSpan.FromMilliseconds(RefreshInterval));
        }
    }

    private async Task LoadData()
    {
        connectionConfigurations = ConnectionManager.GetAllConnectionConfigurations().ToList();
        connectionStatuses = new Dictionary<string, ConnectionStatus>();
        foreach (var config in connectionConfigurations)
        {
            connectionStatuses[config.Id] = ConnectionManager.GetConnectionStatus(config.Id);
        }
        UpdateSummaryStatistics();
        lastUpdateTime = DateTime.Now;
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        if (autoRefresh && connectionConfigurations != null && connectionStatuses != null)
        {
            foreach (var config in connectionConfigurations)
            {
                connectionStatuses[config.Id] = ConnectionManager.GetConnectionStatus(config.Id);
            }
            UpdateSummaryStatistics();
            lastUpdateTime = DateTime.Now;
            StateHasChanged();
        }
    }

    private void UpdateSummaryStatistics()
    {
        if (connectionStatuses != null)
        {
            connectedCount = connectionStatuses.Count(s => s.Value == ConnectionStatus.Connected);
            connectingCount = connectionStatuses.Count(s => s.Value == ConnectionStatus.Connecting);
            errorCount = connectionStatuses.Count(s => s.Value == ConnectionStatus.Error);
        }
        else
        {
            connectedCount = connectingCount = errorCount = 0;
        }
    }

    private string GetStatusBadgeClass(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Connected => "bg-success",
            ConnectionStatus.Connecting => "bg-warning",
            ConnectionStatus.Disconnected => "bg-secondary",
            ConnectionStatus.Error => "bg-danger",
            ConnectionStatus.Stopping => "bg-warning",
            ConnectionStatus.Disabled => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusCardBorderClass(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Connected => "border-success",
            ConnectionStatus.Connecting => "border-warning",
            ConnectionStatus.Error => "border-danger",
            ConnectionStatus.Disconnected => "border-secondary",
            ConnectionStatus.Stopping => "border-warning",
            ConnectionStatus.Disabled => "border-secondary",
            _ => "border-secondary"
        };
    }

    private string GetStatusText(ConnectionStatus status)
    {
        return status switch
        {
            ConnectionStatus.Connected => "Connected",
            ConnectionStatus.Connecting => "Connecting",
            ConnectionStatus.Disconnected => "Disconnected",
            ConnectionStatus.Error => "Error",
            ConnectionStatus.Stopping => "Stopping",
            ConnectionStatus.Disabled => "Disabled",
            _ => "Unknown"
        };
    }

    private async Task StartConnection(string connectionId)
    {
        try
        {
            var success = await ConnectionManager.StartConnectionAsync(connectionId);
            if (success && connectionStatuses != null)
            {
                connectionStatuses[connectionId] = ConnectionManager.GetConnectionStatus(connectionId);
                UpdateSummaryStatistics();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error starting connection {connectionId}: {ex.Message}");
        }
    }

    private async Task StopConnection(string connectionId)
    {
        try
        {
            var success = await ConnectionManager.StopConnectionAsync(connectionId);
            if (success && connectionStatuses != null)
            {
                connectionStatuses[connectionId] = ConnectionManager.GetConnectionStatus(connectionId);
                UpdateSummaryStatistics();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/logging
            Console.WriteLine($"Error stopping connection {connectionId}: {ex.Message}");
        }
    }

    private async Task OnAutoRefreshChanged(ChangeEventArgs e)
    {
        autoRefresh = (bool)(e.Value ?? false);
        
        refreshTimer?.Dispose();
        refreshTimer = null;
        
        if (autoRefresh)
        {
            SetupAutoRefresh();
        }
        
        StateHasChanged();
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Hierarchy
@using UNSInfra.Models.Namespace
@using UNSInfra.Services
@inject ITopicBrowserService TopicBrowserService
@inject INamespaceStructureService NamespaceStructureService
@inject ITopicConfigurationNotificationService NotificationService
@inject ILogger<TopicMetadataEditor> Logger

@if (TopicConfiguration != null)
{
    <div class="metadata-editor">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">Topic Metadata</h6>
            <div class="d-flex gap-2">
                <button class="btn btn-primary btn-sm" @onclick="SaveChanges" disabled="@(_isSaving || !_hasChanges)">
                    @if (_isSaving && _saveAction == "save")
                    {
                        <div class="spinner-border spinner-border-sm me-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        @("Saving...")
                    }
                    else
                    {
                        <i class="bi bi-floppy"></i> @("Save")
                    }
                </button>
            </div>
        </div>

        <div class="metadata-form">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label small">Topic</label>
                    <input type="text" class="form-control form-control-sm" value="@TopicConfiguration.Topic" readonly />
                </div>
                <div class="col-md-4">
                    <label class="form-label small">Source Type</label>
                    <input type="text" class="form-control form-control-sm" value="@_editConfiguration.SourceType" readonly />
                </div>
                <div class="col-md-4">
                    <label class="form-label small">Active</label>
                    <div class="form-check mt-2">
                        <input class="form-check-input" type="checkbox" @bind="_editConfiguration.IsActive" @bind:after="OnFieldChanged" />
                        <label class="form-check-label small">
                            Active
                        </label>
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label class="form-label small">UNS Display Name</label>
                    <input type="text" class="form-control form-control-sm" @bind="_editConfiguration.UNSName" @oninput="OnFieldChanged" 
                           placeholder="Enter a friendly name for use in UNS..." />
                    <div class="form-text">
                        Display name shown in the UNS namespace structure
                    </div>
                </div>
                <div class="col-md-6">
                    <label class="form-label small">Description</label>
                    <textarea class="form-control form-control-sm" rows="2" @bind="_editConfiguration.Description" @oninput="OnFieldChanged" placeholder="Optional description..."></textarea>
                </div>
            </div>

            <div class="mb-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label class="form-label small mb-0">UNS Namespace Assignments</label>
                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ShowAddNamespaceModal" disabled="@_isSaving">
                        <i class="bi bi-plus"></i> Add Assignment
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(_editConfiguration.NSPath))
                {
                    <div class="border border-1 rounded p-2 mb-2">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-folder2 text-primary me-2"></i>
                                <span class="fw-medium">@_editConfiguration.NSPath</span>
                            </div>
                            <div class="d-flex gap-1">
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => EditNamespaceAssignment(_editConfiguration.NSPath)" title="Edit assignment">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => RemoveNamespaceAssignment(_editConfiguration.NSPath)" title="Remove assignment">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-3 border border-dashed rounded text-muted">
                        <i class="bi bi-folder2-open" style="font-size: 1.5rem;"></i>
                        <p class="mt-2 mb-0">No UNS assignments</p>
                        <small>Click "Add Assignment" to assign this topic to a UNS namespace</small>
                    </div>
                }
            </div>


            <div class="mb-3">
                <label class="form-label small">Custom Metadata</label>
                <div class="metadata-items">
                    @foreach (var item in _metadataItems)
                    {
                        <div class="d-flex gap-2 mb-2">
                            <input type="text" class="form-control form-control-sm" placeholder="Key" @bind="item.Key" @oninput="OnMetadataChanged" />
                            <input type="text" class="form-control form-control-sm" placeholder="Value" @bind="item.Value" @oninput="OnMetadataChanged" />
                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => RemoveMetadataItem(item)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    }
                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddMetadataItem">
                        <i class="bi bi-plus"></i> Add Metadata
                    </button>
                </div>
            </div>

            <div class="row text-muted">
                <div class="col-md-6">
                    <small>Created: @TopicConfiguration.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                </div>
                <div class="col-md-6">
                    <small>Modified: @TopicConfiguration.ModifiedAt.ToString("yyyy-MM-dd HH:mm")</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Namespace Assignment Modal -->
    @if (_showNamespaceModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            @(_isEditingNamespace ? "Edit" : "Add") UNS Namespace Assignment
                        </h5>
                        <button type="button" class="btn-close" @onclick="CloseNamespaceModal"></button>
                    </div>
                    <div class="modal-body">
                        @if (availableNSNodes?.Any() == true)
                        {
                            <div class="ns-tree-selector" style="max-height: 400px; overflow-y: auto; border: 1px solid #dee2e6; border-radius: 0.375rem; padding: 0.5rem;">
                                @foreach (var rootNode in availableNSNodes)
                                {
                                    <div class="ns-node-selector">
                                        <NSNodeSelector Node="rootNode" 
                                                       SelectedPath="@_tempNamespacePath" 
                                                       OnNodeSelected="OnTempNamespaceSelected" />
                                    </div>
                                }
                            </div>
                            
                            @if (!string.IsNullOrEmpty(_tempNamespacePath))
                            {
                                <div class="mt-3 p-2 bg-light rounded">
                                    <small class="text-success">
                                        <i class="bi bi-check-circle me-1"></i>
                                        Selected: <strong>@_tempNamespacePath</strong>
                                    </small>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="bi bi-folder2-open text-muted" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2 mb-0">No UNS namespace structure available</p>
                                <small class="text-muted">Create namespaces in the UNS tab first</small>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseNamespaceModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveNamespaceAssignment" 
                                disabled="@string.IsNullOrEmpty(_tempNamespacePath)">
                            @(_isEditingNamespace ? "Update" : "Add") Assignment
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public TopicInfo? SelectedTopic { get; set; }
    [Parameter] public EventCallback OnTopicUpdated { get; set; }

    private TopicConfiguration? TopicConfiguration { get; set; }
    private TopicConfiguration _editConfiguration = new();
    private List<MetadataItem> _metadataItems = new();
    private bool _hasChanges = false;
    private bool _isSaving = false;
    private string _saveAction = "";
    private List<NSTreeNode>? availableNSNodes;
    private string? _lastLoadedTopic;
    private bool _showNamespaceModal = false;
    private bool _isEditingNamespace = false;
    private string _tempNamespacePath = string.Empty;
    private string _editingNamespacePath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadNSTreeStructure();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTopic != null)
        {
            // Only reload if the topic has actually changed
            if (_lastLoadedTopic != SelectedTopic.Topic)
            {
                await LoadTopicConfiguration();
                _lastLoadedTopic = SelectedTopic.Topic;
            }
        }
        else
        {
            TopicConfiguration = null;
            _editConfiguration = new();
            _metadataItems.Clear();
            _hasChanges = false;
            _lastLoadedTopic = null;
        }
    }

    private async Task LoadTopicConfiguration()
    {
        try
        {
            TopicConfiguration = await TopicBrowserService.GetTopicConfigurationAsync(SelectedTopic!.Topic);
            
            // If no existing configuration found, create a new one for discovered topics
            if (TopicConfiguration == null && SelectedTopic != null)
            {
                TopicConfiguration = CreateConfigurationFromTopicInfo(SelectedTopic);
            }
            
            if (TopicConfiguration != null)
            {
                _editConfiguration = CloneConfiguration(TopicConfiguration);
                LoadMetadataItems();
                _hasChanges = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading topic configuration");
        }
    }

    private TopicConfiguration CreateConfigurationFromTopicInfo(TopicInfo topicInfo)
    {
        var now = DateTime.UtcNow;
        return new TopicConfiguration
        {
            Id = Guid.NewGuid().ToString(),
            Topic = topicInfo.Topic,
            Path = new HierarchicalPath(), // Empty path for discovered topics
            IsActive = true,
            SourceType = topicInfo.SourceType ?? "Discovered",
            Description = "",
            CreatedAt = now,
            ModifiedAt = now,
            CreatedBy = "System",
            Metadata = new Dictionary<string, object>
            {
                ["AutoDiscovered"] = true,
                ["DiscoveredAt"] = now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            },
            NSPath = string.Empty,
            UNSName = string.Empty
        };
    }

    private TopicConfiguration CloneConfiguration(TopicConfiguration config)
    {
        return new TopicConfiguration
        {
            Id = config.Id,
            Topic = config.Topic,
            Path = new HierarchicalPath
            {
                Values = new Dictionary<string, string>(config.Path.Values)
            },
            IsActive = config.IsActive,
            SourceType = config.SourceType,
            Description = config.Description,
            CreatedAt = config.CreatedAt,
            ModifiedAt = config.ModifiedAt,
            CreatedBy = config.CreatedBy,
            Metadata = new Dictionary<string, object>(config.Metadata),
            NSPath = config.NSPath,
            UNSName = config.UNSName
        };
    }
    

    private void LoadMetadataItems()
    {
        _metadataItems.Clear();
        foreach (var kvp in _editConfiguration.Metadata)
        {
            if (kvp.Key != "AutoDiscovered" && kvp.Key != "DiscoveredAt") // Skip system metadata
            {
                _metadataItems.Add(new MetadataItem { Key = kvp.Key, Value = kvp.Value?.ToString() ?? "" });
            }
        }
    }

    private void OnFieldChanged()
    {
        _hasChanges = true;
        StateHasChanged();
    }

    private void OnMetadataChanged()
    {
        _hasChanges = true;
        StateHasChanged();
    }

    private void AddMetadataItem()
    {
        _metadataItems.Add(new MetadataItem { Key = "", Value = "" });
        _hasChanges = true;
        StateHasChanged();
    }

    private void RemoveMetadataItem(MetadataItem item)
    {
        _metadataItems.Remove(item);
        _hasChanges = true;
        StateHasChanged();
    }

    private void ShowAddNamespaceModal()
    {
        _isEditingNamespace = false;
        _tempNamespacePath = string.Empty;
        _editingNamespacePath = string.Empty;
        _showNamespaceModal = true;
        StateHasChanged();
    }

    private void EditNamespaceAssignment(string namespacePath)
    {
        _isEditingNamespace = true;
        _tempNamespacePath = namespacePath;
        _editingNamespacePath = namespacePath;
        _showNamespaceModal = true;
        StateHasChanged();
    }

    private void RemoveNamespaceAssignment(string namespacePath)
    {
        _editConfiguration.NSPath = string.Empty;
        OnFieldChanged();
        StateHasChanged();
    }

    private void CloseNamespaceModal()
    {
        _showNamespaceModal = false;
        _tempNamespacePath = string.Empty;
        _editingNamespacePath = string.Empty;
        _isEditingNamespace = false;
        StateHasChanged();
    }

    private void OnTempNamespaceSelected(string namespacePath)
    {
        _tempNamespacePath = namespacePath;
        StateHasChanged();
    }

    private void SaveNamespaceAssignment()
    {
        if (!string.IsNullOrEmpty(_tempNamespacePath))
        {
            _editConfiguration.NSPath = _tempNamespacePath;
            OnFieldChanged();
            CloseNamespaceModal();
        }
    }

    private async Task SaveChanges()
    {
        if (_isSaving || !_hasChanges) return;

        // Show loading state immediately
        _isSaving = true;
        _saveAction = "save";
        StateHasChanged();
        
        // Force multiple render cycles to ensure immediate visual feedback
        await Task.Delay(1); // Minimal delay to ensure UI updates
        await InvokeAsync(StateHasChanged); // Second state change

        try
        {
            // Check if UNS name or namespace path changed for notification
            var originalUNSName = TopicConfiguration?.UNSName ?? string.Empty;
            var originalNSPath = TopicConfiguration?.NSPath ?? string.Empty;
            var unsNameChanged = !string.Equals(originalUNSName, _editConfiguration.UNSName, StringComparison.Ordinal);
            var nsPathChanged = !string.Equals(originalNSPath, _editConfiguration.NSPath, StringComparison.Ordinal);

            // Update metadata from items
            var systemMetadata = _editConfiguration.Metadata
                .Where(kvp => kvp.Key == "AutoDiscovered" || kvp.Key == "DiscoveredAt")
                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);

            _editConfiguration.Metadata = new Dictionary<string, object>(systemMetadata);
            foreach (var item in _metadataItems.Where(i => !string.IsNullOrWhiteSpace(i.Key)))
            {
                _editConfiguration.Metadata[item.Key] = item.Value;
            }

            await TopicBrowserService.UpdateTopicConfigurationAsync(_editConfiguration);
            TopicConfiguration = CloneConfiguration(_editConfiguration);
            _hasChanges = false;
            
            // Notify other components of the change
            if (unsNameChanged)
            {
                await NotificationService.NotifyTopicConfigurationChangedAsync(_editConfiguration.Topic, TopicConfigurationChangeType.UNSNameChanged);
            }
            else if (nsPathChanged)
            {
                await NotificationService.NotifyTopicConfigurationChangedAsync(_editConfiguration.Topic, TopicConfigurationChangeType.NamespaceAssignmentChanged);
            }
            else
            {
                await NotificationService.NotifyTopicConfigurationChangedAsync(_editConfiguration.Topic, TopicConfigurationChangeType.Updated);
            }
            
            await OnTopicUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving topic configuration");
        }
        finally
        {
            _isSaving = false;
            _saveAction = "";
            StateHasChanged();
        }
    }


    private async Task LoadNSTreeStructure()
    {
        try
        {
            var nsNodes = await NamespaceStructureService.GetNamespaceStructureAsync();
            availableNSNodes = nsNodes.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading NS tree structure");
            availableNSNodes = new List<NSTreeNode>();
        }
    }


    private class MetadataItem
    {
        public string Key { get; set; } = "";
        public string Value { get; set; } = "";
    }
}

<style>
.metadata-editor {
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    padding: 1rem;
}

.metadata-form .form-label {
    margin-bottom: 0.25rem;
    font-weight: 500;
}

.metadata-items {
    max-height: 200px;
    overflow-y: auto;
}

.form-control-sm {
    font-size: 0.8rem;
}

.btn-sm {
    font-size: 0.8rem;
    transition: all 0.15s ease-in-out;
}

.btn-sm:active {
    transform: scale(0.98);
}

.btn-sm:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.btn-sm .spinner-border-sm {
    width: 0.875rem;
    height: 0.875rem;
    animation: spinner-border 0.75s linear infinite;
}
</style>
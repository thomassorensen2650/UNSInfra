@* @page "/namespaces" *@
@using UNSInfra.Models.Namespace
@using UNSInfra.Models.Hierarchy
@using UNSInfra.Repositories
@using UNSInfra.Services
@using UNSInfra.Services.TopicBrowser
@inject INamespaceConfigurationRepository NamespaceRepository
@inject IHierarchyConfigurationRepository HierarchyRepository
@inject INamespaceStructureService NamespaceStructureService
@inject ITopicBrowserService TopicBrowserService
@inject ITopicConfigurationRepository TopicConfigurationRepository
@inject ITopicConfigurationNotificationService NotificationService
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Namespace Management</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-folder-fill"></i> UNS Structure
            </h1>
            <p class="text-muted mb-4">
                Hierarchical view of your UNS structure with namespaces and topics.
            </p>
        </div>
    </div>

    <div class="row">
        <!-- UNS Tree Structure -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">UNS Tree Structure</h5>
                </div>
                <div class="card-body">
                    <NSTreeEditor @ref="treeEditor" OnAddDataToNamespace="HandleAddDataToNamespace" OnTopicSelected="HandleTopicSelected" />
                </div>
            </div>
        </div>

        <!-- Tree Information -->
        <div class="col-md-4">
            <!-- Selected Topic Info -->
            @if (!string.IsNullOrEmpty(selectedTopicInfo))
            {
                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-file-earmark-check"></i> Selected Topic
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="mb-0">@selectedTopicInfo</p>
                    </div>
                </div>
            }

            <!-- Namespace Types Info -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-info-circle"></i> UNS Tree Guide
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-folder text-primary me-2"></i>
                            <strong>Hierarchy Nodes</strong>
                        </div>
                        <small class="text-muted">
                            ISA-S95 levels like Enterprise, Site, Area - right-click to add children.
                        </small>
                    </div>
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-collection text-secondary me-2"></i>
                            <strong>Namespaces</strong>
                        </div>
                        <small class="text-muted">
                            Functional, Informative, Definitional, Ad-Hoc containers for organizing topics.
                        </small>
                    </div>
                    <div class="mb-3">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-file-earmark-check text-success me-2"></i>
                            <strong>Topics</strong>
                        </div>
                        <small class="text-muted">
                            MQTT/data topics assigned to namespaces - click to view details.
                        </small>
                    </div>
                    <hr />
                    <div class="mb-2">
                        <small class="text-muted">
                            • Right-click nodes to add children<br />
                            • Use + buttons for quick actions<br />
                            • Expand/collapse with chevrons
                        </small>
                    </div>
                </div>
            </div>

            <!-- Quick Stats -->
            @if (namespaces != null)
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="bi bi-bar-chart"></i> Summary
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6">
                                <h4 class="text-primary">@namespaces.Count(n => n.IsActive)</h4>
                                <small class="text-muted">Active</small>
                            </div>
                            <div class="col-6">
                                <h4 class="text-info">@namespaces.Count(n => !string.IsNullOrEmpty(n.ParentNamespaceId))</h4>
                                <small class="text-muted">Nested</small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add Data to Namespace Modal -->
@if (showAddDataModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5); z-index: 1050;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle"></i> Add Topics to Namespace
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideAddDataModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <h6>Target Namespace:</h6>
                        <div class="alert alert-info">
                            <i class="bi bi-folder"></i> @selectedNamespacePath
                        </div>
                    </div>

                    @if (availableTopicsForNamespace.Any())
                    {
                        <div class="mb-3">
                            <h6>Available Topics (@availableTopicsForNamespace.Count unassigned topics)</h6>
                            <p class="text-muted">Select topics to assign to this namespace:</p>
                        </div>

                        <div class="topic-selection-list" style="max-height: 400px; overflow-y: auto;">
                            @foreach (var topic in availableTopicsForNamespace.Take(50))
                            {
                                var isSelected = selectedTopicsForNamespace.Contains(topic);
                                <div class="form-check topic-item p-2 @(isSelected ? "bg-light" : "")" 
                                     style="border: 1px solid #dee2e6; margin-bottom: 5px; border-radius: 4px;">
                                    <input class="form-check-input" type="checkbox" 
                                           checked="@isSelected" 
                                           @onchange="@(() => ToggleTopicSelection(topic))" />
                                    <label class="form-check-label ms-2">
                                        <strong>@topic.Topic</strong>
                                        <br />
                                        <small class="text-muted">
                                            Source: @topic.SourceType
                                            @if (!string.IsNullOrEmpty(topic.Description))
                                            {
                                                <span> | @topic.Description</span>
                                            }
                                        </small>
                                    </label>
                                </div>
                            }
                            
                            @if (availableTopicsForNamespace.Count > 50)
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-info-circle"></i> 
                                    Showing first 50 of @availableTopicsForNamespace.Count available topics. 
                                    Use search in Data Model view for more specific selection.
                                </div>
                            }
                        </div>

                        @if (selectedTopicsForNamespace.Count > 0)
                        {
                            <div class="mt-3 alert alert-success">
                                <i class="bi bi-check-circle"></i> 
                                @selectedTopicsForNamespace.Count topic(s) selected for assignment.
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i> 
                            No unassigned topics available. All topics are already assigned to namespaces.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddDataModal">
                        Cancel
                    </button>
                    @if (selectedTopicsForNamespace.Count > 0)
                    {
                        <button type="button" class="btn btn-primary" @onclick="AssignSelectedTopics">
                            <i class="bi bi-check-circle"></i> 
                            Assign @selectedTopicsForNamespace.Count Topic(s)
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<NamespaceConfiguration>? namespaces;
    private bool _disposed = false;
    private string? selectedTopicInfo;
    private NSTreeEditor? treeEditor;
    
    // Topic assignment modal state
    private bool showAddDataModal = false;
    private string selectedNamespacePath = "";
    private List<TopicInfo> availableTopicsForNamespace = new();
    private List<TopicInfo> selectedTopicsForNamespace = new();
    private List<TopicInfo> allTopics = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to topic configuration changes
        NotificationService.TopicConfigurationChanged += OnTopicConfigurationChanged;
        
        await LoadNamespaces();
        await LoadTopics();
    }

    private async Task LoadNamespaces()
    {
        if (_disposed) return;
        
        var result = await NamespaceRepository.GetAllNamespaceConfigurationsAsync(activeOnly: false);
        if (_disposed) return;
        
        namespaces = result.ToList();
        if (!_disposed)
        {
            StateHasChanged();
        }
    }

    private async Task LoadTopics()
    {
        if (_disposed) return;
        
        try
        {
            var topics = await TopicBrowserService.GetLatestTopicStructureAsync();
            allTopics = topics.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading topics: {ex.Message}");
            allTopics = new List<TopicInfo>();
        }
    }

    private async Task HandleAddDataToNamespace(string namespacePath)
    {
        if (_disposed) return;
        
        selectedNamespacePath = namespacePath;
        
        // Get topics that are not yet assigned to namespaces for selection
        availableTopicsForNamespace = allTopics.Where(t => string.IsNullOrEmpty(t.NSPath)).ToList();
        selectedTopicsForNamespace.Clear();
        
        showAddDataModal = true;
        StateHasChanged();
    }

    private void HideAddDataModal()
    {
        showAddDataModal = false;
        selectedNamespacePath = "";
        availableTopicsForNamespace.Clear();
        selectedTopicsForNamespace.Clear();
        StateHasChanged();
    }

    private void ToggleTopicSelection(TopicInfo topic)
    {
        if (selectedTopicsForNamespace.Contains(topic))
        {
            selectedTopicsForNamespace.Remove(topic);
        }
        else
        {
            selectedTopicsForNamespace.Add(topic);
        }
        StateHasChanged();
    }

    private async Task AssignSelectedTopics()
    {
        if (_disposed || selectedTopicsForNamespace.Count == 0) return;

        try
        {
            // Create or update TopicConfiguration objects for each selected topic
            foreach (var topic in selectedTopicsForNamespace)
            {
                // Check if topic configuration already exists
                var existingConfig = await TopicConfigurationRepository.GetTopicConfigurationAsync(topic.Topic);
                
                TopicConfiguration config;
                if (existingConfig != null)
                {
                    // Update existing configuration
                    config = existingConfig;
                    config.NSPath = selectedNamespacePath;
                    config.ModifiedAt = DateTime.UtcNow;
                }
                else
                {
                    // Create new configuration
                    config = new TopicConfiguration
                    {
                        Id = Guid.NewGuid().ToString(),
                        Topic = topic.Topic,
                        NSPath = selectedNamespacePath,
                        UNSName = GetTopicDisplayName(topic.Topic), // Extract display name
                        SourceType = topic.SourceType,
                        Description = topic.Description,
                        IsActive = true,
                        CreatedAt = DateTime.UtcNow,
                        ModifiedAt = DateTime.UtcNow,
                        CreatedBy = "User",
                        Metadata = new Dictionary<string, object>
                        {
                            { "assigned_via", "namespace_editor" },
                            { "namespace_path", selectedNamespacePath }
                        }
                    };
                }
                
                // Save the configuration via TopicBrowserService to trigger events
                await TopicBrowserService.UpdateTopicConfigurationAsync(config);
                
                // Update the in-memory topic as well
                topic.NSPath = selectedNamespacePath;
            }

            // Refresh the topics and tree to show the newly assigned topics
            await LoadTopics();
            if (treeEditor != null)
            {
                await treeEditor.RefreshTree();
            }
            StateHasChanged();
            HideAddDataModal();
            
            await JSRuntime.InvokeVoidAsync("alert", $"Successfully assigned {selectedTopicsForNamespace.Count} topics to {selectedNamespacePath}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error assigning topics: {ex.Message}");
        }
    }

    private string GetTopicDisplayName(string fullTopicName)
    {
        // Extract the last part after the final '/' for display
        var lastSlashIndex = fullTopicName.LastIndexOf('/');
        return lastSlashIndex >= 0 && lastSlashIndex < fullTopicName.Length - 1 
            ? fullTopicName.Substring(lastSlashIndex + 1) 
            : fullTopicName;
    }

    private Task HandleTopicSelected(TopicInfo topic)
    {
        if (!_disposed)
        {
            selectedTopicInfo = $"Selected topic: {topic.Topic} (Source: {topic.SourceType})";
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private async void OnTopicConfigurationChanged(object? sender, TopicConfigurationChangedEventArgs e)
    {
        if (_disposed) return;
        
        try
        {
            Console.WriteLine($"Topic configuration changed: {e.TopicName} - {e.ChangeType}");
            
            // Refresh topics and tree when configurations change
            await LoadTopics();
            if (treeEditor != null)
            {
                await treeEditor.RefreshTree();
            }
            
            // Update UI
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling topic configuration change: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Unsubscribe from events before disposing
        NotificationService.TopicConfigurationChanged -= OnTopicConfigurationChanged;
        _disposed = true;
    }
}
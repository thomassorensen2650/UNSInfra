@page "/settings"
@using UNSInfra.UI.Components
@using UNSInfra.Models.Schema
@using UNSInfra.Repositories
@using UNSInfra.Validation
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Data
@using UNSInfra.UI.Services
@using UNSInfra.Core.Configuration
@using UNSInfra.Core.Services
@using UNSInfra.Core.Repositories
@using UNSInfra.Services
@using UNSInfra.Models.Hierarchy
@using UNSInfra.Models.Namespace
@using System.Text.Json
@inject ISchemaRepository SchemaRepository
@inject ISchemaValidator SchemaValidator
@inject ITopicBrowserService TopicBrowserService
@inject IDataIngestionServiceManager ServiceManager
@inject IDataIngestionConfigurationRepository ConfigurationRepository
@inject ITopicConfigurationRepository TopicConfigurationRepository
@inject IHierarchyConfigurationRepository HierarchyConfigurationRepository
@inject INamespaceConfigurationRepository NamespaceConfigurationRepository
@inject INamespaceStructureService NamespaceStructureService
@inject IJSRuntime JSRuntime
@inject ILogger<Settings> Logger
@implements IDisposable

<PageTitle>Settings</PageTitle>

<div class="settings-page">
    <div class="settings-header">
        <h3>
            <i class="bi bi-gear me-2"></i>
            Settings
        </h3>
        <p class="text-muted">Configure your UNS Infrastructure system</p>
    </div>

    <div class="settings-tabs">
        <ul class="nav nav-tabs" id="settingsTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "storage" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("storage"))">
                    <i class="bi bi-database me-2"></i>
                    Storage
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "hierarchy" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("hierarchy"))">
                    <i class="bi bi-diagram-3 me-2"></i>
                    Hierarchy
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "connections" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("connections"))">
                    <i class="bi bi-link-45deg me-2"></i>
                    Connections
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "schemas" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("schemas"))">
                    <i class="bi bi-shield-check me-2"></i>
                    Schemas
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "automapping" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("automapping"))">
                    <i class="bi bi-diagram-2 me-2"></i>
                    Auto Mapping
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "import-export" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("import-export"))">
                    <i class="bi bi-arrow-down-up me-2"></i>
                    Import/Export
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "system" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("system"))">
                    <i class="bi bi-cpu me-2"></i>
                    System
                </button>
            </li>
        </ul>

        <div class="tab-content settings-content">
            <!-- Storage Configuration Tab -->
            <div class="tab-pane @(activeTab == "storage" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Storage Configuration</h5>
                        <p class="text-muted">Configure data storage settings for real-time and historical data</p>
                    </div>
                    <HistoricalStorageConfigurationEditor />
                </div>
            </div>

            <!-- Hierarchy Configuration Tab -->
            <div class="tab-pane @(activeTab == "hierarchy" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Hierarchy Configuration</h5>
                        <p class="text-muted">Define and manage ISA-S95 hierarchical structures</p>
                    </div>
                    <HierarchyEditor />
                </div>
            </div>

            <!-- Connections Configuration Tab -->
            <div class="tab-pane @(activeTab == "connections" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Data Connections</h5>
                        <p class="text-muted">Configure MQTT, Socket.IO, and other data source connections</p>
                    </div>
                    
                    <div class="row">
                        <!-- Configuration List -->
                        <div class="col-md-8">
                            <div class="card">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h6 class="mb-0">Active Configurations</h6>
                                    <div class="btn-group">
                                        <button class="btn btn-primary btn-sm" @onclick="ShowAddConfiguration">
                                            <i class="bi bi-plus-circle"></i> Add Configuration
                                        </button>
                                        <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshConfigurations">
                                            <i class="bi bi-arrow-repeat"></i> Refresh
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    @if (configurations == null)
                                    {
                                        <div class="text-center p-4">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="mt-2 text-muted">Loading configurations...</p>
                                        </div>
                                    }
                                    else if (!configurations.Any())
                                    {
                                        <div class="text-center p-4">
                                            <i class="bi bi-inbox text-muted" style="font-size: 3rem;"></i>
                                            <h6 class="text-muted mt-3">No configurations yet</h6>
                                            <p class="text-muted">Add your first data ingestion configuration to get started.</p>
                                            <button class="btn btn-primary" @onclick="ShowAddConfiguration">
                                                <i class="bi bi-plus-circle"></i> Add Configuration
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Type</th>
                                                        <th>Status</th>
                                                        <th>Enabled</th>
                                                        <th>Last Modified</th>
                                                        <th>Actions</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var config in configurations)
                                                    {
                                                        <tr>
                                                            <td>
                                                                <strong>@config.Name</strong>
                                                                @if (!string.IsNullOrEmpty(config.Description))
                                                                {
                                                                    <br />
                                                                    <small class="text-muted">@config.Description</small>
                                                                }
                                                            </td>
                                                            <td>
                                                                <span class="badge bg-info">@config.ServiceType</span>
                                                            </td>
                                                            <td>
                                                                @{
                                                                    var status = GetServiceStatus(config.Id);
                                                                }
                                                                <span class="badge @GetConnectionStatusBadgeClass(status?.Status ?? UNSInfra.Core.Configuration.ConnectionStatus.Disabled)">
                                                                    @GetConnectionStatusText(status?.Status ?? UNSInfra.Core.Configuration.ConnectionStatus.Disabled)
                                                                </span>
                                                                @if (!string.IsNullOrEmpty(status?.Message))
                                                                {
                                                                    <br />
                                                                    <small class="text-muted">@status.Message</small>
                                                                }
                                                            </td>
                                                            <td>
                                                                <div class="form-check form-switch">
                                                                    <input class="form-check-input" type="checkbox" 
                                                                           checked="@config.Enabled" 
                                                                           @onchange="@(async (e) => await ToggleConfiguration(config, (bool)e.Value!))" />
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <small class="text-muted">
                                                                    @config.ModifiedAt.ToString("yyyy-MM-dd HH:mm")
                                                                </small>
                                                            </td>
                                                            <td>
                                                                <div class="btn-group btn-group-sm">
                                                                    <button class="btn btn-outline-primary" 
                                                                            @onclick="@(() => EditConfiguration(config))">
                                                                        <i class="bi bi-pencil"></i>
                                                                    </button>
                                                                    <button class="btn btn-outline-success" 
                                                                            @onclick="@(() => TestConnection(config))"
                                                                            disabled="@(!config.Enabled)">
                                                                        <i class="bi bi-play-circle"></i>
                                                                    </button>
                                                                    <button class="btn btn-outline-danger" 
                                                                            @onclick="@(() => DeleteConfiguration(config))">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Service Status Panel -->
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-activity"></i> Service Status
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @if (serviceStatuses == null || !serviceStatuses.Any())
                                    {
                                        <p class="text-muted text-center">No active services</p>
                                    }
                                    else
                                    {
                                        @foreach (var status in serviceStatuses.Values)
                                        {
                                            var config = configurations?.FirstOrDefault(c => c.Id == status.ConfigurationId);
                                            <div class="d-flex justify-content-between align-items-center mb-3 p-2 border rounded">
                                                <div>
                                                    <strong>@(config?.Name ?? "Unknown")</strong>
                                                    <br />
                                                    <span class="badge @GetConnectionStatusBadgeClass(status.Status)">
                                                        @GetConnectionStatusText(status.Status)
                                                    </span>
                                                </div>
                                                <div class="text-end">
                                                    <small class="text-muted d-block">
                                                        @status.DataPointsReceived points
                                                    </small>
                                                    <small class="text-muted d-block">
                                                        @status.MessageRate.ToString("F1") msg/s
                                                    </small>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>

                            <!-- Available Service Types -->
                            <div class="card mt-3">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-collection"></i> Available Services
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @if (availableServiceTypes == null)
                                    {
                                        <div class="text-center">
                                            <div class="spinner-border spinner-border-sm text-primary" role="status"></div>
                                        </div>
                                    }
                                    else
                                    {
                                        @foreach (var serviceType in availableServiceTypes)
                                        {
                                            <div class="d-flex justify-content-between align-items-center mb-2 p-2 border rounded">
                                                <div>
                                                    <strong>@serviceType.DisplayName</strong>
                                                    <br />
                                                    <small class="text-muted">@serviceType.Description</small>
                                                </div>
                                                <button class="btn btn-sm btn-outline-primary" 
                                                        @onclick="@(() => CreateConfiguration(serviceType))">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Auto Mapping Configuration Tab -->
            <div class="tab-pane @(activeTab == "automapping" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Auto-Mapping Configuration</h5>
                        <p class="text-muted">Configure automatic topic mapping to UNS namespace paths</p>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div class="text-center py-4">
                                <i class="bi bi-diagram-2 text-success" style="font-size: 3rem;"></i>
                                <h5 class="mt-3">Auto-mapping is now handled automatically</h5>
                                <p class="text-muted">
                                    The system now uses a global SimplifiedAutoMapperService that automatically processes 
                                    all incoming topics against existing UNS namespaces. No per-configuration settings are required.
                                </p>
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Auto-mapping runs automatically for all data sources and matches topics to existing namespace structures.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Schema Validation Tab -->
            <div class="tab-pane @(activeTab == "schemas" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Data Schema Validation</h5>
                        <p class="text-muted">Create and manage JSON schemas for topic data validation</p>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div class="row g-3 flex-grow-1">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Search schemas..." 
                                           @bind="searchTerm" @oninput="OnSearchChanged" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" @bind="selectedTopic" @bind:after="OnTopicFilterChanged">
                                    <option value="">All Topics</option>
                                    @foreach (var topic in availableTopics)
                                    {
                                        <option value="@topic">@topic</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-outline-secondary w-100" @onclick="RefreshSchemas">
                                    <i class="bi bi-arrow-clockwise me-1"></i>
                                    Refresh
                                </button>
                            </div>
                        </div>
                        <div class="ms-3">
                            <button class="btn btn-primary" @onclick="ShowCreateSchemaModal">
                                <i class="bi bi-plus-circle me-1"></i>
                                Create Schema
                            </button>
                        </div>
                    </div>

                    <div class="schema-content-tab">
                        @if (isLoading)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading schemas...
                            </div>
                        }
                        else if (!displayedSchemas.Any())
                        {
                            <div class="empty-schemas-state">
                                <i class="bi bi-shield-exclamation"></i>
                                <div class="text-center">
                                    <h5>No Schemas Found</h5>
                                    <p class="mb-3">
                                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                                        {
                                            <span>No schemas match your search criteria. Try adjusting your filters.</span>
                                        }
                                        else
                                        {
                                            <span>No data schemas have been created yet. Create your first schema to start validating topic data.</span>
                                        }
                                    </p>
                                    <button class="btn btn-primary" @onclick="ShowCreateSchemaModal">
                                        <i class="bi bi-plus-circle me-1"></i>
                                        Create First Schema
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="schema-list">
                                @foreach (var schema in displayedSchemas)
                                {
                                    <div class="schema-card">
                                        <div class="schema-card-header">
                                            <div class="schema-info">
                                                <h6 class="schema-title">@schema.SchemaId</h6>
                                                <div class="schema-topic">
                                                    <i class="bi bi-diagram-3 me-1"></i>
                                                    @schema.Topic
                                                </div>
                                            </div>
                                            <div class="schema-actions">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowValidationTest(schema)">
                                                    <i class="bi bi-check-circle"></i>
                                                    Test
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditSchema(schema)">
                                                    <i class="bi bi-pencil"></i>
                                                    Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSchema(schema)">
                                                    <i class="bi bi-trash"></i>
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                        
                                        <div class="schema-details">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="detail-section">
                                                        <h6>Property Types</h6>
                                                        @if (schema.PropertyTypes.Any())
                                                        {
                                                            <div class="property-types">
                                                                @foreach (var prop in schema.PropertyTypes)
                                                                {
                                                                    <div class="property-type">
                                                                        <code>@prop.Key</code>
                                                                        <span class="type-badge">@prop.Value.Name</span>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="text-muted small">No property types defined</div>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="detail-section">
                                                        <h6>Validation Rules</h6>
                                                        @if (schema.ValidationRules.Any())
                                                        {
                                                            <div class="validation-rules">
                                                                @foreach (var rule in schema.ValidationRules)
                                                                {
                                                                    <div class="validation-rule">
                                                                        <span class="rule-property">@rule.PropertyName</span>
                                                                        <span class="badge bg-secondary rule-type">@rule.RuleType</span>
                                                                        <code class="rule-value">@rule.RuleValue</code>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="text-muted small">No validation rules defined</div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>


            <!-- Import/Export Configuration Tab -->
            <div class="tab-pane @(activeTab == "import-export" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Configuration Import/Export</h5>
                        <p class="text-muted">Backup, restore, and share your UNS configuration</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-download me-2"></i>
                                        Export Configuration
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        Export your complete UNS configuration including hierarchies, namespaces, and topic mappings to a JSON file.
                                    </p>
                                    
                                    @if (exportStatus.IsExporting)
                                    {
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Exporting...</span>
                                            </div>
                                            <span>Exporting configuration...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success" @onclick="ExportConfiguration">
                                            <i class="bi bi-download me-1"></i>
                                            Export Configuration
                                        </button>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(exportStatus.LastExportResult))
                                    {
                                        <div class="alert alert-info mt-3 mb-0">
                                            <small>@exportStatus.LastExportResult</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-upload me-2"></i>
                                        Import Configuration
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        Import a UNS configuration from a previously exported JSON file.
                                    </p>
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Configuration File</label>
                                        <InputFile OnChange="HandleFileSelected" accept=".json" class="form-control" />
                                        @if (!string.IsNullOrEmpty(selectedFileName))
                                        {
                                            <small class="text-muted">Selected: @selectedFileName</small>
                                        }
                                    </div>
                                    
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" @bind="overwriteExisting" id="overwriteCheck">
                                        <label class="form-check-label" for="overwriteCheck">
                                            Overwrite existing configurations
                                        </label>
                                        <small class="form-text text-muted">
                                            If unchecked, existing configurations will be skipped
                                        </small>
                                    </div>
                                    
                                    @if (importStatus.IsImporting)
                                    {
                                        <div class="d-flex align-items-center mb-3">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Importing...</span>
                                            </div>
                                            <span>Importing configuration...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" @onclick="ImportConfiguration" 
                                                disabled="@(string.IsNullOrEmpty(importFileContent))">
                                            <i class="bi bi-upload me-1"></i>
                                            Import Configuration
                                        </button>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(importStatus.LastImportResult))
                                    {
                                        <div class="alert @(importStatus.LastImportSuccess ? "alert-success" : "alert-danger") mt-3 mb-0">
                                            <small>@importStatus.LastImportResult</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-info-circle me-2"></i>
                                        Import/Export Information
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <h6>What gets exported:</h6>
                                    <ul class="list-unstyled small">
                                        <li><i class="bi bi-check text-success me-1"></i> Hierarchy configurations and nodes</li>
                                        <li><i class="bi bi-check text-success me-1"></i> Namespace configurations</li>
                                        <li><i class="bi bi-check text-success me-1"></i> Topic configurations and mappings</li>
                                        <li><i class="bi bi-check text-success me-1"></i> UNS tree structure</li>
                                        <li><i class="bi bi-check text-success me-1"></i> Verification status and metadata</li>
                                    </ul>
                                    
                                    <h6 class="mt-3">Import modes:</h6>
                                    <ul class="list-unstyled small">
                                        <li><i class="bi bi-arrow-right text-primary me-1"></i> <strong>Merge:</strong> Skip existing configurations (safer)</li>
                                        <li><i class="bi bi-arrow-right text-warning me-1"></i> <strong>Overwrite:</strong> Replace existing configurations (use with caution)</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Configuration Tab -->
            <div class="tab-pane @(activeTab == "system" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>System Configuration</h5>
                        <p class="text-muted">General system settings and preferences</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-clock me-2"></i>
                                        Refresh Settings
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Auto-refresh Interval (seconds)</label>
                                        <select class="form-select">
                                            <option value="5">5 seconds</option>
                                            <option value="10" selected>10 seconds</option>
                                            <option value="30">30 seconds</option>
                                            <option value="60">1 minute</option>
                                        </select>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="enableAutoRefresh" checked>
                                        <label class="form-check-label" for="enableAutoRefresh">
                                            Enable auto-refresh
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-palette me-2"></i>
                                        Appearance
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Theme</label>
                                        <select class="form-select">
                                            <option value="auto">Auto (System)</option>
                                            <option value="light" selected>Light</option>
                                            <option value="dark">Dark</option>
                                        </select>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="compactMode">
                                        <label class="form-check-label" for="compactMode">
                                            Compact mode
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-shield-check me-2"></i>
                                    Security & Logging
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Log Level</label>
                                            <select class="form-select">
                                                <option value="trace">Trace</option>
                                                <option value="debug">Debug</option>
                                                <option value="info" selected>Information</option>
                                                <option value="warning">Warning</option>
                                                <option value="error">Error</option>
                                                <option value="critical">Critical</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Log Retention (days)</label>
                                            <input type="number" class="form-control" value="30" min="1" max="365">
                                        </div>
                                    </div>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="enableAuditLog" checked>
                                    <label class="form-check-label" for="enableAuditLog">
                                        Enable audit logging
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary">
                                <i class="bi bi-check me-1"></i>
                                Save Settings
                            </button>
                            <button class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-counterclockwise me-1"></i>
                                Reset to Defaults
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Configuration Form Modal -->
@if (showConfigurationForm)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingConfiguration?.Id != null ? "Edit" : "Add") Configuration
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideConfigurationForm"></button>
                </div>
                <div class="modal-body">
                    <DynamicConfigurationForm Configuration="editingConfiguration" 
                                            ServiceDescriptor="selectedServiceDescriptor"
                                            AvailableDescriptors="availableServiceTypes"
                                            OnSave="SaveConfiguration"
                                            OnCancel="HideConfigurationForm"
                                            OnServiceTypeChanged="OnServiceTypeSelected" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string activeTab = "storage";


    // Data connections properties
    private List<IDataIngestionConfiguration>? configurations;
    private Dictionary<string, ServiceStatus>? serviceStatuses;
    private List<IDataIngestionServiceDescriptor>? availableServiceTypes;
    private IDataIngestionConfiguration? editingConfiguration;
    private IDataIngestionServiceDescriptor? selectedServiceDescriptor;
    private bool showConfigurationForm = false;
    private Timer? statusRefreshTimer;

    // Schema validation properties
    private List<DataSchema> allSchemas = new();
    private List<DataSchema> displayedSchemas = new();
    private List<string> availableTopics = new();
    private string searchTerm = string.Empty;
    private string selectedTopic = string.Empty;
    private bool isLoading = false;

    // Modal states
    private bool showSchemaModal = false;
    private bool showValidationModal = false;
    private bool isValidating = false;
    
    // Editing state
    private DataSchema editingSchema = new();
    private List<PropertyTypeItem> editingPropertyTypes = new();
    private List<ValidationRule> editingValidationRules = new();
    private List<string> editingValidationRuleValues = new();
    
    // Validation testing
    private DataSchema? selectedValidationSchema;
    private string testJsonData = string.Empty;
    private UNSInfra.Validation.ValidationResult? validationResult;
    
    // Import/Export properties
    private (bool IsExporting, string LastExportResult) exportStatus = (false, string.Empty);
    private (bool IsImporting, string LastImportResult, bool LastImportSuccess) importStatus = (false, string.Empty, false);
    private string selectedFileName = string.Empty;
    private string importFileContent = string.Empty;
    private bool overwriteExisting = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshSchemas();
        await LoadConnectionData();
        
        
        // Set up timer to refresh connection status every 2 seconds
        statusRefreshTimer = new Timer(async _ => await InvokeAsync(RefreshConnectionStatus), null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
    }

    // Data connections methods
    private async Task LoadConnectionData()
    {
        configurations = await ConfigurationRepository.GetAllConfigurationsAsync();
        serviceStatuses = ServiceManager.GetServicesStatus();
        availableServiceTypes = ServiceManager.GetAvailableServiceTypes();
        StateHasChanged();
    }

    private async Task RefreshConfigurations()
    {
        configurations = await ConfigurationRepository.GetAllConfigurationsAsync();
        StateHasChanged();
    }

    private async Task RefreshConnectionStatus()
    {
        serviceStatuses = ServiceManager.GetServicesStatus();
        StateHasChanged();
    }

    private ServiceStatus? GetServiceStatus(string configurationId)
    {
        return serviceStatuses?.TryGetValue(configurationId, out var status) == true ? status : null;
    }

    private string GetConnectionStatusBadgeClass(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "bg-success",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "bg-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Disconnected => "bg-secondary",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "bg-danger",
            UNSInfra.Core.Configuration.ConnectionStatus.Stopping => "bg-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Disabled => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetConnectionStatusText(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "Connected",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "Connecting",
            UNSInfra.Core.Configuration.ConnectionStatus.Disconnected => "Disconnected",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "Error",
            UNSInfra.Core.Configuration.ConnectionStatus.Stopping => "Stopping",
            UNSInfra.Core.Configuration.ConnectionStatus.Disabled => "Disabled",
            _ => "Unknown"
        };
    }

    private void ShowAddConfiguration()
    {
        editingConfiguration = null;
        selectedServiceDescriptor = null;
        showConfigurationForm = true;
    }

    private void CreateConfiguration(IDataIngestionServiceDescriptor serviceDescriptor)
    {
        editingConfiguration = serviceDescriptor.CreateDefaultConfiguration();
        selectedServiceDescriptor = serviceDescriptor;
        showConfigurationForm = true;
    }

    private void EditConfiguration(IDataIngestionConfiguration configuration)
    {
        editingConfiguration = configuration.Clone();
        selectedServiceDescriptor = availableServiceTypes?.FirstOrDefault(s => s.ServiceType == configuration.ServiceType);
        showConfigurationForm = true;
    }

    private void HideConfigurationForm()
    {
        showConfigurationForm = false;
        editingConfiguration = null;
        selectedServiceDescriptor = null;
    }

    private void OnServiceTypeSelected(IDataIngestionServiceDescriptor serviceDescriptor)
    {
        selectedServiceDescriptor = serviceDescriptor;
        editingConfiguration = serviceDescriptor.CreateDefaultConfiguration();
        StateHasChanged();
    }

    private async Task SaveConfiguration(IDataIngestionConfiguration configuration)
    {
        try
        {
            await ConfigurationRepository.SaveConfigurationAsync(configuration);
            await LoadConnectionData();
            HideConfigurationForm();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving configuration: {ex.Message}");
        }
    }

    private async Task ToggleConfiguration(IDataIngestionConfiguration configuration, bool enabled)
    {
        configuration.Enabled = enabled;
        configuration.ModifiedAt = DateTime.UtcNow;
        
        try
        {
            await ConfigurationRepository.SaveConfigurationAsync(configuration);
            await LoadConnectionData();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating configuration: {ex.Message}");
        }
    }

    private async Task TestConnection(IDataIngestionConfiguration configuration)
    {
        try
        {
            if (configuration.Enabled)
            {
                await ServiceManager.RestartServiceAsync(configuration.Id);
                await JSRuntime.InvokeVoidAsync("alert", "Connection test initiated. Check the status panel for results.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error testing connection: {ex.Message}");
        }
    }

    private async Task DeleteConfiguration(IDataIngestionConfiguration configuration)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete '{configuration.Name}'?");
        
        if (confirmed)
        {
            try
            {
                await ConfigurationRepository.DeleteConfigurationAsync(configuration.Id);
                await LoadConnectionData();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting configuration: {ex.Message}");
            }
        }
    }

    // Schema validation methods
    private async Task RefreshSchemas()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allSchemas = (await SchemaRepository.GetAllSchemasAsync()).ToList();
            FilterSchemas();

            // Update available topics
            var topics = await TopicBrowserService.GetLatestTopicStructureAsync();
            availableTopics = topics.Select(t => t.Topic).Distinct().OrderBy(t => t).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading schemas");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterSchemas()
    {
        var filtered = allSchemas.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(s => 
                s.SchemaId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Topic.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(selectedTopic))
        {
            filtered = filtered.Where(s => s.Topic == selectedTopic);
        }

        displayedSchemas = filtered.ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterSchemas();
        StateHasChanged();
    }

    private void OnTopicFilterChanged()
    {
        FilterSchemas();
        StateHasChanged();
    }

    private void ShowCreateSchemaModal()
    {
        editingSchema = new DataSchema
        {
            SchemaId = "",
            Topic = "",
            JsonSchema = "",
            PropertyTypes = new Dictionary<string, Type>(),
            ValidationRules = new List<ValidationRule>()
        };

        editingPropertyTypes = new List<PropertyTypeItem>();
        editingValidationRules = new List<ValidationRule>();
        editingValidationRuleValues = new List<string>();

        showSchemaModal = true;
        StateHasChanged();
    }

    private void EditSchema(DataSchema schema)
    {
        editingSchema = new DataSchema
        {
            SchemaId = schema.SchemaId,
            Topic = schema.Topic,
            JsonSchema = schema.JsonSchema,
            PropertyTypes = new Dictionary<string, Type>(schema.PropertyTypes),
            ValidationRules = schema.ValidationRules.Select(r => new ValidationRule
            {
                PropertyName = r.PropertyName,
                RuleType = r.RuleType,
                RuleValue = r.RuleValue
            }).ToList()
        };

        editingPropertyTypes = schema.PropertyTypes.Select(pt => new PropertyTypeItem
        {
            Key = pt.Key,
            Value = pt.Value.Name
        }).ToList();

        editingValidationRules = editingSchema.ValidationRules.ToList();
        editingValidationRuleValues = editingValidationRules.Select(r => r.RuleValue?.ToString() ?? "").ToList();

        showSchemaModal = true;
        StateHasChanged();
    }

    private async Task SaveSchema()
    {
        try
        {
            // Update property types
            editingSchema.PropertyTypes.Clear();
            foreach (var pt in editingPropertyTypes.Where(pt => !string.IsNullOrWhiteSpace(pt.Key)))
            {
                var type = pt.Value switch
                {
                    "String" => typeof(string),
                    "Int32" => typeof(int),
                    "Double" => typeof(double),
                    "Boolean" => typeof(bool),
                    _ => typeof(string)
                };
                editingSchema.PropertyTypes[pt.Key] = type;
            }

            // Update validation rules
            editingSchema.ValidationRules.Clear();
            for (int i = 0; i < editingValidationRules.Count; i++)
            {
                if (!string.IsNullOrWhiteSpace(editingValidationRules[i].PropertyName))
                {
                    var rule = editingValidationRules[i];
                    if (i < editingValidationRuleValues.Count && !string.IsNullOrWhiteSpace(editingValidationRuleValues[i]))
                    {
                        rule.RuleValue = ParseRuleValue(rule.RuleType, editingValidationRuleValues[i]);
                    }
                    editingSchema.ValidationRules.Add(rule);
                }
            }

            await SchemaRepository.SaveSchemaAsync(editingSchema);
            await RefreshSchemas();
            HideSchemaModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving schema");
        }
    }

    private object ParseRuleValue(string ruleType, string value)
    {
        return ruleType switch
        {
            "Range" => value.Split(',').Select(v => double.Parse(v.Trim())).ToArray(),
            "MinLength" or "MaxLength" => int.Parse(value),
            _ => value
        };
    }

    private async Task DeleteSchema(DataSchema schema)
    {
        Logger.LogInformation("Delete functionality not implemented yet for schema: {SchemaId}", schema.SchemaId);
    }

    private void HideSchemaModal()
    {
        showSchemaModal = false;
        StateHasChanged();
    }

    private void AddPropertyType()
    {
        editingPropertyTypes.Add(new PropertyTypeItem { Key = "", Value = "String" });
        StateHasChanged();
    }

    private void RemovePropertyType(int index)
    {
        if (index >= 0 && index < editingPropertyTypes.Count)
        {
            editingPropertyTypes.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void AddValidationRule()
    {
        editingValidationRules.Add(new ValidationRule { PropertyName = "", RuleType = "Required" });
        editingValidationRuleValues.Add("");
        StateHasChanged();
    }

    private void RemoveValidationRule(int index)
    {
        if (index >= 0 && index < editingValidationRules.Count)
        {
            editingValidationRules.RemoveAt(index);
            if (index < editingValidationRuleValues.Count)
            {
                editingValidationRuleValues.RemoveAt(index);
            }
            StateHasChanged();
        }
    }

    private void ShowValidationTest(DataSchema schema)
    {
        selectedValidationSchema = schema;
        testJsonData = "{\n  \"example\": \"value\",\n  \"number\": 42\n}";
        validationResult = null;
        showValidationModal = true;
        StateHasChanged();
    }

    private async Task RunValidationTest()
    {
        if (selectedValidationSchema == null || string.IsNullOrWhiteSpace(testJsonData))
            return;

        isValidating = true;
        validationResult = null;
        StateHasChanged();

        try
        {
            var jsonElement = JsonSerializer.Deserialize<JsonElement>(testJsonData);
            var testDataPoint = new DataPoint
            {
                Topic = selectedValidationSchema.Topic,
                Value = jsonElement,
                Timestamp = DateTime.UtcNow,
                Source = "ValidationTest"
            };

            validationResult = await SchemaValidator.ValidateWithDetailsAsync(testDataPoint, selectedValidationSchema);
        }
        catch (JsonException ex)
        {
            validationResult = new UNSInfra.Validation.ValidationResult
            {
                IsValid = false,
                Errors = new List<string> { $"Invalid JSON: {ex.Message}" }
            };
        }
        catch (Exception ex)
        {
            validationResult = new UNSInfra.Validation.ValidationResult
            {
                IsValid = false,
                Errors = new List<string> { $"Validation error: {ex.Message}" }
            };
            Logger.LogError(ex, "Error during validation test");
        }
        finally
        {
            isValidating = false;
            StateHasChanged();
        }
    }

    private void HideValidationModal()
    {
        showValidationModal = false;
        selectedValidationSchema = null;
        StateHasChanged();
    }

    // Import/Export Methods
    private async Task ExportConfiguration()
    {
        try
        {
            exportStatus = (true, string.Empty);
            StateHasChanged();

            // Get all configuration data
            var topicConfigurations = await TopicConfigurationRepository.GetAllTopicConfigurationsAsync();
            var hierarchyConfigurations = await HierarchyConfigurationRepository.GetAllConfigurationsAsync();
            var namespaceConfigurations = await NamespaceConfigurationRepository.GetAllNamespaceConfigurationsAsync();
            var unsTreeStructure = await NamespaceStructureService.GetNamespaceStructureAsync();

            // Create export data structure
            var exportData = new
            {
                exportInfo = new
                {
                    exportedAt = DateTime.UtcNow,
                    version = "1.0.0",
                    description = "UNS Infrastructure Configuration Export",
                    exportedBy = "UNS Infrastructure UI"
                },
                hierarchyConfigurations = hierarchyConfigurations.Select(h => new
                {
                    id = h.Id,
                    name = h.Name,
                    description = h.Description,
                    isActive = h.IsActive,
                    isSystemDefined = h.IsSystemDefined,
                    nodes = h.Nodes.Select(n => new
                    {
                        id = n.Id,
                        name = n.Name,
                        description = n.Description,
                        order = n.Order,
                        parentNodeId = n.ParentNodeId,
                        allowedChildNodeIds = n.AllowedChildNodeIds
                    }).ToArray(),
                    createdAt = h.CreatedAt,
                    modifiedAt = h.ModifiedAt
                }).ToArray(),
                namespaceConfigurations = namespaceConfigurations.Select(n => new
                {
                    id = n.Id,
                    name = n.Name,
                    description = n.Description,
                    isActive = n.IsActive,
                    createdAt = n.CreatedAt,
                    modifiedAt = n.ModifiedAt
                }).ToArray(),
                topicConfigurations = topicConfigurations.Select(t => new
                {
                    topic = t.Topic,
                    unsName = t.UNSName,
                    hierarchicalPath = t.Path?.ToString(),
                    nsPath = t.NSPath,
                    sourceType = t.SourceType,
                    isVerified = t.IsVerified,
                    createdAt = t.CreatedAt,
                    modifiedAt = t.ModifiedAt
                }).ToArray(),
                summary = new
                {
                    totalHierarchyConfigurations = hierarchyConfigurations.Count(),
                    totalNamespaces = namespaceConfigurations.Count(),
                    totalTopicConfigurations = topicConfigurations.Count(),
                    verifiedTopics = topicConfigurations.Count(t => t.IsVerified),
                    unverifiedTopics = topicConfigurations.Count(t => !t.IsVerified)
                }
            };

            var json = JsonSerializer.Serialize(exportData, new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

            // Create filename with timestamp
            var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            var fileName = $"UNSConfiguration_Export_{timestamp}.json";

            // Download the file
            await JSRuntime.InvokeVoidAsync("downloadFileFromString", fileName, json);

            exportStatus = (false, $"Configuration exported successfully to {fileName}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting configuration");
            exportStatus = (false, $"Export failed: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            selectedFileName = file.Name;
            
            // Validate file type
            if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                importStatus = (false, "Please select a JSON file", false);
                importFileContent = string.Empty;
                StateHasChanged();
                return;
            }

            // Read file content
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            using var reader = new StreamReader(stream);
            importFileContent = await reader.ReadToEndAsync();
            
            // Basic JSON validation
            try
            {
                JsonSerializer.Deserialize<JsonElement>(importFileContent);
                importStatus = (false, "File loaded and validated successfully", true);
            }
            catch (JsonException)
            {
                importStatus = (false, "Invalid JSON file format", false);
                importFileContent = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reading import file");
            importStatus = (false, $"Error reading file: {ex.Message}", false);
            importFileContent = string.Empty;
        }
        
        StateHasChanged();
    }

    private async Task ImportConfiguration()
    {
        try
        {
            if (string.IsNullOrEmpty(importFileContent))
            {
                importStatus = (false, "No file selected", false);
                StateHasChanged();
                return;
            }

            importStatus = (true, "Importing configuration...", false);
            StateHasChanged();

            // Parse the import data
            var importData = JsonSerializer.Deserialize<JsonElement>(importFileContent);
            
            var importStats = new
            {
                hierarchyImported = 0,
                namespaceImported = 0,
                topicsImported = 0,
                hierarchySkipped = 0,
                namespaceSkipped = 0,
                topicsSkipped = 0,
                errors = new List<string>()
            };

            // Import hierarchy configurations
            if (importData.TryGetProperty("hierarchyConfigurations", out var hierarchyElement) && hierarchyElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in hierarchyElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("id", out var idProp) || !item.TryGetProperty("name", out var nameProp))
                            continue;

                        var id = idProp.GetString();
                        var name = nameProp.GetString();
                        
                        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name))
                            continue;

                        var existing = await HierarchyConfigurationRepository.GetConfigurationByIdAsync(id);
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { hierarchySkipped = importStats.hierarchySkipped + 1 };
                            continue;
                        }

                        var config = new HierarchyConfiguration
                        {
                            Id = id,
                            Name = name,
                            Description = item.TryGetProperty("description", out var desc) ? desc.GetString() ?? "" : "",
                            IsActive = item.TryGetProperty("isActive", out var active) ? active.GetBoolean() : true,
                            IsSystemDefined = item.TryGetProperty("isSystemDefined", out var sysDef) ? sysDef.GetBoolean() : false,
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        await HierarchyConfigurationRepository.SaveConfigurationAsync(config);
                        importStats = importStats with { hierarchyImported = importStats.hierarchyImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing hierarchy item: {ex.Message}");
                    }
                }
            }

            // Import namespace configurations  
            if (importData.TryGetProperty("namespaceConfigurations", out var namespaceElement) && namespaceElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in namespaceElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("id", out var idProp) || !item.TryGetProperty("name", out var nameProp))
                            continue;

                        var id = idProp.GetString();
                        var name = nameProp.GetString();
                        
                        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name))
                            continue;

                        var existing = await NamespaceConfigurationRepository.GetNamespaceConfigurationAsync(id);
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { namespaceSkipped = importStats.namespaceSkipped + 1 };
                            continue;
                        }

                        var config = new NamespaceConfiguration
                        {
                            Id = id,
                            Name = name,
                            Description = item.TryGetProperty("description", out var desc) ? desc.GetString() ?? "" : "",
                            IsActive = item.TryGetProperty("isActive", out var active) ? active.GetBoolean() : true,
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        await NamespaceConfigurationRepository.SaveNamespaceConfigurationAsync(config);
                        importStats = importStats with { namespaceImported = importStats.namespaceImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing namespace item: {ex.Message}");
                    }
                }
            }

            // Import topic configurations
            if (importData.TryGetProperty("topicConfigurations", out var topicsElement) && topicsElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in topicsElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("topic", out var topicProp))
                            continue;

                        var topic = topicProp.GetString();
                        if (string.IsNullOrEmpty(topic))
                            continue;

                        var allTopics = await TopicConfigurationRepository.GetAllTopicConfigurationsAsync();
                        var existing = allTopics.FirstOrDefault(t => t.Topic.Equals(topic, StringComparison.OrdinalIgnoreCase));
                            
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { topicsSkipped = importStats.topicsSkipped + 1 };
                            continue;
                        }

                        var unsName = item.TryGetProperty("unsName", out var unsNameProp) ? unsNameProp.GetString() ?? "" : "";
                        var hierarchicalPath = item.TryGetProperty("hierarchicalPath", out var pathProp) ? pathProp.GetString() : null;
                        var nsPath = item.TryGetProperty("nsPath", out var nsPathProp) ? nsPathProp.GetString() : null;
                        var sourceType = item.TryGetProperty("sourceType", out var sourceProp) ? sourceProp.GetString() ?? "" : "";
                        var isVerified = item.TryGetProperty("isVerified", out var verifiedProp) ? verifiedProp.GetBoolean() : false;

                        HierarchicalPath? path = null;
                        if (!string.IsNullOrEmpty(hierarchicalPath))
                        {
                            try
                            {
                                var pathParts = hierarchicalPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
                                path = new HierarchicalPath();
                                for (int i = 0; i < pathParts.Length; i++)
                                {
                                    path.SetValue($"Level{i}", pathParts[i]);
                                }
                            }
                            catch
                            {
                                // If path parsing fails, leave as null
                            }
                        }

                        var config = new TopicConfiguration
                        {
                            Topic = topic,
                            UNSName = unsName,
                            Path = path,
                            NSPath = nsPath,
                            SourceType = sourceType,
                            IsVerified = isVerified,
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        await TopicConfigurationRepository.SaveTopicConfigurationAsync(config);
                        importStats = importStats with { topicsImported = importStats.topicsImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing topic item: {ex.Message}");
                    }
                }
            }

            var totalImported = importStats.hierarchyImported + importStats.namespaceImported + importStats.topicsImported;
            var totalSkipped = importStats.hierarchySkipped + importStats.namespaceSkipped + importStats.topicsSkipped;
            
            var resultMessage = $"Import completed: {totalImported} items imported, {totalSkipped} skipped";
            if (importStats.errors.Any())
            {
                resultMessage += $", {importStats.errors.Count} errors";
            }

            importStatus = (false, resultMessage, importStats.errors.Count == 0);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error importing configuration");
            importStatus = (false, $"Import failed: {ex.Message}", false);
        }
        
        StateHasChanged();
    }

    

    public void Dispose()
    {
        // Clean up timers
        statusRefreshTimer?.Dispose();
    }

    private class PropertyTypeItem
    {
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = "String";
    }
}
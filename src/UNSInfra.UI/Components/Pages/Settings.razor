@page "/settings"
@using UNSInfra.UI.Components
@using UNSInfra.UI.Components.Shared
@using UNSInfra.Models.Schema
@using UNSInfra.Core.Repositories
@using UNSInfra.Repositories
@using UNSInfra.Validation
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Data
@using UNSInfra.Models
@using UNSInfra.UI.Services
@* @using UNSInfra.Core.Configuration - Removed, conflicts with ConnectionSDK.Models
@using UNSInfra.Core.Services - Removed, old data ingestion services *@
@using UNSInfra.Services
@using UNSInfra.Models.Hierarchy
@using UNSInfra.Models.Namespace
@using UNSInfra.Models.Configuration
@using UNSInfra.ConnectionSDK.Abstractions
@using UNSInfra.ConnectionSDK.Models
@using UNSInfra.Abstractions
@using System.Text.Json
@inject ISchemaRepository SchemaRepository
@inject ISchemaValidator SchemaValidator
@inject ITopicBrowserService TopicBrowserService
@inject IConnectionRegistry ConnectionRegistry
@inject IConnectionManager ConnectionManager
@inject ITopicConfigurationRepository TopicConfigurationRepository
@inject IHierarchyConfigurationRepository HierarchyConfigurationRepository
@inject INamespaceConfigurationRepository NamespaceConfigurationRepository
@inject INamespaceStructureService NamespaceStructureService
@inject IConnectionConfigurationRepository ConnectionConfigurationRepository
@inject IJSRuntime JSRuntime
@inject ILogger<Settings> Logger
@implements IDisposable

<PageTitle>Settings</PageTitle>

<div class="settings-page">
    <div class="settings-header">
        <h3>
            <i class="bi bi-gear me-2"></i>
            Settings
        </h3>
        <p class="text-muted">Configure your UNS Infrastructure system</p>
    </div>

    <div class="settings-tabs">
        <ul class="nav nav-tabs" id="settingsTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "storage" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("storage"))">
                    <i class="bi bi-database me-2"></i>
                    Storage
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "hierarchy" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("hierarchy"))">
                    <i class="bi bi-diagram-3 me-2"></i>
                    Hierarchy
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "connections" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("connections"))">
                    <i class="bi bi-link-45deg me-2"></i>
                    Connections
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "schemas" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("schemas"))">
                    <i class="bi bi-shield-check me-2"></i>
                    Schemas
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "automapping" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("automapping"))">
                    <i class="bi bi-diagram-2 me-2"></i>
                    Auto Mapping
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "import-export" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("import-export"))">
                    <i class="bi bi-arrow-down-up me-2"></i>
                    Import/Export
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link @(activeTab == "system" ? "active" : "")" 
                        type="button" role="tab"
                        @onclick="@(() => SetActiveTab("system"))">
                    <i class="bi bi-cpu me-2"></i>
                    System
                </button>
            </li>
        </ul>

        <div class="tab-content settings-content">
            <!-- Storage Configuration Tab -->
            <div class="tab-pane @(activeTab == "storage" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Storage Configuration</h5>
                        <p class="text-muted">Configure data storage settings for real-time and historical data</p>
                    </div>
                    <HistoricalStorageConfigurationEditor />
                </div>
            </div>

            <!-- Hierarchy Configuration Tab -->
            <div class="tab-pane @(activeTab == "hierarchy" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Hierarchy Configuration</h5>
                        <p class="text-muted">Define and manage ISA-S95 hierarchical structures</p>
                    </div>
                    <HierarchyEditor />
                </div>
            </div>

            <!-- Connections Configuration Tab -->
            <div class="tab-pane @(activeTab == "connections" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Data Connections</h5>
                        <p class="text-muted">Configure MQTT, Socket.IO, and other data source connections with their input/output processing</p>
                    </div>
                    
                    <!-- Data Connections List -->
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">Active Data Connections</h6>
                            <div>
                                <button class="btn btn-outline-secondary btn-sm me-2" @onclick="RefreshConfigurations">
                                    <i class="bi bi-arrow-repeat"></i> Refresh
                                </button>
                                <button class="btn btn-primary btn-sm" @onclick="ShowAddConfiguration">
                                    <i class="bi bi-plus-circle"></i> Add Connection
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (connectionConfigurations == null)
                            {
                                <div class="text-center p-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2 text-muted">Loading connections...</p>
                                </div>
                            }
                            else if (!connectionConfigurations.Any())
                            {
                                <div class="text-center p-4">
                                    <i class="bi bi-hdd-network text-muted" style="font-size: 3rem;"></i>
                                    <h6 class="text-muted mt-3">No data connections configured</h6>
                                    <p class="text-muted">Add your first MQTT broker or SocketIO server connection to start processing data.</p>
                                    <button class="btn btn-primary" @onclick="ShowAddConfiguration">
                                        <i class="bi bi-plus-circle"></i> Add your first connection
                                    </button>
                                </div>
                            }
                            else
                            {
                                @foreach (var config in connectionConfigurations)
                                {
                                    var status = GetConnectionStatus(config.Id);
                                    var inputConfigs = GetConnectionInputConfigurations(config.Id);
                                    var outputConfigs = GetConnectionOutputConfigurations(config.Id);
                                    
                                    <div class="card mb-3 border-start border-info border-3">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-3">
                                                <div>
                                                    <h6 class="mb-1">@config.Name</h6>
                                                    <div class="mb-2">
                                                        <span class="badge bg-info me-2">@config.ConnectionType</span>
                                                        @if (status == ConnectionStatus.Connected)
                                                        {
                                                            <span class="badge bg-success">
                                                                <i class="bi bi-circle-fill"></i> Connected
                                                            </span>
                                                        }
                                                        else if (status == ConnectionStatus.Disconnected)
                                                        {
                                                            <span class="badge bg-danger">
                                                                <i class="bi bi-circle-fill"></i> Disconnected
                                                            </span>
                                                        }
                                                        else if (status == ConnectionStatus.Connecting)
                                                        {
                                                            <span class="badge bg-warning">
                                                                <i class="bi bi-circle-fill"></i> Connecting
                                                            </span>
                                                        }
                                                        else if (status == ConnectionStatus.Error)
                                                        {
                                                            <span class="badge bg-danger">
                                                                <i class="bi bi-circle-fill"></i> Error
                                                            </span>
                                                        }
                                                        else if (status == ConnectionStatus.Stopping)
                                                        {
                                                            <span class="badge bg-warning">
                                                                <i class="bi bi-circle-fill"></i> Stopping
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">
                                                                <i class="bi bi-circle-fill"></i> @(status?.ToString() ?? "Unknown")
                                                            </span>
                                                        }
                                                    </div>
                                                    @if (!string.IsNullOrEmpty(config.Description))
                                                    {
                                                        <p class="text-muted small mb-0">@config.Description</p>
                                                    }
                                                </div>
                                                <div class="btn-group btn-group-sm">
                                                    @if (status == ConnectionStatus.Disconnected || status == ConnectionStatus.Error || status == ConnectionStatus.Disabled || status == ConnectionStatus.Unknown)
                                                    {
                                                        <button class="btn btn-outline-success" @onclick="() => StartConnectionAsync(config.Id)">
                                                            <i class="bi bi-play-fill"></i>
                                                        </button>
                                                    }
                                                    @if (status == ConnectionStatus.Connected || status == ConnectionStatus.Connecting)
                                                    {
                                                        <button class="btn btn-outline-warning" @onclick="() => StopConnectionAsync(config.Id)">
                                                            <i class="bi bi-stop-fill"></i>
                                                        </button>
                                                    }
                                                    <button class="btn btn-outline-primary" @onclick="() => EditConnection(config)">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-outline-secondary" @onclick="() => TestConnection(config)">
                                                        <i class="bi bi-activity"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => RemoveConnectionAsync(config.Id)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            
                                            <!-- Input/Output Configurations for this connection -->
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="border-start border-primary border-2 ps-3">
                                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                                            <h6 class="mb-0 text-primary">
                                                                <i class="bi bi-arrow-down-circle"></i> Inputs (@inputConfigs.Count())
                                                            </h6>
                                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowInputModal(config.Id)">
                                                                <i class="bi bi-plus"></i>
                                                            </button>
                                                        </div>
                                                        @if (!inputConfigs.Any())
                                                        {
                                                            <div class="text-center py-2">
                                                                <p class="text-muted small mb-2">No configurations yet</p>
                                                                <button class="btn btn-primary btn-sm" @onclick="() => ShowInputModal(config.Id)">
                                                                    <i class="bi bi-plus-circle me-1"></i> Add your first input
                                                                </button>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            @foreach (var inputConfig in inputConfigs)
                                                            {
                                                                <div class="card card-body mb-2 p-2">
                                                                    <div class="d-flex justify-content-between align-items-start">
                                                                        <div>
                                                                            <small class="fw-semibold">@inputConfig.Name</small>
                                                                            <div class="form-check form-switch form-check-inline ms-2">
                                                                                <input class="form-check-input form-check-input-sm" type="checkbox" 
                                                                                       checked="@inputConfig.IsEnabled" 
                                                                                       @onchange="@(async (e) => await ToggleInput(inputConfig, (bool)e.Value!))" />
                                                                            </div>
                                                                        </div>
                                                                        <div class="btn-group btn-group-sm">
                                                                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => EditInput((object)inputConfig)">
                                                                                <i class="bi bi-pencil"></i>
                                                                            </button>
                                                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteInputOutputConfiguration(inputConfig.Id)">
                                                                                <i class="bi bi-trash"></i>
                                                                            </button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="border-start border-success border-2 ps-3">
                                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                                            <h6 class="mb-0 text-success">
                                                                <i class="bi bi-arrow-up-circle"></i> Outputs (@outputConfigs.Count())
                                                            </h6>
                                                            <button class="btn btn-outline-success btn-sm" @onclick="() => ShowOutputModal(config.Id)">
                                                                <i class="bi bi-plus"></i>
                                                            </button>
                                                        </div>
                                                        @if (!outputConfigs.Any())
                                                        {
                                                            <div class="text-center py-2">
                                                                <p class="text-muted small mb-2">No configurations yet</p>
                                                                <button class="btn btn-primary btn-sm" @onclick="() => ShowOutputModal(config.Id)">
                                                                    <i class="bi bi-plus-circle me-1"></i> Add your first output
                                                                </button>
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            @foreach (var outputConfig in outputConfigs)
                                                            {
                                                                <div class="card card-body mb-2 p-2">
                                                                    <div class="d-flex justify-content-between align-items-start">
                                                                        <div>
                                                                            <small class="fw-semibold">@outputConfig.Name</small>
                                                                            <div class="form-check form-switch form-check-inline ms-2">
                                                                                <input class="form-check-input form-check-input-sm" type="checkbox" 
                                                                                       checked="@outputConfig.IsEnabled" 
                                                                                       @onchange="@(async (e) => await ToggleOutput(outputConfig, (bool)e.Value!))" />
                                                                            </div>
                                                                        </div>
                                                                        <div class="btn-group btn-group-sm">
                                                                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => EditOutput((object)outputConfig)">
                                                                                <i class="bi bi-pencil"></i>
                                                                            </button>
                                                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteInputOutputConfiguration(outputConfig.Id)">
                                                                                <i class="bi bi-trash"></i>
                                                                            </button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Auto Mapping Configuration Tab -->
            <div class="tab-pane @(activeTab == "automapping" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Auto-Mapping Configuration</h5>
                        <p class="text-muted">Configure automatic topic mapping to UNS namespace paths</p>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <div class="text-center py-4">
                                <i class="bi bi-diagram-2 text-success" style="font-size: 3rem;"></i>
                                <h5 class="mt-3">Auto-mapping is now handled automatically</h5>
                                <p class="text-muted">
                                    The system now uses a global SimplifiedAutoMapperService that automatically processes 
                                    all incoming topics against existing UNS namespaces. No per-configuration settings are required.
                                </p>
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle me-2"></i>
                                    Auto-mapping runs automatically for all data sources and matches topics to existing namespace structures.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Schema Validation Tab -->
            <div class="tab-pane @(activeTab == "schemas" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Data Schema Validation</h5>
                        <p class="text-muted">Create and manage JSON schemas for topic data validation</p>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div class="row g-3 flex-grow-1">
                            <div class="col-md-6">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="Search schemas..." 
                                           @bind="searchTerm" @oninput="OnSearchChanged" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" @bind="selectedTopic" @bind:after="OnTopicFilterChanged">
                                    <option value="">All Topics</option>
                                    @foreach (var topic in availableTopics)
                                    {
                                        <option value="@topic">@topic</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-outline-secondary w-100" @onclick="RefreshSchemas">
                                    <i class="bi bi-arrow-clockwise me-1"></i>
                                    Refresh
                                </button>
                            </div>
                        </div>
                        <div class="ms-3">
                            <button class="btn btn-primary" @onclick="ShowCreateSchemaModal">
                                <i class="bi bi-plus-circle me-1"></i>
                                Create Schema
                            </button>
                        </div>
                    </div>

                    <div class="schema-content-tab">
                        @if (isLoading)
                        {
                            <div class="text-center py-4">
                                <div class="spinner-border spinner-border-sm me-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading schemas...
                            </div>
                        }
                        else if (!displayedSchemas.Any())
                        {
                            <div class="empty-schemas-state">
                                <i class="bi bi-shield-exclamation"></i>
                                <div class="text-center">
                                    <h5>No Schemas Found</h5>
                                    <p class="mb-3">
                                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                                        {
                                            <span>No schemas match your search criteria. Try adjusting your filters.</span>
                                        }
                                        else
                                        {
                                            <span>No data schemas have been created yet. Create your first schema to start validating topic data.</span>
                                        }
                                    </p>
                                    <button class="btn btn-primary" @onclick="ShowCreateSchemaModal">
                                        <i class="bi bi-plus-circle me-1"></i>
                                        Create First Schema
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="schema-list">
                                @foreach (var schema in displayedSchemas)
                                {
                                    <div class="schema-card">
                                        <div class="schema-card-header">
                                            <div class="schema-info">
                                                <h6 class="schema-title">@schema.SchemaId</h6>
                                                <div class="schema-topic">
                                                    <i class="bi bi-diagram-3 me-1"></i>
                                                    @schema.Topic
                                                </div>
                                            </div>
                                            <div class="schema-actions">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowValidationTest(schema)">
                                                    <i class="bi bi-check-circle"></i>
                                                    Test
                                                </button>
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditSchema(schema)">
                                                    <i class="bi bi-pencil"></i>
                                                    Edit
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSchema(schema)">
                                                    <i class="bi bi-trash"></i>
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                        
                                        <div class="schema-details">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <div class="detail-section">
                                                        <h6>Property Types</h6>
                                                        @if (schema.PropertyTypes.Any())
                                                        {
                                                            <div class="property-types">
                                                                @foreach (var prop in schema.PropertyTypes)
                                                                {
                                                                    <div class="property-type">
                                                                        <code>@prop.Key</code>
                                                                        <span class="type-badge">@prop.Value.Name</span>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="text-muted small">No property types defined</div>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="detail-section">
                                                        <h6>Validation Rules</h6>
                                                        @if (schema.ValidationRules.Any())
                                                        {
                                                            <div class="validation-rules">
                                                                @foreach (var rule in schema.ValidationRules)
                                                                {
                                                                    <div class="validation-rule">
                                                                        <span class="rule-property">@rule.PropertyName</span>
                                                                        <span class="badge bg-secondary rule-type">@rule.RuleType</span>
                                                                        <code class="rule-value">@rule.RuleValue</code>
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="text-muted small">No validation rules defined</div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>


            <!-- Import/Export Configuration Tab -->
            <div class="tab-pane @(activeTab == "import-export" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>Configuration Import/Export</h5>
                        <p class="text-muted">Backup, restore, and share your UNS configuration</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-download me-2"></i>
                                        Export Configuration
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        Export your complete UNS configuration including connections, hierarchies, namespaces, and topic mappings to a JSON file.
                                    </p>
                                    
                                    @if (exportStatus.IsExporting)
                                    {
                                        <div class="d-flex align-items-center">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Exporting...</span>
                                            </div>
                                            <span>Exporting configuration...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-success" @onclick="ExportConfiguration">
                                            <i class="bi bi-download me-1"></i>
                                            Export Configuration
                                        </button>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(exportStatus.LastExportResult))
                                    {
                                        <div class="alert alert-info mt-3 mb-0">
                                            <small>@exportStatus.LastExportResult</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-upload me-2"></i>
                                        Import Configuration
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">
                                        Import a UNS configuration from a previously exported JSON file.
                                    </p>
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Configuration File</label>
                                        <InputFile OnChange="HandleFileSelected" accept=".json" class="form-control" />
                                        @if (!string.IsNullOrEmpty(selectedFileName))
                                        {
                                            <small class="text-muted">Selected: @selectedFileName</small>
                                        }
                                    </div>
                                    
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" @bind="overwriteExisting" id="overwriteCheck">
                                        <label class="form-check-label" for="overwriteCheck">
                                            Overwrite existing configurations
                                        </label>
                                        <small class="form-text text-muted">
                                            If unchecked, existing configurations will be skipped
                                        </small>
                                    </div>
                                    
                                    @if (importStatus.IsImporting)
                                    {
                                        <div class="d-flex align-items-center mb-3">
                                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                                <span class="visually-hidden">Importing...</span>
                                            </div>
                                            <span>Importing configuration...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary" @onclick="ImportConfiguration" 
                                                disabled="@(string.IsNullOrEmpty(importFileContent))">
                                            <i class="bi bi-upload me-1"></i>
                                            Import Configuration
                                        </button>
                                    }
                                    
                                    @if (!string.IsNullOrEmpty(importStatus.LastImportResult))
                                    {
                                        <div class="alert @(importStatus.LastImportSuccess ? "alert-success" : "alert-danger") mt-3 mb-0">
                                            <small>@importStatus.LastImportResult</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-info-circle me-2"></i>
                                        Import/Export Information
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <h6>What gets exported:</h6>
                                    <ul class="list-unstyled small">
                                        <li><i class="bi bi-check text-success me-1"></i> Hierarchy configurations and nodes</li>
                                        <li><i class="bi bi-check text-success me-1"></i> Namespace configurations</li>
                                        <li><i class="bi bi-check text-success me-1"></i> Topic configurations and mappings</li>
                                        <li><i class="bi bi-check text-success me-1"></i> UNS tree structure</li>
                                        <li><i class="bi bi-check text-success me-1"></i> Verification status and metadata</li>
                                    </ul>
                                    
                                    <h6 class="mt-3">Import modes:</h6>
                                    <ul class="list-unstyled small">
                                        <li><i class="bi bi-arrow-right text-primary me-1"></i> <strong>Merge:</strong> Skip existing configurations (safer)</li>
                                        <li><i class="bi bi-arrow-right text-warning me-1"></i> <strong>Overwrite:</strong> Replace existing configurations (use with caution)</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Configuration Tab -->
            <div class="tab-pane @(activeTab == "system" ? "show active" : "")" role="tabpanel">
                <div class="tab-section">
                    <div class="section-header">
                        <h5>System Configuration</h5>
                        <p class="text-muted">General system settings and preferences</p>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-clock me-2"></i>
                                        Refresh Settings
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Auto-refresh Interval (seconds)</label>
                                        <select class="form-select">
                                            <option value="5">5 seconds</option>
                                            <option value="10" selected>10 seconds</option>
                                            <option value="30">30 seconds</option>
                                            <option value="60">1 minute</option>
                                        </select>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="enableAutoRefresh" checked>
                                        <label class="form-check-label" for="enableAutoRefresh">
                                            Enable auto-refresh
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-palette me-2"></i>
                                        Appearance
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">Theme</label>
                                        <select class="form-select">
                                            <option value="auto">Auto (System)</option>
                                            <option value="light" selected>Light</option>
                                            <option value="dark">Dark</option>
                                        </select>
                                    </div>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="compactMode">
                                        <label class="form-check-label" for="compactMode">
                                            Compact mode
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">
                                    <i class="bi bi-shield-check me-2"></i>
                                    Security & Logging
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Log Level</label>
                                            <select class="form-select">
                                                <option value="trace">Trace</option>
                                                <option value="debug">Debug</option>
                                                <option value="info" selected>Information</option>
                                                <option value="warning">Warning</option>
                                                <option value="error">Error</option>
                                                <option value="critical">Critical</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Log Retention (days)</label>
                                            <input type="number" class="form-control" value="30" min="1" max="365">
                                        </div>
                                    </div>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="enableAuditLog" checked>
                                    <label class="form-check-label" for="enableAuditLog">
                                        Enable audit logging
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary">
                                <i class="bi bi-check me-1"></i>
                                Save Settings
                            </button>
                            <button class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-counterclockwise me-1"></i>
                                Reset to Defaults
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Connection Configuration Modal -->
<ConnectionConfigurationModal 
    IsVisible="@(showAddConnectionModal && selectedConnectionType != null)"
    Connection="@editingConnection"
    ConnectionDescriptor="@selectedConnectionType"
    OnSave="@SaveConnectionAsync"
    OnCancel="@HideAddConnectionModal" />

<!-- Connection Type Selection Modal -->
@if (showAddConnectionModal && selectedConnectionType == null && !isEditingConnection)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (isEditingConnection)
                        {
                            <i class="bi bi-pencil me-2"></i>
                            <text>Edit Data Connection</text>
                        }
                        else
                        {
                            <i class="bi bi-plus-circle me-2"></i>
                            <text>Add Data Connection</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideAddConnectionModal"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit="SaveConnectionAsync" @onsubmit:preventDefault="true">
                        <!-- Connection Type Selection -->
                        <div class="mb-4">
                            <label class="form-label">Connection Type <span class="text-danger">*</span></label>
                            @if (availableConnectionTypes != null && availableConnectionTypes.Any())
                            {
                                <div class="row">
                                    @foreach (var connectionType in availableConnectionTypes.OrderBy(c => c.Category).ThenBy(c => c.DisplayName))
                                    {
                                        <div class="col-md-6 mb-3">
                                            <div class="card connection-type-card @(selectedConnectionType?.ConnectionType == connectionType.ConnectionType ? "border-primary bg-light" : "") @(isEditingConnection ? "text-muted" : "") h-100" 
                                                 style="cursor: @(isEditingConnection ? "not-allowed" : "pointer");" 
                                                 @onclick="() => { if (!isEditingConnection) SelectConnectionType(connectionType); }">
                                                <div class="card-body">
                                                    <div class="d-flex align-items-center mb-2">
                                                        @if (!string.IsNullOrEmpty(connectionType.IconClass))
                                                        {
                                                            <i class="@connectionType.IconClass me-2"></i>
                                                        }
                                                        <h6 class="card-title mb-0">@connectionType.DisplayName</h6>
                                                    </div>
                                                    <p class="card-text small text-muted">@connectionType.Description</p>
                                                    <div class="d-flex justify-content-between">
                                                        <small class="text-muted">@connectionType.Category</small>
                                                        <small class="text-muted">v@connectionType.Version</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    No connection types are registered. Please check your application configuration.
                                </div>
                            }
                        </div>

                        @if (selectedConnectionType != null)
                        {
                            <!-- Basic Connection Information -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="bi bi-info-circle me-1"></i>
                                        Basic Information
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Connection Name <span class="text-danger">*</span></label>
                                            <input type="text" class="form-control" @bind="editingConnection.Name" 
                                                   placeholder="e.g., Main MQTT Broker" required />
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Description</label>
                                            <input type="text" class="form-control" @bind="editingConnection.Description" 
                                                   placeholder="Optional description" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="editingConnection.IsEnabled" />
                                                <label class="form-check-label">
                                                    Enable this connection
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="editingConnection.AutoStart" />
                                                <label class="form-check-label">
                                                    Auto-start on application startup
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Connection-Specific Configuration -->
                            <div class="card mb-4">
                                <div class="card-header">
                                    <h6 class="mb-0">
                                        <i class="@selectedConnectionType.IconClass me-1"></i>
                                        @selectedConnectionType.DisplayName Configuration
                                    </h6>
                                </div>
                                <div class="card-body">
                                    @{ 
                                        var schema = selectedConnectionType.GetConnectionConfigurationSchema();
                                    }
                                    @if (schema.Fields.Any())
                                    {
                                        @foreach (var field in schema.Fields.OrderBy(f => f.Order))
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">
                                                    @field.DisplayName
                                                    @if (field.IsRequired)
                                                    {
                                                        <span class="text-danger">*</span>
                                                    }
                                                </label>
                                                @if (field.Type == ConfigurationFieldType.Text)
                                                {
                                                    <input type="text" class="form-control" 
                                                           @onchange="@(e => UpdateConnectionConfig(field.Name, e.Value?.ToString()))"
                                                           value="@(connectionConfig.ContainsKey(field.Name) ? connectionConfig[field.Name]?.ToString() : field.DefaultValue?.ToString() ?? "")"
                                                           placeholder="@field.Placeholder"
                                                           required="@field.IsRequired" />
                                                }
                                                else if (field.Type == ConfigurationFieldType.TextArea)
                                                {
                                                    <textarea class="form-control" rows="3"
                                                              @onchange="@(e => UpdateConnectionConfig(field.Name, e.Value?.ToString()))"
                                                              placeholder="@field.Placeholder"
                                                              required="@field.IsRequired">@(connectionConfig.ContainsKey(field.Name) ? connectionConfig[field.Name]?.ToString() : field.DefaultValue?.ToString() ?? "")</textarea>
                                                }
                                                else if (field.Type == ConfigurationFieldType.Number)
                                                {
                                                    <input type="number" class="form-control" 
                                                           @onchange="@(e => UpdateConnectionConfig(field.Name, ParseNumber(e.Value?.ToString())))"
                                                           value="@(connectionConfig.ContainsKey(field.Name) ? connectionConfig[field.Name]?.ToString() : field.DefaultValue?.ToString() ?? "")"
                                                           placeholder="@field.Placeholder"
                                                           required="@field.IsRequired" />
                                                }
                                                else if (field.Type == ConfigurationFieldType.Password)
                                                {
                                                    <input type="password" class="form-control" 
                                                           @onchange="@(e => UpdateConnectionConfig(field.Name, e.Value?.ToString()))"
                                                           value="@(connectionConfig.ContainsKey(field.Name) ? connectionConfig[field.Name]?.ToString() : field.DefaultValue?.ToString() ?? "")"
                                                           placeholder="@field.Placeholder"
                                                           required="@field.IsRequired" />
                                                }
                                                else if (field.Type == ConfigurationFieldType.Boolean)
                                                {
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" 
                                                               @onchange="@(e => UpdateConnectionConfig(field.Name, e.Value))"
                                                               checked="@(connectionConfig.ContainsKey(field.Name) ? (bool?)connectionConfig[field.Name] == true : field.DefaultValue as bool? == true)" />
                                                        <label class="form-check-label">
                                                            @field.Description
                                                        </label>
                                                    </div>
                                                }
                                                else if (field.Type == ConfigurationFieldType.Select && field.Options != null)
                                                {
                                                    <select class="form-select" 
                                                            @onchange="@(e => UpdateConnectionConfig(field.Name, e.Value?.ToString()))"
                                                            value="@(connectionConfig.ContainsKey(field.Name) ? connectionConfig[field.Name]?.ToString() : field.DefaultValue?.ToString() ?? "")"
                                                            required="@field.IsRequired">
                                                        <option value="">-- Select @field.DisplayName --</option>
                                                        @foreach (var option in field.Options)
                                                        {
                                                            <option value="@option.Value">@option.Text</option>
                                                        }
                                                    </select>
                                                }
                                                @if (!string.IsNullOrEmpty(field.Description) && field.Type != ConfigurationFieldType.Boolean)
                                                {
                                                    <div class="form-text">@field.Description</div>
                                                }
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="alert alert-info">
                                            <i class="bi bi-info-circle me-2"></i>
                                            No additional configuration required for this connection type.
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddConnectionModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveConnectionAsync" disabled="@(selectedConnectionType == null || string.IsNullOrWhiteSpace(editingConnection.Name))">
                        <i class="bi bi-check me-1"></i>
                        @(isEditingConnection ? "Update Connection" : "Create Connection")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Input/Output Configuration Modal -->
<InputOutputConfigurationModal 
    IsVisible="@showInputOutputModal"
    Configuration="@editingInputOutputConfig"
    ConnectionDescriptor="@GetConnectionDescriptorForCurrentConfiguration()"
    IsInput="@isEditingInput"
    OnSave="@SaveInputOutputConfiguration"
    OnCancel="@HideInputOutputModal" />
@code {
    private string activeTab = "storage";


    // Data connections properties (new ConnectionSDK system)
    private List<ConnectionConfiguration>? connectionConfigurations;
    private Dictionary<string, ConnectionStatus>? connectionStatuses;
    private List<IConnectionDescriptor>? availableConnectionTypes;
    private Timer? statusRefreshTimer;
    
    // Add/Edit connection modal state
    private bool showAddConnectionModal = false;
    private bool isEditingConnection = false;
    private ConnectionConfiguration editingConnection = new();
    private IConnectionDescriptor? selectedConnectionType;
    private Dictionary<string, object> connectionConfig = new();
    
    // Input/Output configuration properties
    private string connectionConfigActiveTab = "basic";
    
    // Input/Output modal state
    private bool showInputOutputModal = false;
    private dynamic? editingInputOutputConfig;
    private string currentConnectionId = string.Empty;
    private bool isEditingInput = false;

    // Schema validation properties
    private List<DataSchema> allSchemas = new();
    private List<DataSchema> displayedSchemas = new();
    private List<string> availableTopics = new();
    private string searchTerm = string.Empty;
    private string selectedTopic = string.Empty;
    private bool isLoading = false;

    // Modal states
    private bool showSchemaModal = false;
    private bool showValidationModal = false;
    private bool isValidating = false;
    
    // Editing state
    private DataSchema editingSchema = new();
    private List<PropertyTypeItem> editingPropertyTypes = new();
    private List<ValidationRule> editingValidationRules = new();
    private List<string> editingValidationRuleValues = new();
    
    // Validation testing
    private DataSchema? selectedValidationSchema;
    private string testJsonData = string.Empty;
    private UNSInfra.Validation.ValidationResult? validationResult;
    
    // Import/Export properties
    private (bool IsExporting, string LastExportResult) exportStatus = (false, string.Empty);
    private (bool IsImporting, string LastImportResult, bool LastImportSuccess) importStatus = (false, string.Empty, false);
    private string selectedFileName = string.Empty;
    private string importFileContent = string.Empty;
    private bool overwriteExisting = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshSchemas();
        await LoadConnectionData();
        
        
        // Set up timer to refresh connection status every 2 seconds
        statusRefreshTimer = new Timer(async _ => await InvokeAsync(RefreshConnectionStatus), null, TimeSpan.Zero, TimeSpan.FromSeconds(2));
    }

    private void SetActiveTab(string tabName)
    {
        activeTab = tabName;
        StateHasChanged();
    }
    
    private void SetConnectionConfigActiveTab(string tabName)
    {
        connectionConfigActiveTab = tabName;
        StateHasChanged();
    }
    
    // Helper methods for connection-specific I/O configurations
    private List<dynamic> GetConnectionInputConfigurations(string connectionId)
    {
        var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == connectionId);
        return connection?.Inputs.Cast<dynamic>().ToList() ?? new List<dynamic>();
    }
    
    private List<dynamic> GetConnectionOutputConfigurations(string connectionId)
    {
        var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == connectionId);
        return connection?.Outputs.Cast<dynamic>().ToList() ?? new List<dynamic>();
    }
    
    // Helper methods to safely handle dynamic method calls
    private void EditInput(object inputConfig)
    {
        EditInputOutputConfiguration((dynamic)inputConfig, true);
    }
    
    private void EditOutput(object outputConfig)
    {
        EditInputOutputConfiguration((dynamic)outputConfig, false);
    }
    
    private async Task ToggleInput(dynamic inputConfig, bool isEnabled)
    {
        await ToggleInputOutputConfiguration(inputConfig, isEnabled);
    }
    
    private async Task ToggleOutput(dynamic outputConfig, bool isEnabled)
    {
        await ToggleInputOutputConfiguration(outputConfig, isEnabled);
    }

    // Data connections methods
    private async Task LoadConnectionData()
    {
        // Load connection configurations from database repository instead of ConnectionManager cache
        connectionConfigurations = (await ConnectionConfigurationRepository.GetAllConnectionsAsync()).ToList();
        connectionStatuses = new Dictionary<string, ConnectionStatus>();
        foreach (var config in connectionConfigurations)
        {
            connectionStatuses[config.Id] = ConnectionManager.GetConnectionStatus(config.Id);
        }
        availableConnectionTypes = ConnectionRegistry.GetAllDescriptors().ToList();
        StateHasChanged();
    }

    private async Task RefreshConfigurations()
    {
        await LoadConnectionData();
    }

    private async Task RefreshConnectionStatus()
    {
        if (connectionConfigurations != null && connectionStatuses != null)
        {
            foreach (var config in connectionConfigurations)
            {
                connectionStatuses[config.Id] = ConnectionManager.GetConnectionStatus(config.Id);
            }
            StateHasChanged();
        }
    }

    private ConnectionStatus? GetConnectionStatus(string connectionId)
    {
        return connectionStatuses?.TryGetValue(connectionId, out var status) == true ? status : null;
    }

    private async Task StartConnectionAsync(string connectionId)
    {
        try
        {
            var success = await ConnectionManager.StartConnectionAsync(connectionId);
            if (success && connectionStatuses != null)
            {
                connectionStatuses[connectionId] = ConnectionManager.GetConnectionStatus(connectionId);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting connection {ConnectionId}", connectionId);
        }
    }

    private async Task StopConnectionAsync(string connectionId)
    {
        try
        {
            var success = await ConnectionManager.StopConnectionAsync(connectionId);
            if (success && connectionStatuses != null)
            {
                connectionStatuses[connectionId] = ConnectionManager.GetConnectionStatus(connectionId);
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping connection {ConnectionId}", connectionId);
        }
    }

    private async Task RemoveConnectionAsync(string connectionId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                "Are you sure you want to remove this connection?");
            
            if (confirmed)
            {
                // First try to remove from ConnectionManager (this handles active connections)
                var managerRemoved = await ConnectionManager.RemoveConnectionAsync(connectionId);
                
                // Always try to remove from database repository (handles both active and inactive connections)
                var dbRemoved = await ConnectionConfigurationRepository.DeleteConnectionAsync(connectionId);
                
                if (managerRemoved || dbRemoved)
                {
                    // Remove from local UI state
                    connectionConfigurations?.RemoveAll(c => c.Id == connectionId);
                    connectionStatuses?.Remove(connectionId);
                    await InvokeAsync(StateHasChanged);
                    
                    Logger.LogInformation("Connection {ConnectionId} removed successfully", connectionId);
                }
                else
                {
                    Logger.LogWarning("Failed to remove connection {ConnectionId} - not found in manager or database", connectionId);
                    await JSRuntime.InvokeVoidAsync("alert", "Failed to remove connection - connection not found.");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing connection {ConnectionId}", connectionId);
            await JSRuntime.InvokeVoidAsync("alert", "An error occurred while removing the connection.");
        }
    }

    private async Task TestConnection(ConnectionConfiguration config)
    {
        // TODO: Implement connection testing
        await JSRuntime.InvokeVoidAsync("alert", $"Testing connection '{config.Name}' - Feature coming soon!");
    }

    private void EditConnection(ConnectionConfiguration config)
    {
        isEditingConnection = true;
        
        // Clone the connection configuration for editing
        editingConnection = new ConnectionConfiguration
        {
            Id = config.Id,
            Name = config.Name,
            ConnectionType = config.ConnectionType,
            IsEnabled = config.IsEnabled,
            AutoStart = config.AutoStart,
            Description = config.Description,
            ConnectionConfig = config.ConnectionConfig,
            Inputs = new List<object>(config.Inputs),
            Outputs = new List<object>(config.Outputs),
            Tags = new List<string>(config.Tags),
            Metadata = new Dictionary<string, object>(config.Metadata),
            CreatedAt = config.CreatedAt,
            ModifiedAt = config.ModifiedAt
        };
        
        // Find and select the connection type
        selectedConnectionType = availableConnectionTypes?.FirstOrDefault(ct => ct.ConnectionType == config.ConnectionType);
        
        // Populate the configuration dictionary from the strongly-typed config
        connectionConfig.Clear();
        if (selectedConnectionType != null && config.ConnectionConfig != null)
        {
            MapObjectToDictionary(config.ConnectionConfig, connectionConfig);
        }
        
        showAddConnectionModal = true;
        StateHasChanged();
    }

    private async Task ShowAddConfiguration()
    {
        isEditingConnection = false;
        editingConnection = new ConnectionConfiguration
        {
            Id = Guid.NewGuid().ToString(),
            Name = "",
            ConnectionType = "",
            IsEnabled = true,
            AutoStart = true,
            Description = ""
        };
        connectionConfig.Clear();
        selectedConnectionType = null;
        
        // Load available connection types if not already loaded
        if (availableConnectionTypes == null)
        {
            availableConnectionTypes = ConnectionRegistry.GetAllDescriptors().ToList();
        }
        
        showAddConnectionModal = true;
        StateHasChanged();
    }

    private void HideAddConnectionModal()
    {
        showAddConnectionModal = false;
        isEditingConnection = false;
        editingConnection = new();
        selectedConnectionType = null;
        connectionConfig.Clear();
        StateHasChanged();
    }

    private void SelectConnectionType(IConnectionDescriptor connectionType)
    {
        selectedConnectionType = connectionType;
        editingConnection.ConnectionType = connectionType.ConnectionType;
        
        // Initialize connection config with default values
        connectionConfig.Clear();
        var defaultConfig = connectionType.CreateDefaultConnectionConfiguration();
        if (defaultConfig != null)
        {
            // Convert the default configuration to a dictionary
            var properties = defaultConfig.GetType().GetProperties();
            foreach (var prop in properties)
            {
                var value = prop.GetValue(defaultConfig);
                if (value != null)
                {
                    connectionConfig[prop.Name] = value;
                }
            }
        }
        
        StateHasChanged();
    }

    private void UpdateConnectionConfig(string fieldName, object? value)
    {
        if (value == null || (value is string str && string.IsNullOrEmpty(str)))
        {
            connectionConfig.Remove(fieldName);
        }
        else
        {
            connectionConfig[fieldName] = value;
        }
        StateHasChanged(); // Ensure UI updates immediately
    }
    
    private int? ParseNumber(string? value)
    {
        if (string.IsNullOrEmpty(value))
            return null;
        
        return int.TryParse(value, out var result) ? result : null;
    }

    private async Task SaveConnectionAsync()
    {
        if (string.IsNullOrWhiteSpace(editingConnection.Name))
        {
            return;
        }

        try
        {
            // editingConnection.ConnectionConfig is already up-to-date from the modal
            // No need for dictionary mapping - the modal keeps it current via OnConnectionConfigChanged
            
            // Create or update the connection using ConnectionManager
            bool success;
            if (isEditingConnection)
            {
                // Update existing connection
                editingConnection.ModifiedAt = DateTime.UtcNow;
                success = await UpdateConnectionAsync(editingConnection);
            }
            else
            {
                // Create new connection
                success = await ConnectionManager.CreateConnectionAsync(editingConnection);
            }
            
            if (success)
            {
                // Hide modal and refresh data
                HideAddConnectionModal();
                await RefreshConfigurations();
                string action = isEditingConnection ? "updated" : "created";
                Logger.LogInformation("Connection '{Name}' {Action} successfully", editingConnection.Name, action);
            }
            else
            {
                string action = isEditingConnection ? "update" : "create";
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to {action} connection. Please check your configuration.");
            }
        }
        catch (Exception ex)
        {
            string action = isEditingConnection ? "updating" : "creating";
            Logger.LogError(ex, "Error {Action} connection {Name}", action, editingConnection.Name);
            await JSRuntime.InvokeVoidAsync("alert", $"Error {action} connection: {ex.Message}");
        }
    }

    private async Task<bool> UpdateConnectionAsync(ConnectionConfiguration config)
    {
        try
        {
            Logger.LogInformation("UpdateConnectionAsync called for connection {ConnectionId} ({ConnectionName})", config.Id, config.Name);
            Logger.LogInformation("Connection config type: {ConfigType}", config.ConnectionConfig?.GetType().Name ?? "null");
            
            // First update in the repository
            Logger.LogInformation("Saving connection to repository...");
            await ConnectionConfigurationRepository.SaveConnectionAsync(config);
            Logger.LogInformation("Successfully saved connection to repository");
            
            // Check if the connection is currently active in the ConnectionManager
            var activeIds = ConnectionManager.GetActiveConnectionIds();
            var isActive = activeIds.Contains(config.Id);
            Logger.LogInformation("Connection is active: {IsActive}. Active connections: [{ActiveIds}]", 
                isActive, string.Join(", ", activeIds));
            
            if (isActive)
            {
                // If the connection is active, we need to restart it with the new configuration
                Logger.LogInformation("Restarting active connection...");
                // Stop the existing connection
                await ConnectionManager.StopConnectionAsync(config.Id);
                await ConnectionManager.RemoveConnectionAsync(config.Id);
                
                // Create it again with the new configuration
                var success = await ConnectionManager.CreateConnectionAsync(config);
                if (success)
                {
                    Logger.LogInformation("Active connection {ConnectionId} updated and restarted successfully", config.Id);
                }
                else
                {
                    Logger.LogError("Failed to restart active connection {ConnectionId}", config.Id);
                }
                return success;
            }
            else
            {
                // Connection is not active, just update the configuration in memory
                Logger.LogInformation("Inactive connection {ConnectionId} configuration updated successfully", config.Id);
                return true;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating connection {ConnectionId}", config.Id);
            return false;
        }
    }


    // Input Configuration Methods (ConnectionSDK)
    private void ShowInputModal(string? connectionId = null)
    {
        Logger.LogInformation("ShowInputModal called with connectionId: {ConnectionId}", connectionId ?? "null");
        
        if (string.IsNullOrEmpty(connectionId))
        {
            Logger.LogWarning("ShowInputModal called with null or empty connectionId");
            return;
        }

        // Find the connection configuration
        var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == connectionId);
        if (connection == null)
        {
            Logger.LogWarning("Connection not found for ID: {ConnectionId}", connectionId);
            return;
        }

        Logger.LogInformation("Found connection: {ConnectionName} (Type: {ConnectionType})", connection.Name, connection.ConnectionType);

        // Get the connection descriptor to create input configuration
        var descriptor = ConnectionRegistry.GetDescriptor(connection.ConnectionType);
        if (descriptor == null)
        {
            Logger.LogWarning("Connection descriptor not found for type: {ConnectionType}", connection.ConnectionType);
            return;
        }

        Logger.LogInformation("Found descriptor: {DescriptorName}, SupportsInputs: {SupportsInputs}", descriptor.DisplayName, descriptor.SupportsInputs);

        // Check if the connection type supports inputs
        if (!descriptor.SupportsInputs)
        {
            Logger.LogWarning("Connection type '{ConnectionType}' does not support inputs", connection.ConnectionType);
            JSRuntime.InvokeVoidAsync("alert", $"Connection type '{descriptor.DisplayName}' does not support inputs.");
            return;
        }

        // Use the ConnectionSDK descriptor to create a default input configuration
        var inputConfig = descriptor.CreateDefaultInputConfiguration();
        Logger.LogInformation("Created default input configuration: {ConfigType}", inputConfig?.GetType().Name ?? "null");
        
        //EditInputOutputConfiguration((dynamic)inputConfig, true);

        //return;
        // Initialize the editing state
        selectedConnectionType = descriptor;
        currentConnectionId = connectionId;
        editingInputOutputConfig = inputConfig;
        isEditingInput = true;
        showInputOutputModal = true;
        
        // ConnectionDescriptor
        
        
        Logger.LogInformation("Modal state set: showInputOutputModal={ShowModal}, isEditingInput={IsEditingInput}", showInputOutputModal, isEditingInput);
        StateHasChanged();
    }

    private void ShowOutputModal(string? connectionId = null)
    {
        Logger.LogInformation("ShowOutputModal called with connectionId: {ConnectionId}", connectionId ?? "null");
        
        if (string.IsNullOrEmpty(connectionId))
        {
            Logger.LogWarning("ShowOutputModal called with null or empty connectionId");
            return;
        }

        // Find the connection configuration
        var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == connectionId);
        if (connection == null)
        {
            Logger.LogWarning("Connection not found for ID: {ConnectionId}", connectionId);
            return;
        }

        Logger.LogInformation("Found connection: {ConnectionName} (Type: {ConnectionType})", connection.Name, connection.ConnectionType);

        // Get the connection descriptor to create output configuration - FIXED: Use ConnectionRegistry like ShowInputModal
        var descriptor = ConnectionRegistry.GetDescriptor(connection.ConnectionType);
        if (descriptor == null)
        {
            Logger.LogWarning("Connection descriptor not found for type: {ConnectionType}", connection.ConnectionType);
            return;
        }

        Logger.LogInformation("Found descriptor: {DescriptorName}, SupportsOutputs: {SupportsOutputs}", descriptor.DisplayName, descriptor.SupportsOutputs);

        // Check if the connection type supports outputs
        if (!descriptor.SupportsOutputs)
        {
            Logger.LogWarning("Connection type '{ConnectionType}' does not support outputs", connection.ConnectionType);
            JSRuntime.InvokeVoidAsync("alert", $"Connection type '{descriptor.DisplayName}' does not support outputs.");
            return;
        }

        // Use the ConnectionSDK descriptor to create a default output configuration
        var outputConfig = descriptor.CreateDefaultOutputConfiguration();
        Logger.LogInformation("Created default output configuration: {ConfigType}", outputConfig?.GetType().Name ?? "null");
        
        // Initialize the editing state
        selectedConnectionType = descriptor;
        currentConnectionId = connectionId;
        editingInputOutputConfig = outputConfig;
        isEditingInput = false;
        showInputOutputModal = true;
        
        Logger.LogInformation("Modal state set: showInputOutputModal={ShowModal}, isEditingInput={IsEditingInput}", showInputOutputModal, isEditingInput);
        StateHasChanged();
    }
    
    #region schema
    // Schema validation methods
    private async Task RefreshSchemas()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allSchemas = (await SchemaRepository.GetAllSchemasAsync()).ToList();
            FilterSchemas();

            // Update available topics
            var topics = await TopicBrowserService.GetLatestTopicStructureAsync();
            availableTopics = topics.Select(t => t.Topic).Distinct().OrderBy(t => t).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading schemas");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterSchemas()
    {
        var filtered = allSchemas.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(s => 
                s.SchemaId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Topic.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(selectedTopic))
        {
            filtered = filtered.Where(s => s.Topic == selectedTopic);
        }

        displayedSchemas = filtered.ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterSchemas();
        StateHasChanged();
    }

    private void OnTopicFilterChanged()
    {
        FilterSchemas();
        StateHasChanged();
    }

    private void ShowCreateSchemaModal()
    {
        editingSchema = new DataSchema
        {
            SchemaId = "",
            Topic = "",
            JsonSchema = "",
            PropertyTypes = new Dictionary<string, Type>(),
            ValidationRules = new List<ValidationRule>()
        };

        editingPropertyTypes = new List<PropertyTypeItem>();
        editingValidationRules = new List<ValidationRule>();
        editingValidationRuleValues = new List<string>();

        showSchemaModal = true;
        StateHasChanged();
    }

    private void EditSchema(DataSchema schema)
    {
        editingSchema = new DataSchema
        {
            SchemaId = schema.SchemaId,
            Topic = schema.Topic,
            JsonSchema = schema.JsonSchema,
            PropertyTypes = new Dictionary<string, Type>(schema.PropertyTypes),
            ValidationRules = schema.ValidationRules.Select(r => new ValidationRule
            {
                PropertyName = r.PropertyName,
                RuleType = r.RuleType,
                RuleValue = r.RuleValue
            }).ToList()
        };

        editingPropertyTypes = schema.PropertyTypes.Select(pt => new PropertyTypeItem
        {
            Key = pt.Key,
            Value = pt.Value.Name
        }).ToList();

        editingValidationRules = editingSchema.ValidationRules.ToList();
        editingValidationRuleValues = editingValidationRules.Select(r => r.RuleValue?.ToString() ?? "").ToList();

        showSchemaModal = true;
        StateHasChanged();
    }

    private async Task SaveSchema()
    {
        try
        {
            // Update property types
            editingSchema.PropertyTypes.Clear();
            foreach (var pt in editingPropertyTypes.Where(pt => !string.IsNullOrWhiteSpace(pt.Key)))
            {
                var type = pt.Value switch
                {
                    "String" => typeof(string),
                    "Int32" => typeof(int),
                    "Double" => typeof(double),
                    "Boolean" => typeof(bool),
                    _ => typeof(string)
                };
                editingSchema.PropertyTypes[pt.Key] = type;
            }

            // Update validation rules
            editingSchema.ValidationRules.Clear();
            for (int i = 0; i < editingValidationRules.Count; i++)
            {
                if (!string.IsNullOrWhiteSpace(editingValidationRules[i].PropertyName))
                {
                    var rule = editingValidationRules[i];
                    if (i < editingValidationRuleValues.Count && !string.IsNullOrWhiteSpace(editingValidationRuleValues[i]))
                    {
                        rule.RuleValue = ParseRuleValue(rule.RuleType, editingValidationRuleValues[i]);
                    }
                    editingSchema.ValidationRules.Add(rule);
                }
            }

            await SchemaRepository.SaveSchemaAsync(editingSchema);
            await RefreshSchemas();
            HideSchemaModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving schema");
        }
    }

    private object ParseRuleValue(string ruleType, string value)
    {
        return ruleType switch
        {
            "Range" => value.Split(',').Select(v => double.Parse(v.Trim())).ToArray(),
            "MinLength" or "MaxLength" => int.Parse(value),
            _ => value
        };
    }

    private async Task DeleteSchema(DataSchema schema)
    {
        Logger.LogInformation("Delete functionality not implemented yet for schema: {SchemaId}", schema.SchemaId);
    }

    private void HideSchemaModal()
    {
        showSchemaModal = false;
        StateHasChanged();
    }

    private void AddPropertyType()
    {
        editingPropertyTypes.Add(new PropertyTypeItem { Key = "", Value = "String" });
        StateHasChanged();
    }

    private void RemovePropertyType(int index)
    {
        if (index >= 0 && index < editingPropertyTypes.Count)
        {
            editingPropertyTypes.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void AddValidationRule()
    {
        editingValidationRules.Add(new ValidationRule { PropertyName = "", RuleType = "Required" });
        editingValidationRuleValues.Add("");
        StateHasChanged();
    }

    private void RemoveValidationRule(int index)
    {
        if (index >= 0 && index < editingValidationRules.Count)
        {
            editingValidationRules.RemoveAt(index);
            if (index < editingValidationRuleValues.Count)
            {
                editingValidationRuleValues.RemoveAt(index);
            }
            StateHasChanged();
        }
    }

    private void ShowValidationTest(DataSchema schema)
    {
        selectedValidationSchema = schema;
        testJsonData = "{\n  \"example\": \"value\",\n  \"number\": 42\n}";
        validationResult = null;
        showValidationModal = true;
        StateHasChanged();
    }

    private async Task RunValidationTest()
    {
        if (selectedValidationSchema == null || string.IsNullOrWhiteSpace(testJsonData))
            return;

        isValidating = true;
        validationResult = null;
        StateHasChanged();

        try
        {
            var jsonElement = JsonSerializer.Deserialize<JsonElement>(testJsonData);
            var testDataPoint = new UNSInfra.Models.Data.DataPoint
            {
                Topic = selectedValidationSchema.Topic,
                Value = jsonElement,
                Timestamp = DateTime.UtcNow,
                Source = "ValidationTest"
            };

            validationResult = await SchemaValidator.ValidateWithDetailsAsync(testDataPoint, selectedValidationSchema);
        }
        catch (JsonException ex)
        {
            validationResult = new UNSInfra.Validation.ValidationResult
            {
                IsValid = false,
                Errors = new List<string> { $"Invalid JSON: {ex.Message}" }
            };
        }
        catch (Exception ex)
        {
            validationResult = new UNSInfra.Validation.ValidationResult
            {
                IsValid = false,
                Errors = new List<string> { $"Validation error: {ex.Message}" }
            };
            Logger.LogError(ex, "Error during validation test");
        }
        finally
        {
            isValidating = false;
            StateHasChanged();
        }
    }

    private void HideValidationModal()
    {
        showValidationModal = false;
        selectedValidationSchema = null;
        StateHasChanged();
    }

    #endregion
    
    // Import/Export Methods
    private async Task ExportConfiguration()
    {
        try
        {
            exportStatus = (true, string.Empty);
            StateHasChanged();

            // Get all configuration data
            var topicConfigurations = await TopicConfigurationRepository.GetAllTopicConfigurationsAsync();
            var hierarchyConfigurations = await HierarchyConfigurationRepository.GetAllConfigurationsAsync();
            var namespaceConfigurations = await NamespaceConfigurationRepository.GetAllNamespaceConfigurationsAsync();
            var connectionConfigurations = await ConnectionConfigurationRepository.GetAllConnectionsAsync(enabledOnly: false);
            var unsTreeStructure = await NamespaceStructureService.GetNamespaceStructureAsync();

            // Create export data structure
            var exportData = new
            {
                exportInfo = new
                {
                    exportedAt = DateTime.UtcNow,
                    version = "1.5.0", // Updated version for ConnectionSDK support
                    description = "UNS Infrastructure Configuration Export",
                    exportedBy = "UNS Infrastructure UI",
                    features = new[] { "ConnectionSDK", "AutoMapping", "Performance Monitoring" }
                },
                hierarchyConfigurations = hierarchyConfigurations.Select(h => new
                {
                    id = h.Id,
                    name = h.Name,
                    description = h.Description,
                    isActive = h.IsActive,
                    isSystemDefined = h.IsSystemDefined,
                    nodes = h.Nodes.Select(n => new
                    {
                        id = n.Id,
                        name = n.Name,
                        description = n.Description,
                        order = n.Order,
                        parentNodeId = n.ParentNodeId,
                        allowedChildNodeIds = n.AllowedChildNodeIds
                    }).ToArray(),
                    createdAt = h.CreatedAt,
                    modifiedAt = h.ModifiedAt
                }).ToArray(),
                namespaceConfigurations = namespaceConfigurations.Select(n => new
                {
                    id = n.Id,
                    name = n.Name,
                    description = n.Description,
                    isActive = n.IsActive,
                    createdAt = n.CreatedAt,
                    modifiedAt = n.ModifiedAt
                }).ToArray(),
                topicConfigurations = topicConfigurations.Select(t => new
                {
                    topic = t.Topic,
                    unsName = t.UNSName,
                    hierarchicalPath = t.Path?.ToString(),
                    nsPath = t.NSPath,
                    sourceType = t.SourceType,
                    isVerified = t.IsVerified,
                    metadata = t.Metadata,
                    createdAt = t.CreatedAt,
                    modifiedAt = t.ModifiedAt
                }).ToArray(),
                connectionConfigurations = connectionConfigurations.Select(c => new
                {
                    id = c.Id,
                    name = c.Name,
                    description = c.Description,
                    connectionType = c.ConnectionType,
                    isEnabled = c.IsEnabled,
                    autoStart = c.AutoStart,
                    connectionConfig = c.ConnectionConfig, // Full connection configuration
                    inputs = c.Inputs,
                    outputs = c.Outputs,
                    tags = c.Tags,
                    metadata = c.Metadata,
                    createdAt = c.CreatedAt,
                    modifiedAt = c.ModifiedAt
                }).ToArray(),
                summary = new
                {
                    totalHierarchyConfigurations = hierarchyConfigurations.Count(),
                    totalNamespaces = namespaceConfigurations.Count(),
                    totalTopicConfigurations = topicConfigurations.Count(),
                    totalConnectionConfigurations = connectionConfigurations.Count(),
                    verifiedTopics = topicConfigurations.Count(t => t.IsVerified),
                    unverifiedTopics = topicConfigurations.Count(t => !t.IsVerified),
                    enabledConnections = connectionConfigurations.Count(c => c.IsEnabled),
                    autoStartConnections = connectionConfigurations.Count(c => c.AutoStart)
                }
            };

            var json = JsonSerializer.Serialize(exportData, new JsonSerializerOptions
            {
                WriteIndented = true,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

            // Create filename with timestamp
            var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
            var fileName = $"UNSConfiguration_Export_{timestamp}.json";

            // Download the file
            await JSRuntime.InvokeVoidAsync("downloadFileFromString", fileName, json);

            exportStatus = (false, $"Configuration exported successfully to {fileName} - {connectionConfigurations.Count()} connections, {topicConfigurations.Count()} topics, {hierarchyConfigurations.Count()} hierarchies, {namespaceConfigurations.Count()} namespaces");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting configuration");
            exportStatus = (false, $"Export failed: {ex.Message}");
        }
        
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;

            selectedFileName = file.Name;
            
            // Validate file type
            if (!file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase))
            {
                importStatus = (false, "Please select a JSON file", false);
                importFileContent = string.Empty;
                StateHasChanged();
                return;
            }

            // Read file content
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            using var reader = new StreamReader(stream);
            importFileContent = await reader.ReadToEndAsync();
            
            // Basic JSON validation
            try
            {
                JsonSerializer.Deserialize<JsonElement>(importFileContent);
                importStatus = (false, "File loaded and validated successfully", true);
            }
            catch (JsonException)
            {
                importStatus = (false, "Invalid JSON file format", false);
                importFileContent = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reading import file");
            importStatus = (false, $"Error reading file: {ex.Message}", false);
            importFileContent = string.Empty;
        }
        
        StateHasChanged();
    }

    private async Task ImportConfiguration()
    {
        try
        {
            if (string.IsNullOrEmpty(importFileContent))
            {
                importStatus = (false, "No file selected", false);
                StateHasChanged();
                return;
            }

            importStatus = (true, "Importing configuration...", false);
            StateHasChanged();

            // Parse the import data
            var importData = JsonSerializer.Deserialize<JsonElement>(importFileContent);
            
            var importStats = new
            {
                hierarchyImported = 0,
                namespaceImported = 0,
                topicsImported = 0,
                connectionsImported = 0,
                hierarchySkipped = 0,
                namespaceSkipped = 0,
                topicsSkipped = 0,
                connectionsSkipped = 0,
                errors = new List<string>()
            };

            // Import hierarchy configurations
            if (importData.TryGetProperty("hierarchyConfigurations", out var hierarchyElement) && hierarchyElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in hierarchyElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("id", out var idProp) || !item.TryGetProperty("name", out var nameProp))
                            continue;

                        var id = idProp.GetString();
                        var name = nameProp.GetString();
                        
                        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name))
                            continue;

                        var existing = await HierarchyConfigurationRepository.GetConfigurationByIdAsync(id);
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { hierarchySkipped = importStats.hierarchySkipped + 1 };
                            continue;
                        }

                        var config = new HierarchyConfiguration
                        {
                            Id = id,
                            Name = name,
                            Description = item.TryGetProperty("description", out var desc) ? desc.GetString() ?? "" : "",
                            IsActive = item.TryGetProperty("isActive", out var active) ? active.GetBoolean() : true,
                            IsSystemDefined = item.TryGetProperty("isSystemDefined", out var sysDef) ? sysDef.GetBoolean() : false,
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        await HierarchyConfigurationRepository.SaveConfigurationAsync(config);
                        importStats = importStats with { hierarchyImported = importStats.hierarchyImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing hierarchy item: {ex.Message}");
                    }
                }
            }

            // Import namespace configurations  
            if (importData.TryGetProperty("namespaceConfigurations", out var namespaceElement) && namespaceElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in namespaceElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("id", out var idProp) || !item.TryGetProperty("name", out var nameProp))
                            continue;

                        var id = idProp.GetString();
                        var name = nameProp.GetString();
                        
                        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name))
                            continue;

                        var existing = await NamespaceConfigurationRepository.GetNamespaceConfigurationAsync(id);
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { namespaceSkipped = importStats.namespaceSkipped + 1 };
                            continue;
                        }

                        var config = new NamespaceConfiguration
                        {
                            Id = id,
                            Name = name,
                            Description = item.TryGetProperty("description", out var desc) ? desc.GetString() ?? "" : "",
                            IsActive = item.TryGetProperty("isActive", out var active) ? active.GetBoolean() : true,
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        await NamespaceConfigurationRepository.SaveNamespaceConfigurationAsync(config);
                        importStats = importStats with { namespaceImported = importStats.namespaceImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing namespace item: {ex.Message}");
                    }
                }
            }

            // Import topic configurations
            if (importData.TryGetProperty("topicConfigurations", out var topicsElement) && topicsElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in topicsElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("topic", out var topicProp))
                            continue;

                        var topic = topicProp.GetString();
                        if (string.IsNullOrEmpty(topic))
                            continue;

                        var allTopics = await TopicConfigurationRepository.GetAllTopicConfigurationsAsync();
                        var existing = allTopics.FirstOrDefault(t => t.Topic.Equals(topic, StringComparison.OrdinalIgnoreCase));
                            
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { topicsSkipped = importStats.topicsSkipped + 1 };
                            continue;
                        }

                        var unsName = item.TryGetProperty("unsName", out var unsNameProp) ? unsNameProp.GetString() ?? "" : "";
                        var hierarchicalPath = item.TryGetProperty("hierarchicalPath", out var pathProp) ? pathProp.GetString() : null;
                        var nsPath = item.TryGetProperty("nsPath", out var nsPathProp) ? nsPathProp.GetString() : null;
                        var sourceType = item.TryGetProperty("sourceType", out var sourceProp) ? sourceProp.GetString() ?? "" : "";
                        var isVerified = item.TryGetProperty("isVerified", out var verifiedProp) ? verifiedProp.GetBoolean() : false;

                        HierarchicalPath? path = null;
                        if (!string.IsNullOrEmpty(hierarchicalPath))
                        {
                            try
                            {
                                var pathParts = hierarchicalPath.Split('/', StringSplitOptions.RemoveEmptyEntries);
                                path = new HierarchicalPath();
                                for (int i = 0; i < pathParts.Length; i++)
                                {
                                    path.SetValue($"Level{i}", pathParts[i]);
                                }
                            }
                            catch
                            {
                                // If path parsing fails, leave as null
                            }
                        }

                        var config = new TopicConfiguration
                        {
                            Topic = topic,
                            UNSName = unsName,
                            Path = path,
                            NSPath = nsPath,
                            SourceType = sourceType,
                            IsVerified = isVerified,
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        await TopicConfigurationRepository.SaveTopicConfigurationAsync(config);
                        importStats = importStats with { topicsImported = importStats.topicsImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing topic item: {ex.Message}");
                    }
                }
            }

            // Import connection configurations
            if (importData.TryGetProperty("connectionConfigurations", out var connectionElement) && connectionElement.ValueKind == JsonValueKind.Array)
            {
                foreach (var item in connectionElement.EnumerateArray())
                {
                    try
                    {
                        if (!item.TryGetProperty("id", out var idProp) || !item.TryGetProperty("name", out var nameProp) ||
                            !item.TryGetProperty("connectionType", out var typeProp))
                            continue;

                        var id = idProp.GetString();
                        var name = nameProp.GetString();
                        var connectionType = typeProp.GetString();
                        
                        if (string.IsNullOrEmpty(id) || string.IsNullOrEmpty(name) || string.IsNullOrEmpty(connectionType))
                            continue;

                        var existing = await ConnectionConfigurationRepository.GetConnectionByIdAsync(id);
                        if (existing != null && !overwriteExisting)
                        {
                            importStats = importStats with { connectionsSkipped = importStats.connectionsSkipped + 1 };
                            continue;
                        }

                        var config = new ConnectionConfiguration
                        {
                            Id = id,
                            Name = name,
                            Description = item.TryGetProperty("description", out var desc) ? desc.GetString() : null,
                            ConnectionType = connectionType,
                            IsEnabled = item.TryGetProperty("isEnabled", out var enabled) ? enabled.GetBoolean() : true,
                            AutoStart = item.TryGetProperty("autoStart", out var autoStart) ? autoStart.GetBoolean() : false,
                            ConnectionConfig = new Dictionary<string, object>(),
                            Inputs = new List<object>(),
                            Outputs = new List<object>(),
                            Tags = new List<string>(),
                            Metadata = new Dictionary<string, object>(),
                            CreatedAt = DateTime.UtcNow,
                            ModifiedAt = DateTime.UtcNow
                        };

                        // Import connection configuration
                        if (item.TryGetProperty("connectionConfig", out var configElement) && configElement.ValueKind == JsonValueKind.Object)
                        {
                            var configDict = new Dictionary<string, object>();
                            foreach (var configProp in configElement.EnumerateObject())
                            {
                                object? value = configProp.Value.ValueKind switch
                                {
                                    JsonValueKind.String => configProp.Value.GetString(),
                                    JsonValueKind.Number => configProp.Value.GetDecimal(),
                                    JsonValueKind.True => true,
                                    JsonValueKind.False => false,
                                    _ => configProp.Value.GetRawText()
                                };
                                if (value != null)
                                {
                                    configDict[configProp.Name] = value;
                                }
                            }
                            config.ConnectionConfig = configDict;
                        }

                        // Import inputs (as generic objects)
                        if (item.TryGetProperty("inputs", out var inputsElement) && inputsElement.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var input in inputsElement.EnumerateArray())
                            {
                                config.Inputs.Add(JsonSerializer.Deserialize<object>(input.GetRawText()) ?? new object());
                            }
                        }

                        // Import outputs (as generic objects)
                        if (item.TryGetProperty("outputs", out var outputsElement) && outputsElement.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var output in outputsElement.EnumerateArray())
                            {
                                config.Outputs.Add(JsonSerializer.Deserialize<object>(output.GetRawText()) ?? new object());
                            }
                        }

                        // Import tags
                        if (item.TryGetProperty("tags", out var tagsElement) && tagsElement.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var tag in tagsElement.EnumerateArray())
                            {
                                if (tag.ValueKind == JsonValueKind.String)
                                {
                                    config.Tags.Add(tag.GetString() ?? "");
                                }
                            }
                        }

                        // Import metadata
                        if (item.TryGetProperty("metadata", out var metadataElement) && metadataElement.ValueKind == JsonValueKind.Object)
                        {
                            foreach (var metaProp in metadataElement.EnumerateObject())
                            {
                                object? value = metaProp.Value.ValueKind switch
                                {
                                    JsonValueKind.String => metaProp.Value.GetString(),
                                    JsonValueKind.Number => metaProp.Value.GetDecimal(),
                                    JsonValueKind.True => true,
                                    JsonValueKind.False => false,
                                    _ => metaProp.Value.GetRawText()
                                };
                                if (value != null)
                                {
                                    config.Metadata[metaProp.Name] = value;
                                }
                            }
                        }

                        await ConnectionConfigurationRepository.SaveConnectionAsync(config);
                        importStats = importStats with { connectionsImported = importStats.connectionsImported + 1 };
                    }
                    catch (Exception ex)
                    {
                        importStats.errors.Add($"Error importing connection item: {ex.Message}");
                    }
                }
            }

            var totalImported = importStats.hierarchyImported + importStats.namespaceImported + importStats.topicsImported + importStats.connectionsImported;
            var totalSkipped = importStats.hierarchySkipped + importStats.namespaceSkipped + importStats.topicsSkipped + importStats.connectionsSkipped;
            
            var resultMessage = $"Import completed: {totalImported} items imported, {totalSkipped} skipped";
            if (importStats.errors.Any())
            {
                resultMessage += $", {importStats.errors.Count} errors";
            }

            importStatus = (false, resultMessage, importStats.errors.Count == 0);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error importing configuration");
            importStatus = (false, $"Import failed: {ex.Message}", false);
        }
        
        StateHasChanged();
    }

    
    /*
    private void EditInputConfig(InputOutputConfiguration inputConfig)
    {
        editingInputOutputConfig = inputConfig;
        currentConnectionId = inputConfig.ConnectionId ?? string.Empty;
        isEditingInput = true;
        showInputOutputModal = true;
        StateHasChanged();
    }
    */
    /*
    private void EditOutputConfig(InputOutputConfiguration outputConfig)
    {
        editingInputOutputConfig = outputConfig;
        currentConnectionId = outputConfig.ConnectionId ?? string.Empty;
        isEditingInput = false;
        showInputOutputModal = true;
        StateHasChanged();
    }
    */
    private void HideInputOutputModal()
    {
        showInputOutputModal = false;
        editingInputOutputConfig = null;
        currentConnectionId = string.Empty;
        StateHasChanged();
    }
    
    private async Task SaveInputOutputConfiguration()
    {
        if (editingInputOutputConfig == null) return;
        
        try
        {
            // Handle ID assignment for new configurations
            var configName = ((dynamic)editingInputOutputConfig).Name as string;
            if (configName?.StartsWith("New") == true)
            {
                ((dynamic)editingInputOutputConfig).Id = Guid.NewGuid().ToString();
            }
            
            // Find the connection this input/output belongs to
            string configId = ((dynamic)editingInputOutputConfig).Id;
            ConnectionConfiguration? connection = null;
            bool isInput = isEditingInput; // Use the editing flag to determine type
            
            // First, try to find an existing configuration
            foreach (var conn in connectionConfigurations ?? new List<ConnectionConfiguration>())
            {
                var hasInput = conn.Inputs.Any(i => ((dynamic)i).Id == configId);
                var hasOutput = conn.Outputs.Any(o => ((dynamic)o).Id == configId);
                
                if (hasInput || hasOutput)
                {
                    connection = conn;
                    isInput = hasInput;
                    break;
                }
            }
            
            // If not found, this is a new configuration - use the current connection
            if (connection == null)
            {
                connection = connectionConfigurations?.FirstOrDefault(c => c.Id == currentConnectionId);
                if (connection == null)
                {
                    throw new InvalidOperationException($"Connection {currentConnectionId} not found");
                }
            }
            
            // Update the configuration in the connection's lists
            if (isInput)
            {
                // Remove existing input with same ID if it exists
                connection.Inputs.RemoveAll(i => ((dynamic)i).Id == configId);
                // Add the updated input
                connection.Inputs.Add(editingInputOutputConfig);
            }
            else
            {
                // Remove existing output with same ID if it exists
                connection.Outputs.RemoveAll(o => ((dynamic)o).Id == configId);
                // Add the updated output
                connection.Outputs.Add(editingInputOutputConfig);
            }
            
            // Save the entire connection configuration via ConnectionManager to update cache
            await ConnectionManager.UpdateConnectionAsync(connection);
            
            // Refresh the data and close the modal
            await LoadConnectionData();
            HideInputOutputModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving input/output configuration");
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving configuration: {ex.Message}");
        }
    }
    /*
    private async Task DeleteInputConfig(InputOutputConfiguration inputConfig)
    {
        try
        {
            // Find the connection and remove the input from its Inputs list
            var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == inputConfig.ConnectionId);
            if (connection != null)
            {
                connection.Inputs.RemoveAll(i => i is InputConfiguration input && input.Id == inputConfig.Id);
                await ConnectionManager.UpdateConnectionAsync(connection);
            }
            
            await LoadConnectionData(); // Refresh the data
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting input configuration {Id}", inputConfig.Id);
        }
    }
    
    private async Task DeleteOutputConfig(InputOutputConfiguration outputConfig)
    {
        try
        {
            // Find the connection and remove the output from its Outputs list
            var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == outputConfig.ConnectionId);
            if (connection != null)
            {
                connection.Outputs.RemoveAll(o => o is OutputConfiguration output && output.Id == outputConfig.Id);
                await ConnectionManager.UpdateConnectionAsync(connection);
            }
            
            await LoadConnectionData(); // Refresh the data
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting output configuration {Id}", outputConfig.Id);
        }
    }
*/
    // New Input/Output Modal Methods

    private async Task ToggleInputOutputConfiguration(dynamic config, bool isEnabled)
    {
        try
        {
            // Update the configuration in memory
            config.IsEnabled = isEnabled;
            
            // Find the connection that contains this input/output and update it
            string configId = config.Id;
            var connection = connectionConfigurations?.FirstOrDefault(c => 
                c.Inputs.Any(i => ((dynamic)i).Id == configId) || 
                c.Outputs.Any(o => ((dynamic)o).Id == configId));
                
            if (connection != null)
            {
                await ConnectionManager.UpdateConnectionAsync(connection);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            string configId = config.Id;
            Logger.LogError(ex, "Error toggling configuration {Id}", configId);
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating configuration: {ex.Message}");
        }
    }

    private void EditInputOutputConfiguration(dynamic config, bool isInput)
    {
        editingInputOutputConfig = config;
        isEditingInput = isInput;
        showInputOutputModal = true;
        StateHasChanged();
    }

    private async Task DeleteInputOutputConfiguration(string configId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this configuration?"))
        {
            try
            {
                // Find which connection contains this input/output configuration
                dynamic? configToDelete = null;
                ConnectionConfiguration? targetConnection = null;
                bool isInput = false;
                
                foreach (var connection in connectionConfigurations ?? new List<ConnectionConfiguration>())
                {
                    // Check inputs using dynamic to handle any input configuration type
                    var inputConfig = connection.Inputs.Cast<dynamic>().FirstOrDefault(i => (string)i.Id == configId);
                    if (inputConfig != null)
                    {
                        configToDelete = inputConfig;
                        targetConnection = connection;
                        isInput = true;
                        break;
                    }
                    
                    // Check outputs using dynamic to handle any output configuration type
                    var outputConfig = connection.Outputs.Cast<dynamic>().FirstOrDefault(o => (string)o.Id == configId);
                    if (outputConfig != null)
                    {
                        configToDelete = outputConfig;
                        targetConnection = connection;
                        isInput = false;
                        break;
                    }
                }
                
                if (configToDelete != null && targetConnection != null)
                {
                    if (isInput)
                    {
                        targetConnection.Inputs.RemoveAll(i => ((dynamic)i).Id == configId);
                    }
                    else
                    {
                        targetConnection.Outputs.RemoveAll(o => ((dynamic)o).Id == configId);
                    }
                    
                    await ConnectionManager.UpdateConnectionAsync(targetConnection);
                }
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting configuration {Id}", configId);
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting configuration: {ex.Message}");
            }
        }
    }

    // Helper method to map object properties to dictionary
    private void MapObjectToDictionary(object source, Dictionary<string, object> target)
    {
        if (source == null) return;
        
        var properties = source.GetType().GetProperties();
        foreach (var property in properties)
        {
            // Skip indexers and properties that require parameters
            if (property.CanRead && property.GetIndexParameters().Length == 0)
            {
                try
                {
                    var value = property.GetValue(source);
                    if (value != null)
                    {
                        target[property.Name] = value;
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Failed to read property {PropertyName} from {SourceType}", property.Name, source.GetType().Name);
                    // Continue with other properties
                }
            }
        }
    }

    /// <summary>
    /// Gets the connection descriptor for the current configuration being edited
    /// </summary>
    private IConnectionDescriptor? GetConnectionDescriptorForCurrentConfiguration()
    {
        // For new configurations, use the selectedConnectionType that was set in ShowInputModal/ShowOutputModal
        if (selectedConnectionType != null)
        {
            return selectedConnectionType;
        }
        
        // For existing configurations, try to find the connection
        if (editingInputOutputConfig == null) return null;
        
        // If we have currentConnectionId set, use that (preferred approach)
        if (!string.IsNullOrEmpty(currentConnectionId))
        {
            var connection = connectionConfigurations?.FirstOrDefault(c => c.Id == currentConnectionId);
            if (connection != null)
            {
                return ConnectionRegistry.GetDescriptor(connection.ConnectionType);
            }
        }
        
        // Fallback: Find which connection contains this input/output configuration
        string configId = ((dynamic)editingInputOutputConfig).Id;
        ConnectionConfiguration? foundConnection = null;
        
        foreach (var conn in connectionConfigurations ?? new List<ConnectionConfiguration>())
        {
            // Check if this configuration is in the connection's inputs or outputs
            var hasInput = conn.Inputs.Any(i => ((dynamic)i).Id == configId);
            var hasOutput = conn.Outputs.Any(o => ((dynamic)o).Id == configId);
            
            if (hasInput || hasOutput)
            {
                foundConnection = conn;
                break;
            }
        }
        
        if (foundConnection == null) return null;
        
        // FIXED: Use ConnectionRegistry instead of availableConnectionTypes
        return ConnectionRegistry.GetDescriptor(foundConnection.ConnectionType);
    }

    public void Dispose()
    {
        // Clean up timers
        statusRefreshTimer?.Dispose();
    }

    private class PropertyTypeItem
    {
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = "String";
    }
}
@page "/connection-status"
@using UNSInfra.Core.Configuration
@using UNSInfra.Core.Services
@using UNSInfra.Core.Repositories
@using UNSInfra.Services.SocketIO.Configuration
@using UNSInfra.Services.V1.Configuration
@inject IDataIngestionServiceManager ServiceManager
@inject IDataIngestionConfigurationRepository ConfigurationRepository
@inject ILogger<ConnectionStatus> Logger
@rendermode InteractiveServer

<PageTitle>Connection Status</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-activity"></i> Connection Status Dashboard
            </h1>
            <p class="text-muted mb-4">
                Real-time monitoring of all data ingestion service connections and performance metrics.
            </p>
        </div>
    </div>

    <!-- Real-time Status Monitor -->
    <div class="row mb-4">
        <div class="col-12">
            <ConnectionStatusMonitor />
        </div>
    </div>

    <!-- Performance Metrics Charts -->
    <div class="row mb-4">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-graph-up"></i> Data Points Over Time
                    </h5>
                </div>
                <div class="card-body">
                    <div id="dataPointsChart" style="height: 300px;">
                        <!-- Chart will be rendered here with JavaScript charting library -->
                        <div class="d-flex align-items-center justify-content-center h-100">
                            <div class="text-center">
                                <i class="bi bi-graph-up text-muted" style="font-size: 3rem;"></i>
                                <p class="text-muted mt-2">Charts coming soon</p>
                                <small class="text-muted">Real-time data point visualization</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-speedometer2"></i> Throughput Metrics
                    </h5>
                </div>
                <div class="card-body">
                    <div id="throughputChart" style="height: 300px;">
                        <div class="d-flex align-items-center justify-content-center h-100">
                            <div class="text-center">
                                <i class="bi bi-speedometer2 text-muted" style="font-size: 3rem;"></i>
                                <p class="text-muted mt-2">Charts coming soon</p>
                                <small class="text-muted">Real-time throughput visualization</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Connection History and Logs -->
    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-clock-history"></i> Connection History
                    </h5>
                    <div class="btn-group btn-group-sm">
                        <button class="btn btn-outline-secondary" @onclick="RefreshHistory">
                            <i class="bi bi-arrow-repeat"></i> Refresh
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="ClearHistory">
                            <i class="bi bi-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (connectionHistory == null || !connectionHistory.Any())
                    {
                        <div class="text-center p-4">
                            <i class="bi bi-clock-history text-muted" style="font-size: 2rem;"></i>
                            <p class="text-muted mt-2 mb-0">No connection history</p>
                            <small class="text-muted">Connection events will appear here</small>
                        </div>
                    }
                    else
                    {
                        <div class="timeline">
                            @foreach (var historyItem in connectionHistory.Take(50))
                            {
                                <div class="timeline-item d-flex mb-3">
                                    <div class="timeline-marker">
                                        <div class="timeline-dot @GetHistoryStatusClass(historyItem.Status)"></div>
                                    </div>
                                    <div class="timeline-content ms-3 flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <strong>@historyItem.ServiceName</strong>
                                                <span class="badge @GetStatusBadgeClass(historyItem.Status) ms-2">
                                                    @GetStatusText(historyItem.Status)
                                                </span>
                                            </div>
                                            <small class="text-muted">@historyItem.Timestamp.ToString("HH:mm:ss")</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(historyItem.Message))
                                        {
                                            <p class="text-muted small mb-0 mt-1">@historyItem.Message</p>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="bi bi-info-circle"></i> System Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-12">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Uptime:</span>
                                <span class="fw-bold">@GetUptime()</span>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Available Services:</span>
                                <span class="fw-bold">@(availableServiceTypes?.Count ?? 0)</span>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Total Configurations:</span>
                                <span class="fw-bold">@(configurations?.Count ?? 0)</span>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Active Connections:</span>
                                <span class="fw-bold">@(serviceStatuses?.Count ?? 0)</span>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="d-flex justify-content-between">
                                <span class="text-muted">Auto Mapping:</span>
                                <span class="fw-bold text-success">@GetAutoMapperEnabledCount()</span>
                            </div>
                        </div>
                    </div>

                    <hr />

                    <h6 class="mb-3">Quick Actions</h6>
                    <div class="d-grid gap-2">
                        <button class="btn btn-success btn-sm" @onclick="StartAllServices">
                            <i class="bi bi-play-circle"></i> Start All Enabled
                        </button>
                        <button class="btn btn-warning btn-sm" @onclick="RestartAllServices">
                            <i class="bi bi-arrow-clockwise"></i> Restart All
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="StopAllServices">
                            <i class="bi bi-stop-circle"></i> Stop All
                        </button>
                        <a href="/settings" class="btn btn-primary btn-sm">
                            <i class="bi bi-gear"></i> Manage Configurations
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.timeline-marker {
    position: relative;
}

.timeline-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    border: 2px solid #fff;
    box-shadow: 0 0 0 2px #dee2e6;
}

.timeline-dot.bg-success {
    background-color: #198754 !important;
    box-shadow: 0 0 0 2px #198754;
}

.timeline-dot.bg-danger {
    background-color: #dc3545 !important;
    box-shadow: 0 0 0 2px #dc3545;
}

.timeline-dot.bg-warning {
    background-color: #ffc107 !important;
    box-shadow: 0 0 0 2px #ffc107;
}

.timeline-dot.bg-secondary {
    background-color: #6c757d !important;
    box-shadow: 0 0 0 2px #6c757d;
}

.timeline-content {
    border-left: 2px solid #dee2e6;
    padding-left: 1rem;
    padding-bottom: 1rem;
}

.timeline-item:last-child .timeline-content {
    border-left: none;
}
</style>

@code {
    private Dictionary<string, ServiceStatus>? serviceStatuses;
    private List<IDataIngestionConfiguration>? configurations;
    private List<IDataIngestionServiceDescriptor>? availableServiceTypes;
    private List<ConnectionHistoryItem> connectionHistory = new();
    private DateTime startTime = DateTime.Now;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        
        // Set up timer to refresh data every 5 seconds
        refreshTimer = new Timer(async _ => await InvokeAsync(LoadData), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        
        // Subscribe to service status changes to update history
        ServiceManager.ServiceStatusChanged += OnServiceStatusChanged;
    }

    private async Task LoadData()
    {
        serviceStatuses = ServiceManager.GetServicesStatus();
        configurations = await ConfigurationRepository.GetAllConfigurationsAsync();
        availableServiceTypes = ServiceManager.GetAvailableServiceTypes();
        StateHasChanged();
    }

    private void OnServiceStatusChanged(object? sender, ServiceStatusChangedEventArgs e)
    {
        InvokeAsync(() =>
        {
            var config = configurations?.FirstOrDefault(c => c.Id == e.ConfigurationId);
            var historyItem = new ConnectionHistoryItem
            {
                Timestamp = DateTime.Now,
                ServiceName = config?.Name ?? "Unknown Service",
                Status = e.Status.Status,
                Message = e.Status.Message ?? ""
            };

            connectionHistory.Insert(0, historyItem);
            
            // Keep only last 100 items
            if (connectionHistory.Count > 100)
            {
                connectionHistory.RemoveAt(connectionHistory.Count - 1);
            }
            
            StateHasChanged();
        });
    }

    private string GetUptime()
    {
        var uptime = DateTime.Now - startTime;
        if (uptime.TotalDays >= 1)
            return $"{(int)uptime.TotalDays}d {uptime.Hours}h {uptime.Minutes}m";
        if (uptime.TotalHours >= 1)
            return $"{uptime.Hours}h {uptime.Minutes}m";
        return $"{uptime.Minutes}m {uptime.Seconds}s";
    }

    private string GetStatusBadgeClass(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "bg-success",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "bg-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Disconnected => "bg-secondary",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "bg-danger",
            UNSInfra.Core.Configuration.ConnectionStatus.Stopping => "bg-warning",
            UNSInfra.Core.Configuration.ConnectionStatus.Disabled => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetHistoryStatusClass(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "bg-success",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "bg-danger",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(UNSInfra.Core.Configuration.ConnectionStatus status)
    {
        return status switch
        {
            UNSInfra.Core.Configuration.ConnectionStatus.Connected => "Connected",
            UNSInfra.Core.Configuration.ConnectionStatus.Connecting => "Connecting",
            UNSInfra.Core.Configuration.ConnectionStatus.Disconnected => "Disconnected",
            UNSInfra.Core.Configuration.ConnectionStatus.Error => "Error",
            UNSInfra.Core.Configuration.ConnectionStatus.Stopping => "Stopping",
            UNSInfra.Core.Configuration.ConnectionStatus.Disabled => "Disabled",
            _ => "Unknown"
        };
    }

    private async Task StartAllServices()
    {
        var enabledConfigs = configurations?.Where(c => c.Enabled) ?? new List<IDataIngestionConfiguration>();
        foreach (var config in enabledConfigs)
        {
            try
            {
                await ServiceManager.StartServiceAsync(config);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to start service {ServiceName}", config.Name);
            }
        }
    }

    private async Task RestartAllServices()
    {
        var runningServices = ServiceManager.GetRunningServices();
        foreach (var serviceId in runningServices.Keys)
        {
            try
            {
                await ServiceManager.RestartServiceAsync(serviceId);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to restart service {ServiceId}", serviceId);
            }
        }
    }

    private async Task StopAllServices()
    {
        await ServiceManager.StopAllServicesAsync();
    }

    private async Task RefreshHistory()
    {
        await LoadData();
    }

    private void ClearHistory()
    {
        connectionHistory.Clear();
        StateHasChanged();
    }

    private string GetAutoMapperEnabledCount()
    {
        if (configurations == null || !configurations.Any())
            return "Auto";

        // Auto-mapping is now handled globally by SimplifiedAutoMapperService
        return "Auto";
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
        ServiceManager.ServiceStatusChanged -= OnServiceStatusChanged;
    }

    private class ConnectionHistoryItem
    {
        public DateTime Timestamp { get; set; }
        public string ServiceName { get; set; } = "";
        public UNSInfra.Core.Configuration.ConnectionStatus Status { get; set; }
        public string Message { get; set; } = "";
    }
}
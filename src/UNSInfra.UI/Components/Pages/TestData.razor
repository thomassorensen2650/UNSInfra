@page "/testdata"
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Repositories
@using UNSInfra.Storage.InMemory
@using UNSInfra.Models.Hierarchy
@using UNSInfra.Models.Data
@using System.Text.Json
@using UNSInfra.Storage.Abstractions
@inject ITopicBrowserService TopicBrowserService
@inject ITopicConfigurationRepository TopicRepository
@inject IRealtimeStorage RealtimeStorage

<PageTitle>Test Data</PageTitle>

<h3>Test Data Setup</h3>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Populate Sample Data</h5>
            </div>
            <div class="card-body">
                <button class="btn btn-primary" @onclick="PopulateSampleData">Populate Sample Data</button>
                <button class="btn btn-secondary ms-2" @onclick="ClearAllData">Clear All Data</button>
            </div>
        </div>
    </div>
    
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5>Status</h5>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <div class="alert alert-info">@StatusMessage</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string StatusMessage = "";

    private async Task PopulateSampleData()
    {
        try
        {
            StatusMessage = "Populating sample data...";

            // Create sample topic configurations
            var topics = new[]
            {
                new TopicConfiguration
                {
                    Topic = "sensors/temperature",
                    Path = new HierarchicalPath
                    {
                        Enterprise = "AcmeCorp",
                        Site = "Plant1",
                        Area = "Production",
                        WorkCenter = "LineA",
                        WorkUnit = "SensorUnit1",
                        Property = "temperature"
                    },
                    IsVerified = true,
                    IsActive = true,
                    SourceType = "MQTT",
                    CreatedBy = "Admin",
                    Description = "Temperature sensor data"
                },
                new TopicConfiguration
                {
                    Topic = "factoryA/line1/robot1/status",
                    Path = new HierarchicalPath
                    {
                        Enterprise = "factoryA",
                        Site = "line1",
                        Area = "Robotics",
                        WorkCenter = "robot1",
                        WorkUnit = "MainUnit",
                        Property = "status"
                    },
                    IsVerified = true,
                    IsActive = true,
                    SourceType = "Kafka",
                    CreatedBy = "Admin",
                    Description = "Robot status information"
                },
                new TopicConfiguration
                {
                    Topic = "sensors/pressure",
                    Path = new HierarchicalPath
                    {
                        Enterprise = "AcmeCorp",
                        Site = "Plant1",
                        Area = "Production",
                        WorkCenter = "LineA",
                        WorkUnit = "SensorUnit2",
                        Property = "pressure"
                    },
                    IsVerified = false,
                    IsActive = true,
                    SourceType = "MQTT",
                    CreatedBy = "AutoDiscovery",
                    Description = "Pressure sensor data (auto-discovered)"
                }
            };

            // Save topic configurations
            foreach (var topic in topics)
            {
                await TopicRepository.SaveTopicConfigurationAsync(topic);
            }

            // Create sample data points
            var tempData = new DataPoint
            {
                Topic = "sensors/temperature",
                Path = topics[0].Path,
                Value = JsonSerializer.SerializeToElement(new { value = 22.5, unit = "Celsius", timestamp = DateTime.UtcNow }),
                Source = "MQTT",
                Timestamp = DateTime.UtcNow
            };

            var statusData = new DataPoint
            {
                Topic = "factoryA/line1/robot1/status",
                Path = topics[1].Path,
                Value = JsonSerializer.SerializeToElement(new { status = "OK", timestamp = DateTime.UtcNow }),
                Source = "Kafka",
                Timestamp = DateTime.UtcNow
            };

            var pressureData = new DataPoint
            {
                Topic = "sensors/pressure",
                Path = topics[2].Path,
                Value = JsonSerializer.SerializeToElement(new { value = 1.02, unit = "bar", timestamp = DateTime.UtcNow }),
                Source = "MQTT",
                Timestamp = DateTime.UtcNow
            };

            // Store data points
            await RealtimeStorage.StoreAsync(tempData);
            await RealtimeStorage.StoreAsync(statusData);
            await RealtimeStorage.StoreAsync(pressureData);

            StatusMessage = $"Successfully populated {topics.Length} topics with sample data!";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task ClearAllData()
    {
        try
        {
            StatusMessage = "Clearing all data...";
            
            // Note: This is a simplified clear operation
            // In a real implementation, you'd want to clear the repositories properly
            StatusMessage = "Data cleared successfully!";
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
    }
} 
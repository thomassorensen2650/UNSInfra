@page "/liveview"
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Hierarchy
@inject ITopicBrowserService TopicBrowserService

<PageTitle>Live View</PageTitle>

<div class="row">
    <div class="col-md-6">
        <h5>Topics</h5>
        <TopicTree Topics="Topics" HighlightedPaths="HighlightedPaths" OnTopicSelected="OnTopicSelected" />
    </div>
    <div class="col-md-6">
        <h5>Payload</h5>
        @if (SelectedTopic != null && SelectedPayload != null)
        {
            <pre>@System.Text.Json.JsonSerializer.Serialize(SelectedPayload, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
        }
        else if (SelectedTopic != null)
        {
            <p class="text-muted">No payload available.</p>
        }
        else
        {
            <p class="text-muted">Select a topic to view its payload.</p>
        }
    </div>
</div>

@code {
    private List<TopicInfo> Topics = new();
    private HashSet<string> HighlightedPaths = new();
    private TopicInfo? SelectedTopic;
    private object? SelectedPayload;
    private System.Threading.Timer? HighlightTimer;
    private System.Threading.Timer? RefreshTimer;
    private readonly object _highlightLock = new();
    private bool _refreshScheduled = false;
    private DateTime _lastRefresh = DateTime.MinValue;
    private const int RefreshThrottleMs = 500; // Limit UI updates to twice per second

    protected override async Task OnInitializedAsync()
    {
        await RefreshTopics();
        TopicBrowserService.TopicDataUpdated += OnTopicDataUpdated;
        TopicBrowserService.TopicAdded += OnTopicAdded;
        
        // Set up periodic refresh timer
        RefreshTimer = new System.Threading.Timer(async _ => await ScheduleRefresh(), null, RefreshThrottleMs, RefreshThrottleMs);
    }

    private async Task RefreshTopics()
    {
        try
        {
            Topics = (await TopicBrowserService.GetLatestTopicStructureAsync()).ToList();
            _lastRefresh = DateTime.UtcNow;
        }
        catch (Exception ex)
        {
            // Log error but don't crash the UI
            Console.WriteLine($"Error refreshing topics: {ex.Message}");
        }
    }

    private void OnTopicDataUpdated(object? sender, TopicDataUpdatedEventArgs e)
    {
        // Highlight the topic and all parent paths
        var path = HierarchicalPath.FromPath(e.Topic);
        var paths = GetAllParentPaths(path);
        lock (_highlightLock)
        {
            foreach (var p in paths)
                HighlightedPaths.Add(p);
        }
        
        // Schedule a throttled UI refresh instead of immediate update
        ScheduleThrottledUpdate();
        
        // Remove highlight after 1 second
        HighlightTimer?.Dispose();
        HighlightTimer = new System.Threading.Timer(_ =>
        {
            lock (_highlightLock)
            {
                foreach (var p in paths)
                    HighlightedPaths.Remove(p);
            }
            ScheduleThrottledUpdate();
        }, null, 1000, System.Threading.Timeout.Infinite);
    }

    private void OnTopicAdded(object? sender, TopicAddedEventArgs e)
    {
        Topics.Add(e.TopicInfo);
        ScheduleThrottledUpdate();
    }

    private void ScheduleThrottledUpdate()
    {
        if (!_refreshScheduled)
        {
            _refreshScheduled = true;
            InvokeAsync(async () =>
            {
                await Task.Delay(50); // Small delay to batch multiple rapid updates
                _refreshScheduled = false;
                StateHasChanged();
            });
        }
    }

    private async Task ScheduleRefresh()
    {
        // Only refresh topics periodically if there's been significant activity
        if (DateTime.UtcNow - _lastRefresh > TimeSpan.FromSeconds(5))
        {
            await InvokeAsync(async () =>
            {
                await RefreshTopics();
                StateHasChanged();
            });
        }
    }

    private async Task OnTopicSelected(TopicInfo topic)
    {
        SelectedTopic = topic;
        var data = await TopicBrowserService.GetDataForTopicAsync(topic.Topic);
        SelectedPayload = data?.Value;
    }

    private static List<string> GetAllParentPaths(HierarchicalPath path)
    {
        var parts = new[]
        {
            path.Enterprise,
            path.Site,
            path.Area,
            path.WorkCenter,
            path.WorkUnit,
            path.Property
        };
        var result = new List<string>();
        string current = "";
        for (int i = 0; i < parts.Length; i++)
        {
            if (string.IsNullOrEmpty(parts[i])) break;
            current = string.IsNullOrEmpty(current) ? parts[i] : $"{current}/{parts[i]}";
            result.Add(current);
        }
        return result;
    }

    public void Dispose()
    {
        TopicBrowserService.TopicDataUpdated -= OnTopicDataUpdated;
        TopicBrowserService.TopicAdded -= OnTopicAdded;
        HighlightTimer?.Dispose();
        RefreshTimer?.Dispose();
    }
} 
@page "/liveview"
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Hierarchy
@inject ITopicBrowserService TopicBrowserService

<PageTitle>Live View</PageTitle>

<div class="row h-100">
    <div class="col-md-6 d-flex flex-column">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="mb-0">Topics</h5>
            @if (_isLoadingTopics)
            {
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <small class="text-muted">Updating...</small>
                </div>
            }
        </div>
        <div class="tree-container flex-grow-1">
            @if (_isInitialLoad && Topics.Count == 0)
            {
                <div class="d-flex align-items-center justify-content-center py-4">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="text-muted">Loading topics...</span>
                </div>
            }
            else
            {
                <TopicTree @ref="TopicTreeComponent" Topics="Topics" HighlightedPaths="HighlightedPaths" OnTopicSelected="OnTopicSelected" />
            }
        </div>
    </div>
    <div class="col-md-6 d-flex flex-column">
        <h5 class="mb-2">Payload</h5>
        <div class="payload-container">
            @if (SelectedTopic != null && SelectedPayload != null)
            {
                <pre class="payload-content">@System.Text.Json.JsonSerializer.Serialize(SelectedPayload, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
            }
            else if (SelectedTopic != null && SelectedPayload == null)
            {
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="text-muted">Loading payload...</span>
                </div>
            }
            else
            {
                <p class="text-muted">Select a topic to view its payload.</p>
            }
        </div>
        
        @if (SelectedTopic != null)
        {
            <div class="mt-3">
                <TopicMetadataEditor SelectedTopic="SelectedTopic" OnTopicVerified="OnTopicVerified" OnTopicUpdated="OnTopicUpdated" />
            </div>
        }
    </div>
</div>

@code {
    private List<TopicInfo> Topics = new();
    private HashSet<string> HighlightedPaths = new();
    private TopicInfo? SelectedTopic;
    private object? SelectedPayload;
    private bool _refreshScheduled = false;
    private DateTime _lastRefresh = DateTime.MinValue;
    private const int RefreshThrottleMs = 2000; // Limit UI updates to every 2 seconds for better performance
    private TopicTree? TopicTreeComponent;
    private bool _isLoadingTopics = false;
    private bool _isInitialLoad = true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTopics();
        TopicBrowserService.TopicDataUpdated += OnTopicDataUpdated;
        TopicBrowserService.TopicAdded += OnTopicAdded;
        
        // Disable periodic refresh timer - only refresh on manual edits or new topics
        // RefreshTimer = new System.Threading.Timer(async _ => await ScheduleRefresh(), null, RefreshThrottleMs, RefreshThrottleMs);
    }

    private async Task RefreshTopics()
    {
        try
        {
            // Only show loading indicator for non-initial loads (updates)
            if (!_isInitialLoad)
            {
                _isLoadingTopics = true;
                StateHasChanged(); // Show updating indicator
            }
            
            var newTopics = (await TopicBrowserService.GetLatestTopicStructureAsync()).ToList();
            
            // Update topics smoothly
            Topics = newTopics;
            _lastRefresh = DateTime.UtcNow;
            _isInitialLoad = false;
            
            if (_isLoadingTopics)
            {
                _isLoadingTopics = false;
                StateHasChanged(); // Hide updating indicator
            }
            else
            {
                StateHasChanged(); // Initial load - just show topics
            }
        }
        catch (Exception ex)
        {
            // Log error but don't crash the UI
            Console.WriteLine($"Error refreshing topics: {ex.Message}");
            _isLoadingTopics = false;
            _isInitialLoad = false;
            StateHasChanged();
        }
    }

    private void OnTopicDataUpdated(object? sender, TopicDataUpdatedEventArgs e)
    {
        // Find the topic configuration to get the correct hierarchical path
        var topicInfo = Topics.FirstOrDefault(t => t.Topic == e.Topic);
        if (topicInfo != null)
        {
            var fullPath = topicInfo.Path.GetFullPath();
            
            // Start blinking animation in the tree - this is sufficient for showing updates
            if (TopicTreeComponent != null)
            {
                _ = InvokeAsync(async () => await TopicTreeComponent.BlinkNode(fullPath));
            }
        }
        
        // Remove the persistent yellow highlighting to reduce visual noise
        // The blinking animation already shows data updates effectively
        
        // DATA UPDATES should NOT trigger topic structure refresh
        // The hierarchical paths are static and only change via manual edits
        // No need to call ScheduleThrottledUpdate() here
    }

    private void OnTopicAdded(object? sender, TopicAddedEventArgs e)
    {
        Topics.Add(e.TopicInfo);
        
        // Trigger blinking for the new topic
        var fullPath = e.TopicInfo.Path.GetFullPath();
        
        if (TopicTreeComponent != null)
        {
            _ = InvokeAsync(async () => await TopicTreeComponent.BlinkNode(fullPath));
        }
        
        ScheduleThrottledUpdate();
    }

    private void ScheduleThrottledUpdate()
    {
        if (!_refreshScheduled)
        {
            _refreshScheduled = true;
            InvokeAsync(async () =>
            {
                await Task.Delay(50); // Small delay to batch multiple rapid updates
                _refreshScheduled = false;
                StateHasChanged();
            });
        }
    }

    private async Task ScheduleRefresh()
    {
        // Only refresh topics periodically if there's been significant activity
        if (DateTime.UtcNow - _lastRefresh > TimeSpan.FromSeconds(5))
        {
            await InvokeAsync(async () =>
            {
                await RefreshTopics();
                StateHasChanged();
            });
        }
    }

    private async Task OnTopicSelected(TopicInfo topic)
    {
        // Immediately update UI to show loading state
        SelectedTopic = topic;
        SelectedPayload = null; // This triggers the loading spinner
        StateHasChanged(); // Force immediate UI update
        
        // Force the UI to render the loading state immediately
        await Task.Yield();
        
        // Fetch data asynchronously without blocking UI
        _ = Task.Run(async () =>
        {
            try
            {
                var data = await TopicBrowserService.GetDataForTopicAsync(topic.Topic);
                await InvokeAsync(() =>
                {
                    if (SelectedTopic?.Topic == topic.Topic) // Only update if still selected
                    {
                        SelectedPayload = data?.Value;
                        StateHasChanged();
                    }
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching data for topic {topic.Topic}: {ex.Message}");
                // On error, still clear the loading state
                await InvokeAsync(() =>
                {
                    if (SelectedTopic?.Topic == topic.Topic)
                    {
                        SelectedPayload = "Error loading payload";
                        StateHasChanged();
                    }
                });
            }
        });
    }

    private async Task OnTopicVerified()
    {
        // Update the current selected topic's verification status immediately
        if (SelectedTopic != null)
        {
            SelectedTopic.IsVerified = true;
            
            // Also update the topic in the Topics list used by the tree
            var topicInList = Topics.FirstOrDefault(t => t.Topic == SelectedTopic.Topic);
            if (topicInList != null)
            {
                topicInList.IsVerified = true;
            }
            
            StateHasChanged(); // Update UI immediately to show verification in tree
            
            // Force the tree to update its unverified paths immediately
            if (TopicTreeComponent != null)
            {
                TopicTreeComponent.UpdateUnverifiedPaths();
            }
            
            await Task.Yield();
        }
        
        // Also refresh the entire topics list to get the latest data from repository
        await RefreshTopics();
    }

    private async Task OnTopicUpdated()
    {
        // Force a full refresh to get the updated configuration from the repository
        // This ensures hierarchical path changes are reflected in the tree
        await RefreshTopics();
    }

    private static List<string> GetAllParentPaths(HierarchicalPath path)
    {
        var parts = new[]
        {
            path.Enterprise,
            path.Site,
            path.Area,
            path.WorkCenter,
            path.WorkUnit,
            path.Property
        };
        var result = new List<string>();
        string current = "";
        for (int i = 0; i < parts.Length; i++)
        {
            if (string.IsNullOrEmpty(parts[i])) break;
            current = string.IsNullOrEmpty(current) ? parts[i] : $"{current}/{parts[i]}";
            result.Add(current);
        }
        return result;
    }

    public void Dispose()
    {
        TopicBrowserService.TopicDataUpdated -= OnTopicDataUpdated;
        TopicBrowserService.TopicAdded -= OnTopicAdded;
    }
}

<style>
.tree-container {
    overflow-y: auto;
    max-height: calc(100vh - 200px);
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    padding: 0.75rem;
    background-color: #fff;
}

.payload-container {
    overflow-y: auto;
    max-height: calc(50vh - 100px);
    border: 1px solid #dee2e6;
    border-radius: 0.375rem;
    padding: 0.75rem;
    background-color: #f8f9fa;
    margin-bottom: 1rem;
    transition: border-color 0.15s ease-in-out;
}

.payload-container:has(.spinner-border) {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
}

.payload-content {
    margin: 0;
    background-color: transparent;
    border: none;
    padding: 0;
    white-space: pre-wrap;
    word-wrap: break-word;
    font-size: 0.875rem;
    line-height: 1.4;
}

/* Custom scrollbar styling */
.tree-container::-webkit-scrollbar,
.payload-container::-webkit-scrollbar {
    width: 8px;
}

.tree-container::-webkit-scrollbar-track,
.payload-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

.tree-container::-webkit-scrollbar-thumb,
.payload-container::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 4px;
}

.tree-container::-webkit-scrollbar-thumb:hover,
.payload-container::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
}

/* Ensure the page uses full height */
.page {
    height: 100vh;
    display: flex;
    flex-direction: column;
}

.main {
    flex: 1;
    display: flex;
    flex-direction: column;
}
</style>
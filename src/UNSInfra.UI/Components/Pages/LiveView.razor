@page "/liveview"
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Hierarchy
@inject ITopicBrowserService TopicBrowserService

<PageTitle>Live View</PageTitle>

<div class="row">
    <div class="col-md-6">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h5 class="mb-0">Topics</h5>
            @if (_isLoadingTopics)
            {
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <small class="text-muted">Updating...</small>
                </div>
            }
        </div>
        @if (_isInitialLoad && Topics.Count == 0)
        {
            <div class="d-flex align-items-center justify-content-center py-4">
                <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="text-muted">Loading topics...</span>
            </div>
        }
        else
        {
            <TopicTree @ref="TopicTreeComponent" Topics="Topics" HighlightedPaths="HighlightedPaths" OnTopicSelected="OnTopicSelected" />
        }
    </div>
    <div class="col-md-6">
        <h5>Payload</h5>
        @if (SelectedTopic != null && SelectedPayload != null)
        {
            <pre>@System.Text.Json.JsonSerializer.Serialize(SelectedPayload, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre>
        }
        else if (SelectedTopic != null && SelectedPayload == null)
        {
            <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="text-muted">Loading payload...</span>
            </div>
        }
        else
        {
            <p class="text-muted">Select a topic to view its payload.</p>
        }
    </div>
</div>

@code {
    private List<TopicInfo> Topics = new();
    private HashSet<string> HighlightedPaths = new();
    private TopicInfo? SelectedTopic;
    private object? SelectedPayload;
    private System.Threading.Timer? RefreshTimer;
    private bool _refreshScheduled = false;
    private DateTime _lastRefresh = DateTime.MinValue;
    private const int RefreshThrottleMs = 2000; // Limit UI updates to every 2 seconds for better performance
    private TopicTree? TopicTreeComponent;
    private bool _isLoadingTopics = false;
    private bool _isInitialLoad = true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTopics();
        TopicBrowserService.TopicDataUpdated += OnTopicDataUpdated;
        TopicBrowserService.TopicAdded += OnTopicAdded;
        
        // Set up periodic refresh timer
        RefreshTimer = new System.Threading.Timer(async _ => await ScheduleRefresh(), null, RefreshThrottleMs, RefreshThrottleMs);
    }

    private async Task RefreshTopics()
    {
        try
        {
            // Only show loading indicator for non-initial loads (updates)
            if (!_isInitialLoad)
            {
                _isLoadingTopics = true;
                StateHasChanged(); // Show updating indicator
            }
            
            var newTopics = (await TopicBrowserService.GetLatestTopicStructureAsync()).ToList();
            
            // Update topics smoothly
            Topics = newTopics;
            _lastRefresh = DateTime.UtcNow;
            _isInitialLoad = false;
            
            if (_isLoadingTopics)
            {
                _isLoadingTopics = false;
                StateHasChanged(); // Hide updating indicator
            }
            else
            {
                StateHasChanged(); // Initial load - just show topics
            }
        }
        catch (Exception ex)
        {
            // Log error but don't crash the UI
            Console.WriteLine($"Error refreshing topics: {ex.Message}");
            _isLoadingTopics = false;
            _isInitialLoad = false;
            StateHasChanged();
        }
    }

    private void OnTopicDataUpdated(object? sender, TopicDataUpdatedEventArgs e)
    {
        // Trigger blinking animation for the topic path (less disruptive than highlighting)
        var path = HierarchicalPath.FromPath(e.Topic);
        var fullPath = path.GetFullPath();
        
        // Start blinking animation in the tree - this is sufficient for showing updates
        if (TopicTreeComponent != null)
        {
            _ = Task.Run(async () => await TopicTreeComponent.BlinkNode(fullPath));
        }
        
        // Remove the persistent yellow highlighting to reduce visual noise
        // The blinking animation already shows data updates effectively
        
        // Schedule a throttled UI refresh
        ScheduleThrottledUpdate();
    }

    private void OnTopicAdded(object? sender, TopicAddedEventArgs e)
    {
        Topics.Add(e.TopicInfo);
        ScheduleThrottledUpdate();
    }

    private void ScheduleThrottledUpdate()
    {
        if (!_refreshScheduled)
        {
            _refreshScheduled = true;
            InvokeAsync(async () =>
            {
                await Task.Delay(50); // Small delay to batch multiple rapid updates
                _refreshScheduled = false;
                StateHasChanged();
            });
        }
    }

    private async Task ScheduleRefresh()
    {
        // Only refresh topics periodically if there's been significant activity
        if (DateTime.UtcNow - _lastRefresh > TimeSpan.FromSeconds(5))
        {
            await InvokeAsync(async () =>
            {
                await RefreshTopics();
                StateHasChanged();
            });
        }
    }

    private async Task OnTopicSelected(TopicInfo topic)
    {
        SelectedTopic = topic;
        SelectedPayload = null; // Clear immediately for faster UI response
        StateHasChanged(); // Update UI immediately
        
        // Fetch data asynchronously without blocking UI
        _ = Task.Run(async () =>
        {
            try
            {
                var data = await TopicBrowserService.GetDataForTopicAsync(topic.Topic);
                await InvokeAsync(() =>
                {
                    if (SelectedTopic?.Topic == topic.Topic) // Only update if still selected
                    {
                        SelectedPayload = data?.Value;
                        StateHasChanged();
                    }
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching data for topic {topic.Topic}: {ex.Message}");
            }
        });
    }

    private static List<string> GetAllParentPaths(HierarchicalPath path)
    {
        var parts = new[]
        {
            path.Enterprise,
            path.Site,
            path.Area,
            path.WorkCenter,
            path.WorkUnit,
            path.Property
        };
        var result = new List<string>();
        string current = "";
        for (int i = 0; i < parts.Length; i++)
        {
            if (string.IsNullOrEmpty(parts[i])) break;
            current = string.IsNullOrEmpty(current) ? parts[i] : $"{current}/{parts[i]}";
            result.Add(current);
        }
        return result;
    }

    public void Dispose()
    {
        TopicBrowserService.TopicDataUpdated -= OnTopicDataUpdated;
        TopicBrowserService.TopicAdded -= OnTopicAdded;
        RefreshTimer?.Dispose();
    }
} 
@page "/schema-validation"
@using UNSInfra.Models.Schema
@using UNSInfra.Repositories
@using UNSInfra.Validation
@using UNSInfra.Services.TopicBrowser
@using UNSInfra.Models.Data
@using System.Text.Json
@inject ISchemaRepository SchemaRepository
@inject ISchemaValidator SchemaValidator
@inject ITopicBrowserService TopicBrowserService
@inject ILogger<SchemaValidation> Logger
@implements IDisposable

<PageTitle>Schema Validation</PageTitle>

<div class="schema-validation-container">
    <div class="schema-controls">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h4 class="mb-0">
                <i class="bi bi-shield-check me-2"></i>
                Data Schema Validation
            </h4>
            <button class="btn btn-primary" @onclick="ShowCreateSchemaModal">
                <i class="bi bi-plus-circle me-1"></i>
                Create Schema
            </button>
        </div>

        <div class="row g-3 mb-4">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" class="form-control" placeholder="Search schemas..." 
                           @bind="searchTerm" @oninput="OnSearchChanged" />
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="selectedTopic" @bind:after="OnTopicFilterChanged">
                    <option value="">All Topics</option>
                    @foreach (var topic in availableTopics)
                    {
                        <option value="@topic">@topic</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <button class="btn btn-outline-secondary w-100" @onclick="RefreshSchemas">
                    <i class="bi bi-arrow-clockwise me-1"></i>
                    Refresh
                </button>
            </div>
        </div>
    </div>

    <div class="schema-content">
        @if (isLoading)
        {
            <div class="text-center py-4">
                <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                Loading schemas...
            </div>
        }
        else if (!displayedSchemas.Any())
        {
            <div class="empty-schemas-state">
                <i class="bi bi-shield-exclamation"></i>
                <div class="text-center">
                    <h5>No Schemas Found</h5>
                    <p class="mb-3">
                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <span>No schemas match your search criteria. Try adjusting your filters.</span>
                        }
                        else
                        {
                            <span>No data schemas have been created yet. Create your first schema to start validating topic data.</span>
                        }
                    </p>
                    <button class="btn btn-primary" @onclick="ShowCreateSchemaModal">
                        <i class="bi bi-plus-circle me-1"></i>
                        Create First Schema
                    </button>
                </div>
            </div>
        }
        else
        {
            <div class="schema-list">
                @foreach (var schema in displayedSchemas)
                {
                    <div class="schema-card">
                        <div class="schema-card-header">
                            <div class="schema-info">
                                <h6 class="schema-title">@schema.SchemaId</h6>
                                <div class="schema-topic">
                                    <i class="bi bi-diagram-3 me-1"></i>
                                    @schema.Topic
                                </div>
                            </div>
                            <div class="schema-actions">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowValidationTest(schema)">
                                    <i class="bi bi-check-circle"></i>
                                    Test
                                </button>
                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditSchema(schema)">
                                    <i class="bi bi-pencil"></i>
                                    Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSchema(schema)">
                                    <i class="bi bi-trash"></i>
                                    Delete
                                </button>
                            </div>
                        </div>
                        
                        <div class="schema-details">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="detail-section">
                                        <h6>Property Types</h6>
                                        @if (schema.PropertyTypes.Any())
                                        {
                                            <div class="property-types">
                                                @foreach (var prop in schema.PropertyTypes)
                                                {
                                                    <div class="property-type">
                                                        <code>@prop.Key</code>
                                                        <span class="type-badge">@prop.Value.Name</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-muted small">No property types defined</div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="detail-section">
                                        <h6>Validation Rules</h6>
                                        @if (schema.ValidationRules.Any())
                                        {
                                            <div class="validation-rules">
                                                @foreach (var rule in schema.ValidationRules)
                                                {
                                                    <div class="validation-rule">
                                                        <span class="rule-property">@rule.PropertyName</span>
                                                        <span class="rule-type badge bg-info">@rule.RuleType</span>
                                                        @if (rule.RuleValue != null)
                                                        {
                                                            <span class="rule-value small text-muted">@rule.RuleValue</span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-muted small">No validation rules defined</div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Create/Edit Schema Modal -->
@if (showSchemaModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050;">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(isEditingSchema ? "Edit Schema" : "Create New Schema")
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideSchemaModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Schema ID</label>
                                <input type="text" class="form-control" @bind="editingSchema.SchemaId" 
                                       placeholder="Enter unique schema identifier" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Topic</label>
                                <input type="text" class="form-control" @bind="editingSchema.Topic" 
                                       placeholder="Enter topic name or pattern" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">JSON Schema</label>
                                <textarea class="form-control" rows="8" @bind="editingSchema.JsonSchema" 
                                          placeholder="Enter JSON schema definition"></textarea>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label class="form-label mb-0">Property Types</label>
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddPropertyType">
                                        <i class="bi bi-plus"></i> Add
                                    </button>
                                </div>
                                <div class="property-types-editor">
                                    @for (int i = 0; i < editingPropertyTypes.Count; i++)
                                    {
                                        var index = i;
                                        <div class="property-type-row">
                                            <div class="row g-2">
                                                <div class="col-5">
                                                    <input type="text" class="form-control form-control-sm" 
                                                           @bind="editingPropertyTypes[index].Key" placeholder="Property name" />
                                                </div>
                                                <div class="col-5">
                                                    <select class="form-select form-select-sm" @bind="editingPropertyTypes[index].Value">
                                                        <option value="String">String</option>
                                                        <option value="Int32">Integer</option>
                                                        <option value="Double">Number</option>
                                                        <option value="Boolean">Boolean</option>
                                                    </select>
                                                </div>
                                                <div class="col-2">
                                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemovePropertyType(index)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <label class="form-label mb-0">Validation Rules</label>
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddValidationRule">
                                        <i class="bi bi-plus"></i> Add
                                    </button>
                                </div>
                                <div class="validation-rules-editor">
                                    @for (int i = 0; i < editingValidationRules.Count; i++)
                                    {
                                        var index = i;
                                        <div class="validation-rule-row">
                                            <div class="row g-2 mb-2">
                                                <div class="col-4">
                                                    <input type="text" class="form-control form-control-sm" 
                                                           @bind="editingValidationRules[index].PropertyName" placeholder="Property" />
                                                </div>
                                                <div class="col-4">
                                                    <select class="form-select form-select-sm" @bind="editingValidationRules[index].RuleType">
                                                        <option value="Required">Required</option>
                                                        <option value="Range">Range</option>
                                                        <option value="Pattern">Pattern</option>
                                                        <option value="MinLength">Min Length</option>
                                                        <option value="MaxLength">Max Length</option>
                                                    </select>
                                                </div>
                                                <div class="col-3">
                                                    <input type="text" class="form-control form-control-sm" 
                                                           @bind="editingValidationRuleValues[index]" placeholder="Value" />
                                                </div>
                                                <div class="col-1">
                                                    <button type="button" class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => RemoveValidationRule(index)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideSchemaModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveSchema">
                        @(isEditingSchema ? "Update Schema" : "Create Schema")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Validation Test Modal -->
@if (showValidationModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050;">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Test Schema Validation</h5>
                    <button type="button" class="btn-close" @onclick="HideValidationModal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedValidationSchema != null)
                    {
                        <div class="mb-3">
                            <h6>Schema: @selectedValidationSchema.SchemaId</h6>
                            <p class="text-muted small">Topic: @selectedValidationSchema.Topic</p>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Test Data (JSON)</label>
                            <textarea class="form-control" rows="8" @bind="testJsonData" 
                                      placeholder="Enter JSON data to validate"></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <button class="btn btn-primary" @onclick="RunValidationTest" disabled="@isValidating">
                                @if (isValidating)
                                {
                                    <div class="spinner-border spinner-border-sm me-1" role="status">
                                        <span class="visually-hidden">Validating...</span>
                                    </div>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle me-1"></i>
                                }
                                Validate
                            </button>
                        </div>
                        
                        @if (validationResult != null)
                        {
                            <div class="validation-result">
                                <div class="alert @(validationResult.IsValid ? "alert-success" : "alert-danger")">
                                    <div class="d-flex align-items-center">
                                        <i class="bi @(validationResult.IsValid ? "bi-check-circle-fill" : "bi-exclamation-triangle-fill") me-2"></i>
                                        <strong>
                                            @(validationResult.IsValid ? "Validation Passed" : "Validation Failed")
                                        </strong>
                                    </div>
                                    @if (!validationResult.IsValid && validationResult.Errors.Any())
                                    {
                                        <hr class="my-2">
                                        <ul class="mb-0">
                                            @foreach (var error in validationResult.Errors)
                                            {
                                                <li>@error</li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideValidationModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<DataSchema> allSchemas = new();
    private List<DataSchema> displayedSchemas = new();
    private List<string> availableTopics = new();
    private string searchTerm = string.Empty;
    private string selectedTopic = string.Empty;
    private bool isLoading = false;

    // Schema editing
    private bool showSchemaModal = false;
    private bool isEditingSchema = false;
    private DataSchema editingSchema = new();
    private List<PropertyTypeItem> editingPropertyTypes = new();
    private List<ValidationRule> editingValidationRules = new();
    private List<string> editingValidationRuleValues = new();

    // Validation testing
    private bool showValidationModal = false;
    private DataSchema? selectedValidationSchema;
    private string testJsonData = string.Empty;
    private bool isValidating = false;
    private ValidationResult? validationResult;

    protected override async Task OnInitializedAsync()
    {
        await RefreshSchemas();
        await LoadAvailableTopics();
    }

    private async Task RefreshSchemas()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            allSchemas = (await SchemaRepository.GetAllSchemasAsync()).ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading schemas");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableTopics()
    {
        try
        {
            var topics = await TopicBrowserService.GetLatestTopicStructureAsync();
            availableTopics = topics.Select(t => t.Topic).Distinct().OrderBy(t => t).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available topics");
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void OnTopicFilterChanged()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        displayedSchemas = allSchemas.Where(schema =>
        {
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var lowerSearch = searchTerm.ToLowerInvariant();
                if (!schema.SchemaId.ToLowerInvariant().Contains(lowerSearch) &&
                    !schema.Topic.ToLowerInvariant().Contains(lowerSearch))
                {
                    return false;
                }
            }

            if (!string.IsNullOrWhiteSpace(selectedTopic))
            {
                if (!schema.Topic.Equals(selectedTopic, StringComparison.OrdinalIgnoreCase))
                {
                    return false;
                }
            }

            return true;
        }).ToList();

        StateHasChanged();
    }

    // Schema CRUD operations
    private void ShowCreateSchemaModal()
    {
        isEditingSchema = false;
        editingSchema = new DataSchema();
        editingPropertyTypes = new List<PropertyTypeItem>();
        editingValidationRules = new List<ValidationRule>();
        editingValidationRuleValues = new List<string>();
        showSchemaModal = true;
        StateHasChanged();
    }

    private void EditSchema(DataSchema schema)
    {
        isEditingSchema = true;
        editingSchema = new DataSchema
        {
            SchemaId = schema.SchemaId,
            Topic = schema.Topic,
            JsonSchema = schema.JsonSchema,
            PropertyTypes = new Dictionary<string, Type>(schema.PropertyTypes),
            ValidationRules = schema.ValidationRules.Select(r => new ValidationRule
            {
                PropertyName = r.PropertyName,
                RuleType = r.RuleType,
                RuleValue = r.RuleValue
            }).ToList()
        };

        editingPropertyTypes = schema.PropertyTypes.Select(pt => new PropertyTypeItem
        {
            Key = pt.Key,
            Value = pt.Value.Name
        }).ToList();

        editingValidationRules = editingSchema.ValidationRules.ToList();
        editingValidationRuleValues = editingValidationRules.Select(r => r.RuleValue?.ToString() ?? "").ToList();

        showSchemaModal = true;
        StateHasChanged();
    }

    private async Task SaveSchema()
    {
        try
        {
            // Update property types
            editingSchema.PropertyTypes.Clear();
            foreach (var pt in editingPropertyTypes.Where(pt => !string.IsNullOrWhiteSpace(pt.Key)))
            {
                var type = pt.Value switch
                {
                    "String" => typeof(string),
                    "Int32" => typeof(int),
                    "Double" => typeof(double),
                    "Boolean" => typeof(bool),
                    _ => typeof(string)
                };
                editingSchema.PropertyTypes[pt.Key] = type;
            }

            // Update validation rules
            editingSchema.ValidationRules.Clear();
            for (int i = 0; i < editingValidationRules.Count; i++)
            {
                if (!string.IsNullOrWhiteSpace(editingValidationRules[i].PropertyName))
                {
                    var rule = editingValidationRules[i];
                    if (i < editingValidationRuleValues.Count && !string.IsNullOrWhiteSpace(editingValidationRuleValues[i]))
                    {
                        rule.RuleValue = ParseRuleValue(rule.RuleType, editingValidationRuleValues[i]);
                    }
                    editingSchema.ValidationRules.Add(rule);
                }
            }

            await SchemaRepository.SaveSchemaAsync(editingSchema);
            await RefreshSchemas();
            HideSchemaModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving schema");
        }
    }

    private object ParseRuleValue(string ruleType, string value)
    {
        return ruleType switch
        {
            "Range" => value.Split(',').Select(v => double.Parse(v.Trim())).ToArray(),
            "MinLength" or "MaxLength" => int.Parse(value),
            _ => value
        };
    }

    private async Task DeleteSchema(DataSchema schema)
    {
        // Note: ISchemaRepository doesn't have a delete method in the current implementation
        // This would need to be added to the interface and implementations
        Logger.LogInformation("Delete functionality not implemented yet for schema: {SchemaId}", schema.SchemaId);
    }

    private void HideSchemaModal()
    {
        showSchemaModal = false;
        StateHasChanged();
    }

    // Property types and validation rules management
    private void AddPropertyType()
    {
        editingPropertyTypes.Add(new PropertyTypeItem { Key = "", Value = "String" });
        StateHasChanged();
    }

    private void RemovePropertyType(int index)
    {
        if (index >= 0 && index < editingPropertyTypes.Count)
        {
            editingPropertyTypes.RemoveAt(index);
            StateHasChanged();
        }
    }

    private void AddValidationRule()
    {
        editingValidationRules.Add(new ValidationRule { PropertyName = "", RuleType = "Required" });
        editingValidationRuleValues.Add("");
        StateHasChanged();
    }

    private void RemoveValidationRule(int index)
    {
        if (index >= 0 && index < editingValidationRules.Count)
        {
            editingValidationRules.RemoveAt(index);
            if (index < editingValidationRuleValues.Count)
            {
                editingValidationRuleValues.RemoveAt(index);
            }
            StateHasChanged();
        }
    }

    // Validation testing
    private void ShowValidationTest(DataSchema schema)
    {
        selectedValidationSchema = schema;
        testJsonData = "{\n  \"example\": \"value\",\n  \"number\": 42\n}";
        validationResult = null;
        showValidationModal = true;
        StateHasChanged();
    }

    private async Task RunValidationTest()
    {
        if (selectedValidationSchema == null || string.IsNullOrWhiteSpace(testJsonData))
            return;

        isValidating = true;
        validationResult = null;
        StateHasChanged();

        try
        {
            var jsonElement = JsonSerializer.Deserialize<JsonElement>(testJsonData);
            var testDataPoint = new DataPoint
            {
                Topic = selectedValidationSchema.Topic,
                Value = jsonElement,
                Timestamp = DateTime.UtcNow,
                Source = "ValidationTest"
            };

            validationResult = await SchemaValidator.ValidateWithDetailsAsync(testDataPoint, selectedValidationSchema);
        }
        catch (JsonException ex)
        {
            validationResult = new ValidationResult
            {
                IsValid = false,
                Errors = new List<string> { $"Invalid JSON: {ex.Message}" }
            };
        }
        catch (Exception ex)
        {
            validationResult = new ValidationResult
            {
                IsValid = false,
                Errors = new List<string> { $"Validation error: {ex.Message}" }
            };
            Logger.LogError(ex, "Error during validation test");
        }
        finally
        {
            isValidating = false;
            StateHasChanged();
        }
    }

    private void HideValidationModal()
    {
        showValidationModal = false;
        selectedValidationSchema = null;
        StateHasChanged();
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    private class PropertyTypeItem
    {
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = "String";
    }
}
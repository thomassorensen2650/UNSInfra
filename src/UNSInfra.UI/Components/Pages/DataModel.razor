@page "/data-model"
@using UNSInfra.Storage.Abstractions
@inject ITopicBrowserService TopicBrowserService
@inject IHistoricalStorage HistoricalStorage
@inject ILogger<DataModel> Logger
@implements IDisposable

<PageTitle>Data Model</PageTitle>

<div class="liveview-container">
    <!-- Topics section now on the right -->
    <div class="topics-section">
        @if (_isLoadingTopics)
        {
            <div class="d-flex justify-content-end align-items-center mb-2">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <small class="text-muted">Updating...</small>
                </div>
            </div>
        }
        <div class="tree-container">
            @if (_isInitialLoad && Topics.Count == 0)
            {
                <div class="d-flex align-items-center justify-content-center py-4">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span class="text-muted">Loading topics...</span>
                </div>
            }
            else
            {
                <TopicTree @ref="TopicTreeComponent" Topics="Topics" HighlightedPaths="HighlightedPaths" OnTopicSelected="OnTopicSelected" OnAddDataToNamespace="OnAddDataToNamespace"/>
            }
        </div>
    </div>
    <!-- Payload section now on the left -->
    <div class="payload-section">
        @if (SelectedTopic != null)
        {
            <div class="topic-details-tabs">
                <!-- Tab Navigation -->
                <ul class="nav nav-tabs" id="topicDetailTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeDetailTab == "meta" ? "active" : "")" id="meta-tab" type="button" role="tab"
                                @onclick="@(() => SetActiveDetailTab("meta"))">
                            <i class="bi bi-tags me-1"></i> Meta
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeDetailTab == "data" ? "active" : "")" id="data-tab" type="button" role="tab"
                                @onclick="@(() => SetActiveDetailTab("data"))">
                            <i class="bi bi-code-square me-1"></i> Data
                        </button>
                    </li>
                    @if (!string.IsNullOrEmpty(SelectedTopic.NSPath))
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(activeDetailTab == "history" ? "active" : "")" id="history-tab" type="button" role="tab"
                                    @onclick="@(() => SetActiveDetailTab("history"))">
                                <i class="bi bi-clock-history me-1"></i> History
                            </button>
                        </li>
                    }
                </ul>

                <!-- Tab Content -->
                <div class="tab-content topic-detail-content">
                    <!-- Meta Tab -->
                    <div class="tab-pane @(activeDetailTab == "meta" ? "show active" : "")" id="meta-pane" role="tabpanel">
                        <div class="metadata-container">
                            <TopicMetadataEditor SelectedTopic="SelectedTopic" OnTopicUpdated="OnTopicUpdated"/>
                        </div>
                    </div>

                    <!-- Data Tab -->
                    <div class="tab-pane @(activeDetailTab == "data" ? "show active" : "")" id="data-pane" role="tabpanel">
                        <div class="payload-container">
                            @if (SelectedPayload != null)
                            {
                                <!--<pre class="payload-content">@System.Text.Json.JsonSerializer.Serialize(SelectedPayload, new System.Text.Json.JsonSerializerOptions { WriteIndented = true })</pre> -->
                                <pre class="payload-content">@SelectedPayload</pre>

                            }
                            else
                            {
                                <div class="d-flex align-items-center">
                                    <div class="spinner-border spinner-border-sm me-2" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <span class="text-muted">Loading payload...</span>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- History Tab -->
                    @if (!string.IsNullOrEmpty(SelectedTopic.NSPath))
                    {
                        <div class="tab-pane @(activeDetailTab == "history" ? "show active" : "")" id="history-pane" role="tabpanel">
                            <div class="history-container">
                                <div class="history-controls mb-3">
                                    <div class="row g-2">
                                        <div class="col-md-3">
                                            <label class="form-label small">Query Type</label>
                                            <select class="form-select form-select-sm" @bind="historyQueryType" @bind:after="OnHistoryQueryTypeChanged">
                                                <option value="timeRange">Time Range</option>
                                                <option value="lastValues">Last X Values</option>
                                            </select>
                                        </div>
                                        @if (historyQueryType == "timeRange")
                                        {
                                            <div class="col-md-3">
                                                <label class="form-label small">Start Date</label>
                                                <input type="datetime-local" class="form-control form-control-sm" @bind="historyStartDate"/>
                                            </div>
                                            <div class="col-md-3">
                                                <label class="form-label small">End Date</label>
                                                <input type="datetime-local" class="form-control form-control-sm" @bind="historyEndDate"/>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-md-3">
                                                <label class="form-label small">Number of Values</label>
                                                <input type="number" class="form-control form-control-sm" @bind="historyValueCount" min="1" max="1000" placeholder="100"/>
                                            </div>
                                        }
                                        <div class="col-md-3 d-flex align-items-end">
                                            <button class="btn btn-primary btn-sm" @onclick="LoadHistoricalData" disabled="@_isLoadingHistory">
                                                @if (_isLoadingHistory)
                                                {
                                                    <div class="spinner-border spinner-border-sm me-1" role="status">
                                                        <span class="visually-hidden">Loading...</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-search me-1"></i>
                                                }
                                                Query
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <div class="history-results">
                                    @if (_isLoadingHistory)
                                    {
                                        <div class="text-center py-4">
                                            <div class="spinner-border" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                            <p class="text-muted mt-2">Loading historical data...</p>
                                        </div>
                                    }
                                    else if (historicalData?.Any() == true)
                                    {
                                        <div class="table-responsive">
                                            <table class="table table-sm table-striped">
                                                <thead>
                                                <tr>
                                                    <th>Timestamp</th>
                                                    <th>Value</th>
                                                    <th>Source</th>
                                                </tr>
                                                </thead>
                                                <tbody>
                                                @foreach (var dataPoint in historicalData.OrderByDescending(d => d.Timestamp))
                                                {
                                                    <tr>
                                                        <td>@dataPoint.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                        <td>
                                                            <code class="small">@System.Text.Json.JsonSerializer.Serialize(dataPoint.Value, new System.Text.Json.JsonSerializerOptions { WriteIndented = false })</code>
                                                        </td>
                                                        <td>
                                                            <span class="badge bg-info">@dataPoint.Source</span>
                                                        </td>
                                                    </tr>
                                                }
                                                </tbody>
                                            </table>
                                        </div>
                                        <div class="mt-2">
                                            <small class="text-muted">Showing @historicalData.Count records</small>
                                        </div>
                                    }
                                    else if (historicalData != null)
                                    {
                                        <div class="text-center py-4 text-muted">
                                            <i class="bi bi-database" style="font-size: 2rem;"></i>
                                            <p class="mt-2 mb-2"><strong>No historical data found</strong></p>
                                            <p class="mb-2">No data was found for the specified time range.</p>
                                            <small class="text-muted">
                                                Try expanding your time range or check if historical data storage is enabled and collecting data for this topic.
                                            </small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-center py-4 text-muted">
                                            <i class="bi bi-clock-history" style="font-size: 2rem;"></i>
                                            <p class="mt-2 mb-2">Ready to query historical data</p>
                                            <small class="text-muted">
                                                Select your query type and time range above, then click "Query" to load historical data for this topic.
                                            </small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="empty-payload-state">
                <i class="bi bi-diagram-3"></i>
                <div class="text-center">
                    <h5>No Topic Selected</h5>
                    <p class="mb-0">Select a topic from the tree on the right to view its metadata, data, and history.</p>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add Data to Namespace Modal -->
@if (showAddDataModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1050;">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Data to Namespace: @selectedNamespacePath</h5>
                    <button type="button" class="btn-close" @onclick="HideAddDataModal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted mb-3">Select topics and folders from unverified data to add to this namespace:</p>
                    
                    <TopicSelectionTree RootNodes="topicTreeNodes" 
                                       SelectedTopics="selectedTopicsForNamespace" 
                                       OnSelectionChanged="OnTopicSelectionChanged" />
                    
                    @if (selectedTopicsForNamespace.Any())
                    {
                        <div class="mt-3">
                            <small class="text-success">
                                <i class="bi bi-check-circle me-1"></i>
                                @selectedTopicsForNamespace.Count topic(s) selected
                            </small>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddDataModal">Cancel</button>
                    <button type="button" class="btn btn-success" @onclick="AddSelectedTopicsToNamespace" 
                            disabled="@(!selectedTopicsForNamespace.Any())">
                        Add @selectedTopicsForNamespace.Count Topic(s)
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<TopicInfo> Topics = new();
    private HashSet<string> HighlightedPaths = new();
    private TopicInfo? SelectedTopic;
    private object? SelectedPayload;
    private bool _refreshScheduled = false;
    private DateTime _lastRefresh = DateTime.MinValue;
    private const int RefreshThrottleMs = 2000; // Limit UI updates to every 2 seconds for better performance
    private TopicTree? TopicTreeComponent;
    private bool _isLoadingTopics = false;
    private bool _isInitialLoad = true;
    
    // Add Data to Namespace functionality
    private bool showAddDataModal = false;
    private string selectedNamespacePath = "";
    
    // Topic Detail Tabs
    private string activeDetailTab = "meta";
    
    // Historical Data functionality
    private string historyQueryType = "timeRange";
    private DateTime historyStartDate = DateTime.Today.AddDays(-1);
    private DateTime historyEndDate = DateTime.Now;
    private int historyValueCount = 100;
    private bool _isLoadingHistory = false;
    private List<DataPoint>? historicalData;
    private List<TopicInfo>? availableTopicsForNamespace;
    private HashSet<TopicInfo> selectedTopicsForNamespace = new();
    private List<TopicSelectionTree.TopicSelectionTreeNode>? topicTreeNodes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await RefreshTopics();
            TopicBrowserService.TopicDataUpdated += OnTopicDataUpdated;
            TopicBrowserService.TopicAdded += OnTopicAdded;
            
            // Enable periodic refresh timer for real-time data updates (less aggressive)
            _ = Task.Run(async () =>
            {
                var refreshCount = 0;
                while (true)
                {
                    await Task.Delay(RefreshThrottleMs);
                    refreshCount++;
                    
                    // Only refresh every 3rd cycle to reduce SignalR load
                    if (refreshCount % 3 == 0)
                    {
                        await ScheduleRefresh();
                    }
                }
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing DataModel");
            _isInitialLoad = false;
            StateHasChanged();
        }
        
    }


    private async Task RefreshTopics()
    {
        try
        {
            // Only show loading indicator for non-initial loads (updates)
            if (!_isInitialLoad)
            {
                _isLoadingTopics = true;
                StateHasChanged(); // Show updating indicator
            }
            
            var newTopics = (await TopicBrowserService.GetLatestTopicStructureAsync()).ToList();
            
            // Update topics smoothly
            Topics = newTopics;
            _lastRefresh = DateTime.UtcNow;
            _isInitialLoad = false;
            
            if (_isLoadingTopics)
            {
                _isLoadingTopics = false;
                StateHasChanged(); // Hide updating indicator
            }
            else
            {
                StateHasChanged(); // Initial load - just show topics
            }
        }
        catch (Exception ex)
        {
            // Log error but don't crash the UI
            Logger.LogError(ex, "Error refreshing topics");
            _isLoadingTopics = false;
            _isInitialLoad = false;
            StateHasChanged();
        }
    }

    private void OnTopicDataUpdated(object? sender, TopicDataUpdatedEventArgs e)
    {
        // Find the topic configuration to get the correct path for blinking
        var topicInfo = Topics.FirstOrDefault(t => t.Topic == e.Topic);
        if (topicInfo != null)
        {
            string fullPath;
            
            // Use different path structure based on UNS assignment
            if (!string.IsNullOrEmpty(topicInfo.NSPath))
            {
                // For UNS-assigned topics, use the NSPath
                fullPath = topicInfo.NSPath;
            }
            else
            {
                // For unassigned topics, use the raw topic path under data browser section
                const string dataBrowserSectionName = "📊 Data Browser";
                fullPath = $"{dataBrowserSectionName}/{topicInfo.SourceType}/{topicInfo.Topic}";
            }
            
            // Start blinking animation in the tree - this is sufficient for showing updates
            if (TopicTreeComponent != null)
            {
                _ = InvokeAsync(() => TopicTreeComponent.BlinkNode(fullPath));
            }
        }
        
        // Remove the persistent yellow highlighting to reduce visual noise
        // The blinking animation already shows data updates effectively
        
        // DATA UPDATES should NOT trigger topic structure refresh
        // The hierarchical paths are static and only change via manual edits
        // No need to call ScheduleThrottledUpdate() here
    }

    private void OnTopicAdded(object? sender, TopicAddedEventArgs e)
    {
        Topics.Add(e.TopicInfo);
        
        // Trigger blinking for the new topic
        string fullPath;
        
        // Use different path structure based on UNS assignment
        if (!string.IsNullOrEmpty(e.TopicInfo.NSPath))
        {
            // For UNS-assigned topics, use the NSPath
            fullPath = e.TopicInfo.NSPath;
        }
        else
        {
            // For unassigned topics, use the raw topic path under data browser section
            const string dataBrowserSectionName = "📊 Data Browser";
            fullPath = $"{dataBrowserSectionName}/{e.TopicInfo.Topic}";
        }
        
        if (TopicTreeComponent != null)
        {
            _ = InvokeAsync(() => TopicTreeComponent.BlinkNode(fullPath));
        }
        
        ScheduleThrottledUpdate();
    }

    private void ScheduleThrottledUpdate()
    {
        if (!_refreshScheduled)
        {
            _refreshScheduled = true;
            InvokeAsync(async () =>
            {
                await Task.Delay(50); // Small delay to batch multiple rapid updates
                _refreshScheduled = false;
                StateHasChanged();
            });
        }
    }

    private async Task ScheduleRefresh()
    {
        // Only refresh topics periodically if there's been significant activity
        if (DateTime.UtcNow - _lastRefresh > TimeSpan.FromSeconds(5))
        {
            await InvokeAsync(async () =>
            {
                await RefreshTopics();
                StateHasChanged();
            });
        }
    }

    private async Task OnTopicSelected(TopicInfo topic)
    {
        // Immediately update UI to show loading state
        SelectedTopic = topic;
        SelectedPayload = null; // This triggers the loading spinner
        StateHasChanged(); // Force immediate UI update
        
        try
        {
            // Since we're using EventDrivenTopicBrowserService with in-memory cache,
            // this should be fast. No need for Task.Run.
            var data = await TopicBrowserService.GetDataForTopicAsync(topic.Topic);
            
            // Only update if still selected (user didn't click another topic)
            if (SelectedTopic?.Topic == topic.Topic)
            {
                SelectedPayload = data?.Value ?? "No data available";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // On error, still clear the loading state
            if (SelectedTopic?.Topic == topic.Topic)
            {
                SelectedPayload = $"Error loading payload: {ex.Message}";
                StateHasChanged();
            }
        }
    }


    private async Task OnTopicUpdated()
    {
        // Force a full refresh to get the updated configuration from the repository
        // This ensures hierarchical path changes are reflected in the tree
        await RefreshTopics();
    }

    private async Task OnAddDataToNamespace((string namespacePath, List<TopicInfo> topics) args)
    {
        selectedNamespacePath = args.namespacePath;
        availableTopicsForNamespace = args.topics;
        selectedTopicsForNamespace.Clear();
        
        // Build tree structure from unverified topics
        BuildTopicSelectionTree();
        
        showAddDataModal = true;
        StateHasChanged();
    }

    private void HideAddDataModal()
    {
        showAddDataModal = false;
        selectedTopicsForNamespace.Clear();
        StateHasChanged();
    }

    private async Task OnTopicSelectionChanged(HashSet<TopicInfo> selectedTopics)
    {
        selectedTopicsForNamespace = selectedTopics;
        StateHasChanged();
    }
    
    private void BuildTopicSelectionTree()
    {
        if (availableTopicsForNamespace == null || !availableTopicsForNamespace.Any())
        {
            topicTreeNodes = new List<TopicSelectionTree.TopicSelectionTreeNode>();
            return;
        }
        
        var nodeDict = new Dictionary<string, TopicSelectionTree.TopicSelectionTreeNode>();
        var rootNodes = new List<TopicSelectionTree.TopicSelectionTreeNode>();
        
        // Group topics by source type first
        var topicsBySourceType = availableTopicsForNamespace.GroupBy(t => t.SourceType).ToList();
        
        foreach (var sourceGroup in topicsBySourceType)
        {
            var sourceType = sourceGroup.Key;
            var sourceNode = new TopicSelectionTree.TopicSelectionTreeNode
            {
                Name = sourceType,
                FullPath = sourceType,
                IsFolder = true,
                Children = new List<TopicSelectionTree.TopicSelectionTreeNode>()
            };
            
            rootNodes.Add(sourceNode);
            nodeDict[sourceType] = sourceNode;
            
            // Build folder structure for each topic within this source type
            foreach (var topic in sourceGroup)
            {
                var topicParts = topic.Topic.Split('/', StringSplitOptions.RemoveEmptyEntries);
                
                if (topicParts.Length == 1)
                {
                    // Simple topic - add directly to source node
                    var topicNode = new TopicSelectionTree.TopicSelectionTreeNode
                    {
                        Name = topic.Topic,
                        FullPath = $"{sourceType}/{topic.Topic}",
                        IsFolder = false,
                        Topic = topic
                    };
                    sourceNode.Children.Add(topicNode);
                }
                else
                {
                    // Nested topic - build folder structure
                    string currentPath = sourceType;
                    var currentParent = sourceNode;
                    
                    for (int i = 0; i < topicParts.Length; i++)
                    {
                        var part = topicParts[i];
                        var partPath = $"{currentPath}/{part}";
                        
                        if (i == topicParts.Length - 1)
                        {
                            // This is the final part - create topic node
                            var topicNode = new TopicSelectionTree.TopicSelectionTreeNode
                            {
                                Name = part,
                                FullPath = partPath,
                                IsFolder = false,
                                Topic = topic
                            };
                            currentParent.Children.Add(topicNode);
                        }
                        else
                        {
                            // This is a folder - create or reuse folder node
                            if (!nodeDict.TryGetValue(partPath, out var folderNode))
                            {
                                folderNode = new TopicSelectionTree.TopicSelectionTreeNode
                                {
                                    Name = part,
                                    FullPath = partPath,
                                    IsFolder = true,
                                    Children = new List<TopicSelectionTree.TopicSelectionTreeNode>()
                                };
                                currentParent.Children.Add(folderNode);
                                nodeDict[partPath] = folderNode;
                            }
                            
                            currentParent = folderNode;
                            currentPath = partPath;
                        }
                    }
                }
            }
        }
        
        topicTreeNodes = rootNodes;
    }

    private async Task AddSelectedTopicsToNamespace()
    {
        try
        {
            Logger.LogInformation("Adding {TopicCount} topics to namespace: {NamespacePath}", selectedTopicsForNamespace.Count, selectedNamespacePath);
            
            foreach (var topic in selectedTopicsForNamespace)
            {
                Logger.LogDebug("Processing topic: {Topic} from {SourceType}", topic.Topic, topic.SourceType);
                
                // Get the current topic configuration
                var currentConfig = await TopicBrowserService.GetTopicConfigurationAsync(topic.Topic);
                if (currentConfig != null)
                {
                    // Update the configuration to map to the namespace
                    currentConfig.NSPath = selectedNamespacePath;
                    currentConfig.IsVerified = true;
                    currentConfig.ModifiedAt = DateTime.UtcNow;
                    
                    // Add metadata about the namespace assignment
                    currentConfig.Metadata["assigned_to_namespace"] = selectedNamespacePath;
                    currentConfig.Metadata["assigned_at"] = DateTime.UtcNow.ToString("O");
                    currentConfig.Metadata["assigned_by"] = "user";
                    
                    // Update the topic configuration
                    await TopicBrowserService.UpdateTopicConfigurationAsync(currentConfig);
                    
                    Logger.LogDebug("Successfully updated topic configuration for {Topic}", topic.Topic);
                }
                else
                {
                    Logger.LogWarning("Could not find topic configuration for {Topic}", topic.Topic);
                }
            }
            
            HideAddDataModal();
            
            // Refresh the topics to show the changes
            await RefreshTopics();
            
            Logger.LogInformation("Successfully added {TopicCount} topics to namespace: {NamespacePath}", selectedTopicsForNamespace.Count, selectedNamespacePath);
            
            // Force the NS tree editor to refresh by triggering a small delay and manual refresh
            await Task.Delay(500); // Give the database time to update
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding topics to namespace");
        }
    }


    // Tab Management Methods
    private void SetActiveDetailTab(string tabName)
    {
        activeDetailTab = tabName;
        
        // Clear historical data when switching away from history tab
        if (tabName != "history")
        {
            historicalData = null;
        }
        
        StateHasChanged();
    }

    // Historical Data Methods
    private void OnHistoryQueryTypeChanged()
    {
        historicalData = null; // Clear previous results
        StateHasChanged();
    }

    private async Task LoadHistoricalData()
    {
        if (SelectedTopic == null || string.IsNullOrEmpty(SelectedTopic.NSPath))
            return;

        _isLoadingHistory = true;
        historicalData = null;
        StateHasChanged();

        try
        {
            IEnumerable<DataPoint> results;

            if (historyQueryType == "timeRange")
            {
                // Query by time range
                results = await HistoricalStorage.GetHistoryAsync(SelectedTopic.Topic, historyStartDate, historyEndDate);
            }
            else
            {
                // Query last X values - simulate by getting recent data and taking top X
                var endTime = DateTime.Now;
                var startTime = endTime.AddDays(-30); // Get last 30 days and then limit results
                var allResults = await HistoricalStorage.GetHistoryAsync(SelectedTopic.Topic, startTime, endTime);
                results = allResults.OrderByDescending(d => d.Timestamp).Take(historyValueCount);
            }

            historicalData = results.ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading historical data");
            historicalData = new List<DataPoint>(); // Empty list to show "no data found"
        }
        finally
        {
            _isLoadingHistory = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        TopicBrowserService.TopicDataUpdated -= OnTopicDataUpdated;
        TopicBrowserService.TopicAdded -= OnTopicAdded;
    }
}


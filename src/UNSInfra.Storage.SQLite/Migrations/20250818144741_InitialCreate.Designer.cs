// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UNSInfra.Storage.SQLite;

#nullable disable

namespace UNSInfra.Storage.SQLite.Migrations
{
    [DbContext(typeof(UNSInfraDbContext))]
    [Migration("20250818144741_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.ConnectionConfigurationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AutoStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionConfigJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("InputsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TagsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AutoStart");

                    b.HasIndex("ConnectionType");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("ModifiedAt");

                    b.HasIndex("Name");

                    b.ToTable("ConnectionConfigurations");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.DataIngestionConfigurationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ConfigurationJson");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Enabled");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT")
                        .HasColumnName("Metadata");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("ModifiedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("ServiceType");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Enabled");

                    b.HasIndex("ModifiedAt");

                    b.HasIndex("Name");

                    b.HasIndex("ServiceType");

                    b.ToTable("DataIngestionConfigurations");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.DataPointEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PathValuesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValueJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Source");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Topic");

                    b.HasIndex("Topic", "Timestamp");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.DataSchemaEntity", b =>
                {
                    b.Property<string>("SchemaId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonSchema")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PropertyTypesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationRulesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SchemaId");

                    b.HasIndex("Topic");

                    b.ToTable("DataSchemas");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.HierarchyConfigurationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("HierarchyConfigurations");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.HierarchyNodeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedChildNodeIdsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("HierarchyConfigurationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentNodeId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentNodeId");

                    b.HasIndex("HierarchyConfigurationId", "Order");

                    b.ToTable("HierarchyNodes");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.InputOutputConfigurationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("ModifiedAt");

                    b.HasIndex("Name");

                    b.HasIndex("ServiceType");

                    b.HasIndex("Type");

                    b.ToTable("InputOutputConfigurations");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.NSTreeInstanceEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HierarchyNodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentInstanceId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyNodeId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("ParentInstanceId");

                    b.ToTable("NSTreeInstances");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.NamespaceConfigurationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AllowedParentHierarchyNodeId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("HierarchicalPathJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentNamespaceId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("ParentNamespaceId");

                    b.HasIndex("Type");

                    b.HasIndex("Name", "HierarchicalPathJson");

                    b.ToTable("NamespaceConfigurations");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.TopicConfigurationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NSPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("NamespaceConfigurationId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PathValuesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UNSName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("NamespaceConfigurationId");

                    b.HasIndex("SourceType");

                    b.HasIndex("Topic")
                        .IsUnique();

                    b.ToTable("TopicConfigurations");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.HierarchyNodeEntity", b =>
                {
                    b.HasOne("UNSInfra.Storage.SQLite.Entities.HierarchyConfigurationEntity", "HierarchyConfiguration")
                        .WithMany("Nodes")
                        .HasForeignKey("HierarchyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UNSInfra.Storage.SQLite.Entities.HierarchyNodeEntity", "ParentNode")
                        .WithMany("ChildNodes")
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HierarchyConfiguration");

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.HierarchyConfigurationEntity", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("UNSInfra.Storage.SQLite.Entities.HierarchyNodeEntity", b =>
                {
                    b.Navigation("ChildNodes");
                });
#pragma warning restore 612, 618
        }
    }
}
